{"meta":{"title":"Locutus","subtitle":null,"description":"All your standard libraries will be assimilated into our JavaScript collective. Resistance is futile.","author":"Kevin van Zonneveld","url":"http://locutus.io"},"pages":[{"title":"","date":"2016-05-11T20:24:01.013Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"404.html","permalink":"http://locutus.io/404.html","excerpt":"","keywords":null,"text":"Not found There's a good chance you can still find what you are looking for using the search bar or one drill down via one of the languages in the top navigation. var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-63083-7']); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();","raw":null,"content":null},{"title":"Ruby modules  in JavaScript","date":"2016-05-11T20:27:50.126Z","updated":"2016-05-11T20:27:50.126Z","comments":true,"path":"ruby/index.html","permalink":"http://locutus.io/ruby/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"Ruby's Math module  in JavaScript","date":"2016-05-11T20:27:50.126Z","updated":"2016-05-11T20:27:50.126Z","comments":true,"path":"ruby/Math/index.html","permalink":"http://locutus.io/ruby/Math/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"Ruby's Math.acos in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"ruby/Math/acos/index.html","permalink":"http://locutus.io/ruby/Math/acos/index.html","excerpt":"","keywords":null,"text":"12345678910module.exports = function acos (arg) &#123; // discuss at: http://locutus.io/ruby/Math/acos/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // note 1: Sorry about the crippled test. // note 1: Needed because precision differs accross platforms. // example 1: (acos(0.3) + '').substr(0, 17) // returns 1: '1.266103672779499' return Math.acos(arg)&#125;","raw":null,"content":null},{"title":"Python's string module  in JavaScript","date":"2016-05-11T20:27:50.126Z","updated":"2016-05-11T20:27:50.126Z","comments":true,"path":"python/string/index.html","permalink":"http://locutus.io/python/string/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"Python's string.capwords in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"python/string/capwords/index.html","permalink":"http://locutus.io/python/string/capwords/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function capwords (str) &#123; // discuss at: http://locutus.io/python/capwords/ // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // improved by: Waldo Malqui Silva (http://waldo.malqui.info) // improved by: Robin // improved by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // input by: James (http://www.james-bell.co.uk/) // example 1: capwords('kevin van zonneveld') // returns 1: 'Kevin Van Zonneveld' // example 2: capwords('HELLO WORLD') // returns 2: 'HELLO WORLD' var pattern = /^([a-z\\u00E0-\\u00FC])|\\s+([a-z\\u00E0-\\u00FC])/g str = (str + '') str = str.replace(pattern, function ($1) &#123; return $1.toUpperCase() &#125;) return str&#125;","raw":null,"content":null},{"title":"Python modules  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"python/index.html","permalink":"http://locutus.io/python/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's utf8_encode in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/xml/utf8_encode/index.html","permalink":"http://locutus.io/php/xml/utf8_encode/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172module.exports = function utf8_encode (argString) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/utf8_encode/ // original by: Webtoolkit.info (http://www.webtoolkit.info/) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: sowberry // improved by: Jack // improved by: Yves Sucaet // improved by: kirilloid // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Ulrich // bugfixed by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // bugfixed by: kirilloid // example 1: utf8_encode('Kevin van Zonneveld') // returns 1: 'Kevin van Zonneveld' if (argString === null || typeof argString === 'undefined') &#123; return '' &#125; // .replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\"); var string = (argString + '') var utftext = '' var start var end var stringl = 0 start = end = 0 stringl = string.length for (var n = 0; n &lt; stringl; n++) &#123; var c1 = string.charCodeAt(n) var enc = null if (c1 &lt; 128) &#123; end++ &#125; else if (c1 &gt; 127 &amp;&amp; c1 &lt; 2048) &#123; enc = String.fromCharCode( (c1 &gt;&gt; 6) | 192, (c1 &amp; 63) | 128 ) &#125; else if ((c1 &amp; 0xF800) !== 0xD800) &#123; enc = String.fromCharCode( (c1 &gt;&gt; 12) | 224, ((c1 &gt;&gt; 6) &amp; 63) | 128, (c1 &amp; 63) | 128 ) &#125; else &#123; // surrogate pairs if ((c1 &amp; 0xFC00) !== 0xD800) &#123; throw new RangeError('Unmatched trail surrogate at ' + n) &#125; var c2 = string.charCodeAt(++n) if ((c2 &amp; 0xFC00) !== 0xDC00) &#123; throw new RangeError('Unmatched lead surrogate at ' + (n - 1)) &#125; c1 = ((c1 &amp; 0x3FF) &lt;&lt; 10) + (c2 &amp; 0x3FF) + 0x10000 enc = String.fromCharCode( (c1 &gt;&gt; 18) | 240, ((c1 &gt;&gt; 12) &amp; 63) | 128, ((c1 &gt;&gt; 6) &amp; 63) | 128, (c1 &amp; 63) | 128 ) &#125; if (enc !== null) &#123; if (end &gt; start) &#123; utftext += string.slice(start, end) &#125; utftext += enc start = end = n + 1 &#125; &#125; if (end &gt; start) &#123; utftext += string.slice(start, stringl) &#125; return utftext&#125;","raw":null,"content":null},{"title":"PHP's utf8_decode in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/xml/utf8_decode/index.html","permalink":"http://locutus.io/php/xml/utf8_decode/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758module.exports = function utf8_decode (strData) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/utf8_decode/ // original by: Webtoolkit.info (http://www.webtoolkit.info/) // input by: Aman Gupta // input by: Brett Zamir (http://brett-zamir.me) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Norman \"zEh\" Fuchs // bugfixed by: hitwork // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: kirilloid // bugfixed by: w35l3y (http://www.wesley.eti.br) // example 1: utf8_decode('Kevin van Zonneveld') // returns 1: 'Kevin van Zonneveld' var tmpArr = [] var i = 0 var c1 = 0 var seqlen = 0 strData += '' while (i &lt; strData.length) &#123; c1 = strData.charCodeAt(i) &amp; 0xFF seqlen = 0 // http://en.wikipedia.org/wiki/UTF-8#Codepage_layout if (c1 &lt;= 0xBF) &#123; c1 = (c1 &amp; 0x7F) seqlen = 1 &#125; else if (c1 &lt;= 0xDF) &#123; c1 = (c1 &amp; 0x1F) seqlen = 2 &#125; else if (c1 &lt;= 0xEF) &#123; c1 = (c1 &amp; 0x0F) seqlen = 3 &#125; else &#123; c1 = (c1 &amp; 0x07) seqlen = 4 &#125; for (var ai = 1; ai &lt; seqlen; ++ai) &#123; c1 = ((c1 &lt;&lt; 0x06) | (strData.charCodeAt(ai + i) &amp; 0x3F)) &#125; if (seqlen === 4) &#123; c1 -= 0x10000 tmpArr.push(String.fromCharCode(0xD800 | ((c1 &gt;&gt; 10) &amp; 0x3FF))) tmpArr.push(String.fromCharCode(0xDC00 | (c1 &amp; 0x3FF))) &#125; else &#123; tmpArr.push(String.fromCharCode(c1)) &#125; i += seqlen &#125; return tmpArr.join('')&#125;","raw":null,"content":null},{"title":"PHP's xml extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/xml/index.html","permalink":"http://locutus.io/php/xml/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's xdiff_string_patch in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/xdiff/xdiff_string_patch/index.html","permalink":"http://locutus.io/php/xdiff/xdiff_string_patch/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205module.exports = function xdiff_string_patch (originalStr, patch, flags, errorObj) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/xdiff_string_patch/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Steven Levithan (stevenlevithan.com) // note 1: The XDIFF_PATCH_IGNORESPACE flag and the error argument are not // note 1: currently supported. // note 2: This has not been tested exhaustively yet. // note 3: The errorObj parameter (optional) if used must be passed in as a // note 3: object. The errors will then be written by reference into it's `value` property // example 1: xdiff_string_patch('', '@@ -0,0 +1,1 @@\\n+Hello world!') // returns 1: 'Hello world!' // First two functions were adapted from Steven Levithan, also under an MIT license // Adapted from XRegExp 1.5.0 // (c) 2007-2010 Steven Levithan // MIT License // &lt;http://xregexp.com&gt; var _getNativeFlags = function (regex) &#123; // Proposed for ES4; included in AS3 return [ (regex.global ? 'g' : ''), (regex.ignoreCase ? 'i' : ''), (regex.multiline ? 'm' : ''), (regex.extended ? 'x' : ''), (regex.sticky ? 'y' : '') ].join('') &#125; var _cbSplit = function (string, sep) &#123; // If separator `s` is not a regex, use the native `split` if (!(sep instanceof RegExp)) &#123; // Had problems to get it to work here using prototype test return String.prototype.split.apply(string, arguments) &#125; var str = String(string) var output = [] var lastLastIndex = 0 var match var lastLength var limit = Infinity var x = sep._xregexp // This is required if not `s.global`, and it avoids needing to set `s.lastIndex` to zero // and restore it to its original value when we're done using the regex // Brett paring down var s = new RegExp(sep.source, _getNativeFlags(sep) + 'g') if (x) &#123; s._xregexp = &#123; source: x.source, captureNames: x.captureNames ? x.captureNames.slice(0) : null &#125; &#125; while ((match = s.exec(str))) &#123; // Run the altered `exec` (required for `lastIndex` fix, etc.) if (s.lastIndex &gt; lastLastIndex) &#123; output.push(str.slice(lastLastIndex, match.index)) if (match.length &gt; 1 &amp;&amp; match.index &lt; str.length) &#123; Array.prototype.push.apply(output, match.slice(1)) &#125; lastLength = match[0].length lastLastIndex = s.lastIndex if (output.length &gt;= limit) &#123; break &#125; &#125; if (s.lastIndex === match.index) &#123; s.lastIndex++ &#125; &#125; if (lastLastIndex === str.length) &#123; if (!s.test('') || lastLength) &#123; output.push('') &#125; &#125; else &#123; output.push(str.slice(lastLastIndex)) &#125; return output.length &gt; limit ? output.slice(0, limit) : output &#125; var i = 0 var ll = 0 var ranges = [] var lastLinePos = 0 var firstChar = '' var rangeExp = /^@@\\s+-(\\d+),(\\d+)\\s+\\+(\\d+),(\\d+)\\s+@@$/ var lineBreaks = /\\r?\\n/ var lines = _cbSplit(patch.replace(/(\\r?\\n)+$/, ''), lineBreaks) var origLines = _cbSplit(originalStr, lineBreaks) var newStrArr = [] var linePos = 0 var errors = '' var optTemp = 0 // Both string &amp; integer (constant) input is allowed var OPTS = &#123; // Unsure of actual PHP values, so better to rely on string 'XDIFF_PATCH_NORMAL': 1, 'XDIFF_PATCH_REVERSE': 2, 'XDIFF_PATCH_IGNORESPACE': 4 &#125; // Input defaulting &amp; sanitation if (typeof originalStr !== 'string' || !patch) &#123; return false &#125; if (!flags) &#123; flags = 'XDIFF_PATCH_NORMAL' &#125; if (typeof flags !== 'number') &#123; // Allow for a single string or an array of string flags flags = [].concat(flags) for (i = 0; i &lt; flags.length; i++) &#123; // Resolve string input to bitwise e.g. 'XDIFF_PATCH_NORMAL' becomes 1 if (OPTS[flags[i]]) &#123; optTemp = optTemp | OPTS[flags[i]] &#125; &#125; flags = optTemp &#125; if (flags &amp; OPTS.XDIFF_PATCH_NORMAL) &#123; for (i = 0, ll = lines.length; i &lt; ll; i++) &#123; ranges = lines[i].match(rangeExp) if (ranges) &#123; lastLinePos = linePos linePos = ranges[1] - 1 while (lastLinePos &lt; linePos) &#123; newStrArr[newStrArr.length] = origLines[lastLinePos++] &#125; while (lines[++i] &amp;&amp; (rangeExp.exec(lines[i])) === null) &#123; firstChar = lines[i].charAt(0) switch (firstChar) &#123; case '-': // Skip including that line ++linePos break case '+': newStrArr[newStrArr.length] = lines[i].slice(1) break case ' ': newStrArr[newStrArr.length] = origLines[linePos++] break default: // Reconcile with returning errrors arg? throw new Error('Unrecognized initial character in unidiff line') &#125; &#125; if (lines[i]) &#123; i-- &#125; &#125; &#125; while (linePos &gt; 0 &amp;&amp; linePos &lt; origLines.length) &#123; newStrArr[newStrArr.length] = origLines[linePos++] &#125; &#125; else if (flags &amp; OPTS.XDIFF_PATCH_REVERSE) &#123; // Only differs from above by a few lines for (i = 0, ll = lines.length; i &lt; ll; i++) &#123; ranges = lines[i].match(rangeExp) if (ranges) &#123; lastLinePos = linePos linePos = ranges[3] - 1 while (lastLinePos &lt; linePos) &#123; newStrArr[newStrArr.length] = origLines[lastLinePos++] &#125; while (lines[++i] &amp;&amp; (rangeExp.exec(lines[i])) === null) &#123; firstChar = lines[i].charAt(0) switch (firstChar) &#123; case '-': newStrArr[newStrArr.length] = lines[i].slice(1) break case '+': // Skip including that line ++linePos break case ' ': newStrArr[newStrArr.length] = origLines[linePos++] break default: // Reconcile with returning errrors arg? throw new Error('Unrecognized initial character in unidiff line') &#125; &#125; if (lines[i]) &#123; i-- &#125; &#125; &#125; while (linePos &gt; 0 &amp;&amp; linePos &lt; origLines.length) &#123; newStrArr[newStrArr.length] = origLines[linePos++] &#125; &#125; if (errorObj) &#123; errorObj.value = errors &#125; return newStrArr.join('\\n')&#125;","raw":null,"content":null},{"title":"PHP's xdiff_string_diff in JavaScript","date":"2016-05-11T20:27:50.118Z","updated":"2016-05-11T20:27:50.118Z","comments":true,"path":"php/xdiff/xdiff_string_diff/index.html","permalink":"http://locutus.io/php/xdiff/xdiff_string_diff/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463module.exports = function xdiff_string_diff (oldData, newData, contextLines, minimal) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/xdiff_string_diff // original by: Brett Zamir (http://brett-zamir.me) // based on: Imgen Tata (http://www.myipdf.com/) // bugfixed by: Imgen Tata (http://www.myipdf.com/) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: The minimal argument is not currently supported // example 1: xdiff_string_diff('', 'Hello world!') // returns 1: '@@ -0,0 +1,1 @@\\n+Hello world!' // (This code was done by Imgen Tata; I have only reformatted for use in Locutus) // See http://en.wikipedia.org/wiki/Diff#Unified_format var i = 0 var j = 0 var k = 0 var oriHunkStart var newHunkStart var oriHunkEnd var newHunkEnd var oriHunkLineNo var newHunkLineNo var oriHunkSize var newHunkSize var MAX_CONTEXT_LINES = Number.POSITIVE_INFINITY // Potential configuration var MIN_CONTEXT_LINES = 0 var DEFAULT_CONTEXT_LINES = 3 var HEADER_PREFIX = '@@ ' // var HEADER_SUFFIX = ' @@' var ORIGINAL_INDICATOR = '-' var NEW_INDICATOR = '+' var RANGE_SEPARATOR = ',' var CONTEXT_INDICATOR = ' ' var DELETION_INDICATOR = '-' var ADDITION_INDICATOR = '+' var oriLines var newLines var NEW_LINE = '\\n' var _trim = function (text) &#123; if (typeof text !== 'string') &#123; throw new Error('String parameter required') &#125; return text.replace(/(^\\s*)|(\\s*$)/g, '') &#125; var _verifyType = function (type) &#123; var args = arguments var argsLen = arguments.length var basicTypes = ['number', 'boolean', 'string', 'function', 'object', 'undefined'] var basicType var i var j var typeOfType = typeof type if (typeOfType !== 'string' &amp;&amp; typeOfType !== 'function') &#123; throw new Error('Bad type parameter') &#125; if (argsLen &lt; 2) &#123; throw new Error('Too few arguments') &#125; if (typeOfType === 'string') &#123; type = _trim(type) if (type === '') &#123; throw new Error('Bad type parameter') &#125; for (j = 0; j &lt; basicTypes.length; j++) &#123; basicType = basicTypes[j] if (basicType === type) &#123; for (i = 1; i &lt; argsLen; i++) &#123; if (typeof args[i] !== type) &#123; throw new Error('Bad type') &#125; &#125; return &#125; &#125; throw new Error('Bad type parameter') &#125; // Not basic type. we need to use instanceof operator for (i = 1; i &lt; argsLen; i++) &#123; if (!(args[i] instanceof type)) &#123; throw new Error('Bad type') &#125; &#125; &#125; var _hasValue = function (array, value) &#123; var i _verifyType(Array, array) for (i = 0; i &lt; array.length; i++) &#123; if (array[i] === value) &#123; return true &#125; &#125; return false &#125; var _areTypeOf = function (type) &#123; var args = arguments var argsLen = arguments.length var basicTypes = ['number', 'boolean', 'string', 'function', 'object', 'undefined'] var basicType var i var j var typeOfType = typeof type if (typeOfType !== 'string' &amp;&amp; typeOfType !== 'function') &#123; throw new Error('Bad type parameter') &#125; if (argsLen &lt; 2) &#123; throw new Error('Too few arguments') &#125; if (typeOfType === 'string') &#123; type = _trim(type) if (type === '') &#123; return false &#125; for (j = 0; j &lt; basicTypes.length; j++) &#123; basicType = basicTypes[j] if (basicType === type) &#123; for (i = 1; i &lt; argsLen; i++) &#123; if (typeof args[i] !== type) &#123; return false &#125; &#125; return true &#125; &#125; throw new Error('Bad type parameter') &#125; // Not basic type. we need to use instanceof operator for (i = 1; i &lt; argsLen; i++) &#123; if (!(args[i] instanceof type)) &#123; return false &#125; &#125; return true &#125; var _getInitializedArray = function (arraySize, initValue) &#123; var array = [] var i _verifyType('number', arraySize) for (i = 0; i &lt; arraySize; i++) &#123; array.push(initValue) &#125; return array &#125; var _splitIntoLines = function (text) &#123; _verifyType('string', text) if (text === '') &#123; return [] &#125; return text.split('\\n') &#125; var _isEmptyArray = function (obj) &#123; return _areTypeOf(Array, obj) &amp;&amp; obj.length === 0 &#125; /** * Finds longest common sequence between two sequences * @see &#123;@link http://wordaligned.org/articles/longest-common-subsequence&#125; */ var _findLongestCommonSequence = function (seq1, seq2, seq1IsInLcs, seq2IsInLcs) &#123; if (!_areTypeOf(Array, seq1, seq2)) &#123; throw new Error('Array parameters are required') &#125; // Deal with edge case if (_isEmptyArray(seq1) || _isEmptyArray(seq2)) &#123; return [] &#125; // Function to calculate lcs lengths var lcsLens = function (xs, ys) &#123; var i var j var prev var curr = _getInitializedArray(ys.length + 1, 0) for (i = 0; i &lt; xs.length; i++) &#123; prev = curr.slice(0) for (j = 0; j &lt; ys.length; j++) &#123; if (xs[i] === ys[j]) &#123; curr[j + 1] = prev[j] + 1 &#125; else &#123; curr[j + 1] = Math.max(curr[j], prev[j + 1]) &#125; &#125; &#125; return curr &#125; // Function to find lcs and fill in the array to indicate the optimal longest common sequence var _findLcs = function (xs, xidx, xIsIn, ys) &#123; var i var xb var xe var llB var llE var pivot var max var yb var ye var nx = xs.length var ny = ys.length if (nx === 0) &#123; return [] &#125; if (nx === 1) &#123; if (_hasValue(ys, xs[0])) &#123; xIsIn[xidx] = true return [xs[0]] &#125; return [] &#125; i = Math.floor(nx / 2) xb = xs.slice(0, i) xe = xs.slice(i) llB = lcsLens(xb, ys) llE = lcsLens(xe.slice(0) .reverse(), ys.slice(0) .reverse()) pivot = 0 max = 0 for (j = 0; j &lt;= ny; j++) &#123; if (llB[j] + llE[ny - j] &gt; max) &#123; pivot = j max = llB[j] + llE[ny - j] &#125; &#125; yb = ys.slice(0, pivot) ye = ys.slice(pivot) return _findLcs(xb, xidx, xIsIn, yb).concat(_findLcs(xe, xidx + i, xIsIn, ye)) &#125; // Fill in seq1IsInLcs to find the optimal longest common subsequence of first sequence _findLcs(seq1, 0, seq1IsInLcs, seq2) // Fill in seq2IsInLcs to find the optimal longest common subsequence // of second sequence and return the result return _findLcs(seq2, 0, seq2IsInLcs, seq1) &#125; // First, check the parameters if (_areTypeOf('string', oldData, newData) === false) &#123; return false &#125; if (oldData === newData) &#123; return '' &#125; if (typeof contextLines !== 'number' || contextLines &gt; MAX_CONTEXT_LINES || contextLines &lt; MIN_CONTEXT_LINES) &#123; contextLines = DEFAULT_CONTEXT_LINES &#125; oriLines = _splitIntoLines(oldData) newLines = _splitIntoLines(newData) var oriLen = oriLines.length var newLen = newLines.length var oriIsInLcs = _getInitializedArray(oriLen, false) var newIsInLcs = _getInitializedArray(newLen, false) var lcsLen = _findLongestCommonSequence(oriLines, newLines, oriIsInLcs, newIsInLcs).length var unidiff = '' if (lcsLen === 0) &#123; // No common sequence unidiff = [ HEADER_PREFIX, ORIGINAL_INDICATOR, (oriLen &gt; 0 ? '1' : '0'), RANGE_SEPARATOR, oriLen, ' ', NEW_INDICATOR, (newLen &gt; 0 ? '1' : '0'), RANGE_SEPARATOR, newLen, HEADER_SUFFIX ].join('') for (i = 0; i &lt; oriLen; i++) &#123; unidiff += NEW_LINE + DELETION_INDICATOR + oriLines[i] &#125; for (j = 0; j &lt; newLen; j++) &#123; unidiff += NEW_LINE + ADDITION_INDICATOR + newLines[j] &#125; return unidiff &#125; var leadingContext = [] var trailingContext = [] var actualLeadingContext = [] var actualTrailingContext = [] // Regularize leading context by the contextLines parameter var regularizeLeadingContext = function (context) &#123; if (context.length === 0 || contextLines === 0) &#123; return [] &#125; var contextStartPos = Math.max(context.length - contextLines, 0) return context.slice(contextStartPos) &#125; // Regularize trailing context by the contextLines parameter var regularizeTrailingContext = function (context) &#123; if (context.length === 0 || contextLines === 0) &#123; return [] &#125; return context.slice(0, Math.min(contextLines, context.length)) &#125; // Skip common lines in the beginning while (i &lt; oriLen &amp;&amp; oriIsInLcs[i] === true &amp;&amp; newIsInLcs[i] === true) &#123; leadingContext.push(oriLines[i]) i++ &#125; j = i // The index in the longest common sequence k = i oriHunkStart = i newHunkStart = j oriHunkEnd = i newHunkEnd = j while (i &lt; oriLen || j &lt; newLen) &#123; while (i &lt; oriLen &amp;&amp; oriIsInLcs[i] === false) &#123; i++ &#125; oriHunkEnd = i while (j &lt; newLen &amp;&amp; newIsInLcs[j] === false) &#123; j++ &#125; newHunkEnd = j // Find the trailing context trailingContext = [] while (i &lt; oriLen &amp;&amp; oriIsInLcs[i] === true &amp;&amp; j &lt; newLen &amp;&amp; newIsInLcs[j] === true) &#123; trailingContext.push(oriLines[i]) k++ i++ j++ &#125; if (k &gt;= lcsLen || // No more in longest common lines trailingContext.length &gt;= 2 * contextLines) &#123; // Context break found if (trailingContext.length &lt; 2 * contextLines) &#123; // It must be last block of common lines but not a context break trailingContext = [] // Force break out i = oriLen j = newLen // Update hunk ends to force output to the end oriHunkEnd = oriLen newHunkEnd = newLen &#125; // Output the diff hunk // Trim the leading and trailing context block actualLeadingContext = regularizeLeadingContext(leadingContext) actualTrailingContext = regularizeTrailingContext(trailingContext) oriHunkStart -= actualLeadingContext.length newHunkStart -= actualLeadingContext.length oriHunkEnd += actualTrailingContext.length newHunkEnd += actualTrailingContext.length oriHunkLineNo = oriHunkStart + 1 newHunkLineNo = newHunkStart + 1 oriHunkSize = oriHunkEnd - oriHunkStart newHunkSize = newHunkEnd - newHunkStart // Build header unidiff += [ HEADER_PREFIX, ORIGINAL_INDICATOR, oriHunkLineNo, RANGE_SEPARATOR, oriHunkSize, ' ', NEW_INDICATOR, newHunkLineNo, RANGE_SEPARATOR, newHunkSize, HEADER_SUFFIX, NEW_LINE ].join('') // Build the diff hunk content while (oriHunkStart &lt; oriHunkEnd || newHunkStart &lt; newHunkEnd) &#123; if (oriHunkStart &lt; oriHunkEnd &amp;&amp; oriIsInLcs[oriHunkStart] === true &amp;&amp; newIsInLcs[newHunkStart] === true) &#123; // The context line unidiff += CONTEXT_INDICATOR + oriLines[oriHunkStart] + NEW_LINE oriHunkStart++ newHunkStart++ &#125; else if (oriHunkStart &lt; oriHunkEnd &amp;&amp; oriIsInLcs[oriHunkStart] === false) &#123; // The deletion line unidiff += DELETION_INDICATOR + oriLines[oriHunkStart] + NEW_LINE oriHunkStart++ &#125; else if (newHunkStart &lt; newHunkEnd &amp;&amp; newIsInLcs[newHunkStart] === false) &#123; // The additional line unidiff += ADDITION_INDICATOR + newLines[newHunkStart] + NEW_LINE newHunkStart++ &#125; &#125; // Update hunk position and leading context oriHunkStart = i newHunkStart = j leadingContext = trailingContext &#125; &#125; // Trim the trailing new line if it exists if (unidiff.length &gt; 0 &amp;&amp; unidiff.charAt(unidiff.length) === NEW_LINE) &#123; unidiff = unidiff.slice(0, -1) &#125; return unidiff&#125;","raw":null,"content":null},{"title":"PHP's xdiff extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/xdiff/index.html","permalink":"http://locutus.io/php/xdiff/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's var_export in JavaScript","date":"2016-05-11T20:27:50.114Z","updated":"2016-05-11T20:27:50.114Z","comments":true,"path":"php/var/var_export/index.html","permalink":"http://locutus.io/php/var/var_export/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121module.exports = function var_export (mixedExpression, boolReturn) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/var_export/ // original by: Philip Peterson // improved by: johnrembo // improved by: Brett Zamir (http://brett-zamir.me) // input by: Brian Tafoya (http://www.premasolutions.com/) // input by: Hans Henrik (http://hanshenrik.tk/) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: var_export(null) // returns 1: null // example 2: var_export(&#123;0: 'Kevin', 1: 'van', 2: 'Zonneveld'&#125;, true) // returns 2: \"array (\\n 0 =&gt; 'Kevin',\\n 1 =&gt; 'van',\\n 2 =&gt; 'Zonneveld'\\n)\" // example 3: var data = 'Kevin' // example 3: var_export(data, true) // returns 3: \"'Kevin'\" var echo = require('../strings/echo') var retstr = '' var iret = '' var value var cnt = 0 var x = [] var i = 0 var funcParts = [] // We use the last argument (not part of PHP) to pass in // our indentation level var idtLevel = arguments[2] || 2 var innerIndent = '' var outerIndent = '' var getFuncName = function (fn) &#123; var name = (/\\W*function\\s+([\\w\\$]+)\\s*\\(/).exec(fn) if (!name) &#123; return '(Anonymous)' &#125; return name[1] &#125; var _makeIndent = function (idtLevel) &#123; return (new Array(idtLevel + 1)) .join(' ') &#125; var __getType = function (inp) &#123; var i = 0 var match var types var cons var type = typeof inp if (type === 'object' &amp;&amp; (inp &amp;&amp; inp.constructor) &amp;&amp; getFuncName(inp.constructor) === 'LOCUTUS_Resource') &#123; return 'resource' &#125; if (type === 'function') &#123; return 'function' &#125; if (type === 'object' &amp;&amp; !inp) &#123; // Should this be just null? return 'null' &#125; if (type === 'object') &#123; if (!inp.constructor) &#123; return 'object' &#125; cons = inp.constructor.toString() match = cons.match(/(\\w+)\\(/) if (match) &#123; cons = match[1].toLowerCase() &#125; types = ['boolean', 'number', 'string', 'array'] for (i = 0; i &lt; types.length; i++) &#123; if (cons === types[i]) &#123; type = types[i] break &#125; &#125; &#125; return type &#125; var type = __getType(mixedExpression) if (type === null) &#123; retstr = 'NULL' &#125; else if (type === 'array' || type === 'object') &#123; outerIndent = _makeIndent(idtLevel - 2) innerIndent = _makeIndent(idtLevel) for (i in mixedExpression) &#123; value = var_export(mixedExpression[i], 1, idtLevel + 2) value = typeof value === 'string' ? value.replace(/&lt;/g, '&amp;lt;') .replace(/&gt;/g, '&amp;gt;') : value x[cnt++] = innerIndent + i + ' =&gt; ' + (__getType(mixedExpression[i]) === 'array' ? '\\n' : '') + value &#125; iret = x.join(',\\n') retstr = outerIndent + 'array (\\n' + iret + '\\n' + outerIndent + ')' &#125; else if (type === 'function') &#123; funcParts = mixedExpression.toString().match(/function .*?\\((.*?)\\) \\&#123;([\\s\\S]*)\\&#125;/) // For lambda functions, var_export() outputs such as the following: // '\\000lambda_1'. Since it will probably not be a common use to // expect this (unhelpful) form, we'll use another PHP-exportable // construct, create_function() (though dollar signs must be on the // variables in JavaScript); if using instead in JavaScript and you // are using the namespaced version, note that create_function() will // not be available as a global retstr = \"create_function ('\" + funcParts[1] + \"', '\" + funcParts[2].replace(new RegExp(\"'\", 'g'), \"\\\\'\") + \"')\" &#125; else if (type === 'resource') &#123; // Resources treated as null for var_export retstr = 'NULL' &#125; else &#123; retstr = typeof mixedExpression !== 'string' ? mixedExpression : \"'\" + mixedExpression.replace(/([\"'])/g, '\\\\$1').replace(/\\0/g, '\\\\0') + \"'\" &#125; if (!boolReturn) &#123; echo(retstr) return null &#125; return retstr&#125;","raw":null,"content":null},{"title":"PHP's var_dump in JavaScript","date":"2016-05-11T20:27:50.114Z","updated":"2016-05-11T20:27:50.114Z","comments":true,"path":"php/var/var_dump/index.html","permalink":"http://locutus.io/php/var/var_dump/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174module.exports = function var_dump () &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/var_dump/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Zahlii // improved by: Brett Zamir (http://brett-zamir.me) // note 1: For returning a string, use var_export() with the second argument set to true // test: skip-all // example 1: var_dump(1) // returns 1: 'int(1)' var echo = require('../strings/echo') var output = '' var padChar = ' ' var padVal = 4 var lgth = 0 var i = 0 var _getFuncName = function (fn) &#123; var name = (/\\W*function\\s+([\\w\\$]+)\\s*\\(/) .exec(fn) if (!name) &#123; return '(Anonymous)' &#125; return name[1] &#125; var _repeatChar = function (len, padChar) &#123; var str = '' for (var i = 0; i &lt; len; i++) &#123; str += padChar &#125; return str &#125; var _getInnerVal = function (val, thickPad) &#123; var ret = '' if (val === null) &#123; ret = 'NULL' &#125; else if (typeof val === 'boolean') &#123; ret = 'bool(' + val + ')' &#125; else if (typeof val === 'string') &#123; ret = 'string(' + val.length + ') \"' + val + '\"' &#125; else if (typeof val === 'number') &#123; if (parseFloat(val) === parseInt(val, 10)) &#123; ret = 'int(' + val + ')' &#125; else &#123; ret = 'float(' + val + ')' &#125; &#125; else if (typeof val === 'undefined') &#123; // The remaining are not PHP behavior because these values // only exist in this exact form in JavaScript ret = 'undefined' &#125; else if (typeof val === 'function') &#123; var funcLines = val.toString() .split('\\n') ret = '' for (var i = 0, fll = funcLines.length; i &lt; fll; i++) &#123; ret += (i !== 0 ? '\\n' + thickPad : '') + funcLines[i] &#125; &#125; else if (val instanceof Date) &#123; ret = 'Date(' + val + ')' &#125; else if (val instanceof RegExp) &#123; ret = 'RegExp(' + val + ')' &#125; else if (val.nodeName) &#123; // Different than PHP's DOMElement switch (val.nodeType) &#123; case 1: if (typeof val.namespaceURI === 'undefined' || val.namespaceURI === 'http://www.w3.org/1999/xhtml') &#123; // Undefined namespace could be plain XML, but namespaceURI not widely supported ret = 'HTMLElement(\"' + val.nodeName + '\")' &#125; else &#123; ret = 'XML Element(\"' + val.nodeName + '\")' &#125; break case 2: ret = 'ATTRIBUTE_NODE(' + val.nodeName + ')' break case 3: ret = 'TEXT_NODE(' + val.nodeValue + ')' break case 4: ret = 'CDATA_SECTION_NODE(' + val.nodeValue + ')' break case 5: ret = 'ENTITY_REFERENCE_NODE' break case 6: ret = 'ENTITY_NODE' break case 7: ret = 'PROCESSING_INSTRUCTION_NODE(' + val.nodeName + ':' + val.nodeValue + ')' break case 8: ret = 'COMMENT_NODE(' + val.nodeValue + ')' break case 9: ret = 'DOCUMENT_NODE' break case 10: ret = 'DOCUMENT_TYPE_NODE' break case 11: ret = 'DOCUMENT_FRAGMENT_NODE' break case 12: ret = 'NOTATION_NODE' break &#125; &#125; return ret &#125; var _formatArray = function (obj, curDepth, padVal, padChar) &#123; if (curDepth &gt; 0) &#123; curDepth++ &#125; var basePad = _repeatChar(padVal * (curDepth - 1), padChar) var thickPad = _repeatChar(padVal * (curDepth + 1), padChar) var str = '' var val = '' if (typeof obj === 'object' &amp;&amp; obj !== null) &#123; if (obj.constructor &amp;&amp; _getFuncName(obj.constructor) === 'LOCUTUS_Resource') &#123; return obj.var_dump() &#125; lgth = 0 for (var someProp in obj) &#123; if (obj.hasOwnProperty(someProp)) &#123; lgth++ &#125; &#125; str += 'array(' + lgth + ') &#123;\\n' for (var key in obj) &#123; var objVal = obj[key] if (typeof objVal === 'object' &amp;&amp; objVal !== null &amp;&amp; !(objVal instanceof Date) &amp;&amp; !(objVal instanceof RegExp) &amp;&amp; !objVal.nodeName) &#123; str += thickPad str += '[' str += key str += '] =&gt;\\n' str += thickPad str += _formatArray(objVal, curDepth + 1, padVal, padChar) &#125; else &#123; val = _getInnerVal(objVal, thickPad) str += thickPad str += '[' str += key str += '] =&gt;\\n' str += thickPad str += val str += '\\n' &#125; &#125; str += basePad + '&#125;\\n' &#125; else &#123; str = _getInnerVal(obj, thickPad) &#125; return str &#125; output = _formatArray(arguments[0], 0, padVal, padChar) for (i = 1; i &lt; arguments.length; i++) &#123; output += '\\n' + _formatArray(arguments[i], 0, padVal, padChar) &#125; echo(output) // Not how PHP does it, but helps us test: return output&#125;","raw":null,"content":null},{"title":"PHP's unserialize in JavaScript","date":"2016-05-11T20:27:50.114Z","updated":"2016-05-11T20:27:50.114Z","comments":true,"path":"php/var/unserialize/index.html","permalink":"http://locutus.io/php/var/unserialize/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216module.exports = function unserialize (data) &#123; // discuss at: http://locutus.io/php/unserialize/ // original by: Arpad Ray (mailto:arpad@php.net) // improved by: Pedro Tainha (http://www.pedrotainha.com) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Chris // improved by: James // improved by: Le Torbi // improved by: Eli Skeggs // bugfixed by: dptr1988 // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // revised by: d3x // input by: Brett Zamir (http://brett-zamir.me) // input by: Martin (http://www.erlenwiese.de/) // input by: kilops // input by: Jaroslaw Czarniak // note 1: We feel the main purpose of this function should be // note 1: to ease the transport of data between php &amp; js // note 1: Aiming for PHP-compatibility, we have to translate objects to arrays // example 1: unserialize('a:3:&#123;i:0;s:5:\"Kevin\";i:1;s:3:\"van\";i:2;s:9:\"Zonneveld\";&#125;') // returns 1: ['Kevin', 'van', 'Zonneveld'] // example 2: unserialize('a:2:&#123;s:9:\"firstName\";s:5:\"Kevin\";s:7:\"midName\";s:3:\"van\";&#125;') // returns 2: &#123;firstName: 'Kevin', midName: 'van'&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) var utf8Overhead = function (chr) &#123; // http://locutus.io/php/unserialize:571#comment_95906 var code = chr.charCodeAt(0) var zeroCodes = [ 338, 339, 352, 353, 376, 402, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8364, 8482 ] if (code &lt; 0x0080 || code &gt;= 0x00A0 &amp;&amp; code &lt;= 0x00FF || zeroCodes.indexOf(code) !== -1) &#123; return 0 &#125; if (code &lt; 0x0800) &#123; return 1 &#125; return 2 &#125; var error = function (type, msg, filename, line) &#123; throw new $global[type](msg, filename, line) &#125; var readUntil = function (data, offset, stopchr) &#123; var i = 2 var buf = [] var chr = data.slice(offset, offset + 1) while (chr !== stopchr) &#123; if ((i + offset) &gt; data.length) &#123; error('Error', 'Invalid') &#125; buf.push(chr) chr = data.slice(offset + (i - 1), offset + i) i += 1 &#125; return [buf.length, buf.join('')] &#125; var readChrs = function (data, offset, length) &#123; var i, chr, buf buf = [] for (i = 0; i &lt; length; i++) &#123; chr = data.slice(offset + (i - 1), offset + i) buf.push(chr) length -= utf8Overhead(chr) &#125; return [buf.length, buf.join('')] &#125; var _unserialize = function (data, offset) &#123; var dtype var dataoffset var keyandchrs var keys var contig var length var array var readdata var readData var ccount var stringlength var i var key var kprops var kchrs var vprops var vchrs var value var chrs = 0 var typeconvert = function (x) &#123; return x &#125; if (!offset) &#123; offset = 0 &#125; dtype = (data.slice(offset, offset + 1)).toLowerCase() dataoffset = offset + 2 switch (dtype) &#123; case 'i': typeconvert = function (x) &#123; return parseInt(x, 10) &#125; readData = readUntil(data, dataoffset, ';') chrs = readData[0] readdata = readData[1] dataoffset += chrs + 1 break case 'b': typeconvert = function (x) &#123; return parseInt(x, 10) !== 0 &#125; readData = readUntil(data, dataoffset, ';') chrs = readData[0] readdata = readData[1] dataoffset += chrs + 1 break case 'd': typeconvert = function (x) &#123; return parseFloat(x) &#125; readData = readUntil(data, dataoffset, ';') chrs = readData[0] readdata = readData[1] dataoffset += chrs + 1 break case 'n': readdata = null break case 's': ccount = readUntil(data, dataoffset, ':') chrs = ccount[0] stringlength = ccount[1] dataoffset += chrs + 2 readData = readChrs(data, dataoffset + 1, parseInt(stringlength, 10)) chrs = readData[0] readdata = readData[1] dataoffset += chrs + 2 if (chrs !== parseInt(stringlength, 10) &amp;&amp; chrs !== readdata.length) &#123; error('SyntaxError', 'String length mismatch') &#125; break case 'a': readdata = &#123;&#125; keyandchrs = readUntil(data, dataoffset, ':') chrs = keyandchrs[0] keys = keyandchrs[1] dataoffset += chrs + 2 length = parseInt(keys, 10) contig = true for (i = 0; i &lt; length; i++) &#123; kprops = _unserialize(data, dataoffset) kchrs = kprops[1] key = kprops[2] dataoffset += kchrs vprops = _unserialize(data, dataoffset) vchrs = vprops[1] value = vprops[2] dataoffset += vchrs if (key !== i) &#123; contig = false &#125; readdata[key] = value &#125; if (contig) &#123; array = new Array(length) for (i = 0; i &lt; length; i++) &#123; array[i] = readdata[i] &#125; readdata = array &#125; dataoffset += 1 break default: error('SyntaxError', 'Unknown / Unhandled data type(s): ' + dtype) break &#125; return [dtype, dataoffset - offset, typeconvert(readdata)] &#125; return _unserialize((data + ''), 0)[2]&#125;","raw":null,"content":null},{"title":"PHP's strval in JavaScript","date":"2016-05-11T20:27:50.114Z","updated":"2016-05-11T20:27:50.114Z","comments":true,"path":"php/var/strval/index.html","permalink":"http://locutus.io/php/var/strval/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233module.exports = function strval (str) &#123; // discuss at: http://locutus.io/php/strval/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: strval(&#123;red: 1, green: 2, blue: 3, white: 4&#125;) // returns 1: 'Object' var gettype = require('../var/gettype') var type = '' if (str === null) &#123; return '' &#125; type = gettype(str) // Comment out the entire switch if you want JS-like // behavior instead of PHP behavior switch (type) &#123; case 'boolean': if (str === true) &#123; return '1' &#125; return '' case 'array': return 'Array' case 'object': return 'Object' &#125; return str&#125;","raw":null,"content":null},{"title":"PHP's serialize in JavaScript","date":"2016-05-11T20:27:50.114Z","updated":"2016-05-11T20:27:50.114Z","comments":true,"path":"php/var/serialize/index.html","permalink":"http://locutus.io/php/var/serialize/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134module.exports = function serialize (mixedValue) &#123; // discuss at: http://locutus.io/php/serialize/ // original by: Arpad Ray (mailto:arpad@php.net) // improved by: Dino // improved by: Le Torbi (http://www.letorbi.de/) // improved by: Kevin van Zonneveld (http://kvz.io/) // bugfixed by: Andrej Pavlovic // bugfixed by: Garagoth // bugfixed by: Russell Walker (http://www.nbill.co.uk/) // bugfixed by: Jamie Beck (http://www.terabit.ca/) // bugfixed by: Kevin van Zonneveld (http://kvz.io/) // bugfixed by: Ben (http://benblume.co.uk/) // bugfixed by: Codestar (http://codestarlive.com/) // input by: DtTvB (http://dt.in.th/2008-09-16.string-length-in-bytes.html) // input by: Martin (http://www.erlenwiese.de/) // note 1: We feel the main purpose of this function should be to ease // note 1: the transport of data between php &amp; js // note 1: Aiming for PHP-compatibility, we have to translate objects to arrays // example 1: serialize(['Kevin', 'van', 'Zonneveld']) // returns 1: 'a:3:&#123;i:0;s:5:\"Kevin\";i:1;s:3:\"van\";i:2;s:9:\"Zonneveld\";&#125;' // example 2: serialize(&#123;firstName: 'Kevin', midName: 'van'&#125;) // returns 2: 'a:2:&#123;s:9:\"firstName\";s:5:\"Kevin\";s:7:\"midName\";s:3:\"van\";&#125;' var val, key, okey var ktype = '' var vals = '' var count = 0 var _utf8Size = function (str) &#123; var size = 0 var i = 0 var l = str.length var code = '' for (i = 0; i &lt; l; i++) &#123; code = str.charCodeAt(i) if (code &lt; 0x0080) &#123; size += 1 &#125; else if (code &lt; 0x0800) &#123; size += 2 &#125; else &#123; size += 3 &#125; &#125; return size &#125; var _getType = function (inp) &#123; var match var key var cons var types var type = typeof inp if (type === 'object' &amp;&amp; !inp) &#123; return 'null' &#125; if (type === 'object') &#123; if (!inp.constructor) &#123; return 'object' &#125; cons = inp.constructor.toString() match = cons.match(/(\\w+)\\(/) if (match) &#123; cons = match[1].toLowerCase() &#125; types = ['boolean', 'number', 'string', 'array'] for (key in types) &#123; if (cons === types[key]) &#123; type = types[key] break &#125; &#125; &#125; return type &#125; var type = _getType(mixedValue) switch (type) &#123; case 'function': val = '' break case 'boolean': val = 'b:' + (mixedValue ? '1' : '0') break case 'number': val = (Math.round(mixedValue) === mixedValue ? 'i' : 'd') + ':' + mixedValue break case 'string': val = 's:' + _utf8Size(mixedValue) + ':\"' + mixedValue + '\"' break case 'array': case 'object': val = 'a' /* if (type === 'object') &#123; var objname = mixedValue.constructor.toString().match(/(\\w+)\\(\\)/); if (objname === undefined) &#123; return; &#125; objname[1] = serialize(objname[1]); val = 'O' + objname[1].substring(1, objname[1].length - 1); &#125; */ for (key in mixedValue) &#123; if (mixedValue.hasOwnProperty(key)) &#123; ktype = _getType(mixedValue[key]) if (ktype === 'function') &#123; continue &#125; okey = (key.match(/^[0-9]+$/) ? parseInt(key, 10) : key) vals += serialize(okey) + serialize(mixedValue[key]) count++ &#125; &#125; val += ':' + count + ':&#123;' + vals + '&#125;' break case 'undefined': default: // Fall-through // if the JS object has a property which contains a null value, // the string cannot be unserialized by PHP val = 'N' break &#125; if (type !== 'object' &amp;&amp; type !== 'array') &#123; val += ';' &#125; return val&#125;","raw":null,"content":null},{"title":"PHP's print_r in JavaScript","date":"2016-05-11T20:27:50.110Z","updated":"2016-05-11T20:27:50.110Z","comments":true,"path":"php/var/print_r/index.html","permalink":"http://locutus.io/php/var/print_r/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071module.exports = function print_r (array, returnVal) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/print_r/ // original by: Michael White (http://getsprink.com) // improved by: Ben Bryan // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // example 1: print_r(1, true) // returns 1: '1' var echo = require('../strings/echo') var output = '' var padChar = ' ' var padVal = 4 var _repeatChar = function (len, padChar) &#123; var str = '' for (var i = 0; i &lt; len; i++) &#123; str += padChar &#125; return str &#125; var _formatArray = function (obj, curDepth, padVal, padChar) &#123; if (curDepth &gt; 0) &#123; curDepth++ &#125; var basePad = _repeatChar(padVal * curDepth, padChar) var thickPad = _repeatChar(padVal * (curDepth + 1), padChar) var str = '' if (typeof obj === 'object' &amp;&amp; obj !== null &amp;&amp; obj.constructor) &#123; str += 'Array\\n' + basePad + '(\\n' for (var key in obj) &#123; if (Object.prototype.toString.call(obj[key]) === '[object Array]') &#123; str += thickPad str += '[' str += key str += '] =&gt; ' str += _formatArray(obj[key], curDepth + 1, padVal, padChar) &#125; else &#123; str += thickPad str += '[' str += key str += '] =&gt; ' str += obj[key] str += '\\n' &#125; &#125; str += basePad + ')\\n' &#125; else if (obj === null || obj === undefined) &#123; str = '' &#125; else &#123; // for our \"resource\" class str = obj.toString() &#125; return str &#125; output = _formatArray(array, 0, padVal, padChar) if (returnVal !== true) &#123; echo(output) return true &#125; return output&#125;","raw":null,"content":null},{"title":"PHP's isset in JavaScript","date":"2016-05-11T20:27:50.110Z","updated":"2016-05-11T20:27:50.110Z","comments":true,"path":"php/var/isset/index.html","permalink":"http://locutus.io/php/var/isset/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829module.exports = function isset () &#123; // discuss at: http://locutus.io/php/isset/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: FremyCompany // improved by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // example 1: isset( undefined, true) // returns 1: false // example 2: isset( 'Kevin van Zonneveld' ) // returns 2: true var a = arguments var l = a.length var i = 0 var undef if (l === 0) &#123; throw new Error('Empty isset') &#125; while (i !== l) &#123; if (a[i] === undef || a[i] === null) &#123; return false &#125; i++ &#125; return true&#125;","raw":null,"content":null},{"title":"PHP's is_unicode in JavaScript","date":"2016-05-11T20:27:50.110Z","updated":"2016-05-11T20:27:50.110Z","comments":true,"path":"php/var/is_unicode/index.html","permalink":"http://locutus.io/php/var/is_unicode/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435module.exports = function is_unicode (vr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_unicode/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: Almost all strings in JavaScript should be Unicode // example 1: is_unicode('We the peoples of the United Nations...!') // returns 1: true if (typeof vr !== 'string') &#123; return false &#125; // If surrogates occur outside of high-low pairs, then this is not Unicode var arr = [] var highSurrogate = '[\\uD800-\\uDBFF]' var lowSurrogate = '[\\uDC00-\\uDFFF]' var highSurrogateBeforeAny = new RegExp(highSurrogate + '([\\\\s\\\\S])', 'g') var lowSurrogateAfterAny = new RegExp('([\\\\s\\\\S])' + lowSurrogate, 'g') var singleLowSurrogate = new RegExp('^' + lowSurrogate + '$') var singleHighSurrogate = new RegExp('^' + highSurrogate + '$') while ((arr = highSurrogateBeforeAny.exec(vr)) !== null) &#123; if (!arr[1] || !arr[1].match(singleLowSurrogate)) &#123; // If high not followed by low surrogate return false &#125; &#125; while ((arr = lowSurrogateAfterAny.exec(vr)) !== null) &#123; if (!arr[1] || !arr[1].match(singleHighSurrogate)) &#123; // If low not preceded by high surrogate return false &#125; &#125; return true&#125;","raw":null,"content":null},{"title":"PHP's is_string in JavaScript","date":"2016-05-11T20:27:50.102Z","updated":"2016-05-11T20:27:50.102Z","comments":true,"path":"php/var/is_string/index.html","permalink":"http://locutus.io/php/var/is_string/index.html","excerpt":"","keywords":null,"text":"12345678910module.exports = function is_string (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_string/ // original by: Kevin van Zonneveld (http://kvz.io) // example 1: is_string('23') // returns 1: true // example 2: is_string(23.5) // returns 2: false return (typeof mixedVar === 'string')&#125;","raw":null,"content":null},{"title":"PHP's is_scalar in JavaScript","date":"2016-05-11T20:27:50.102Z","updated":"2016-05-11T20:27:50.102Z","comments":true,"path":"php/var/is_scalar/index.html","permalink":"http://locutus.io/php/var/is_scalar/index.html","excerpt":"","keywords":null,"text":"12345678910module.exports = function is_scalar (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_scalar/ // original by: Paulo Freitas // example 1: is_scalar(186.31) // returns 1: true // example 2: is_scalar(&#123;0: 'Kevin van Zonneveld'&#125;) // returns 2: false return (/boolean|number|string/).test(typeof mixedVar)&#125;","raw":null,"content":null},{"title":"PHP's is_real in JavaScript","date":"2016-05-11T20:27:50.102Z","updated":"2016-05-11T20:27:50.102Z","comments":true,"path":"php/var/is_real/index.html","permalink":"http://locutus.io/php/var/is_real/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function is_real (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_real/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: 1.0 is simplified to 1 before it can be accessed by the function, this makes // note 1: it different from the PHP implementation. We can't fix this unfortunately. // example 1: is_real(186.31) // returns 1: true var _isFloat = require('../var/is_float') return _isFloat(mixedVar)&#125;","raw":null,"content":null},{"title":"PHP's is_object in JavaScript","date":"2016-05-11T20:27:50.102Z","updated":"2016-05-11T20:27:50.102Z","comments":true,"path":"php/var/is_object/index.html","permalink":"http://locutus.io/php/var/is_object/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function is_object (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_object/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Legaev Andrey // improved by: Michael White (http://getsprink.com) // example 1: is_object('23') // returns 1: false // example 2: is_object(&#123;foo: 'bar'&#125;) // returns 2: true // example 3: is_object(null) // returns 3: false if (Object.prototype.toString.call(mixedVar) === '[object Array]') &#123; return false &#125; return mixedVar !== null &amp;&amp; typeof mixedVar === 'object'&#125;","raw":null,"content":null},{"title":"PHP's is_numeric in JavaScript","date":"2016-05-11T20:27:50.102Z","updated":"2016-05-11T20:27:50.102Z","comments":true,"path":"php/var/is_numeric/index.html","permalink":"http://locutus.io/php/var/is_numeric/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354module.exports = function is_numeric (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_numeric/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: David // improved by: taith // bugfixed by: Tim de Koning // bugfixed by: WebDevHobo (http://webdevhobo.blogspot.com/) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Denis Chenu (http://shnoulle.net) // example 1: is_numeric(186.31) // returns 1: true // example 2: is_numeric('Kevin van Zonneveld') // returns 2: false // example 3: is_numeric(' +186.31e2') // returns 3: true // example 4: is_numeric('') // returns 4: false // example 5: is_numeric([]) // returns 5: false // example 6: is_numeric('1 ') // returns 6: false var whitespace = [ ' ', '\\n', '\\r', '\\t', '\\f', '\\x0b', '\\xa0', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u200b', '\\u2028', '\\u2029', '\\u3000' ].join('') // @todo: Break this up using many single conditions with early returns return (typeof mixedVar === 'number' || (typeof mixedVar === 'string' &amp;&amp; whitespace.indexOf(mixedVar.slice(-1)) === -1)) &amp;&amp; mixedVar !== '' &amp;&amp; !isNaN(mixedVar)&#125;","raw":null,"content":null},{"title":"PHP's is_null in JavaScript","date":"2016-05-11T20:27:50.102Z","updated":"2016-05-11T20:27:50.102Z","comments":true,"path":"php/var/is_null/index.html","permalink":"http://locutus.io/php/var/is_null/index.html","excerpt":"","keywords":null,"text":"12345678910module.exports = function is_null (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_null/ // original by: Kevin van Zonneveld (http://kvz.io) // example 1: is_null('23') // returns 1: false // example 2: is_null(null) // returns 2: true return (mixedVar === null)&#125;","raw":null,"content":null},{"title":"PHP's is_long in JavaScript","date":"2016-05-11T20:27:50.102Z","updated":"2016-05-11T20:27:50.102Z","comments":true,"path":"php/var/is_long/index.html","permalink":"http://locutus.io/php/var/is_long/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function is_long (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_long/ // original by: Paulo Freitas // note 1: 1.0 is simplified to 1 before it can be accessed by the function, this makes // note 1: it different from the PHP implementation. We can't fix this unfortunately. // example 1: is_long(186.31) // returns 1: true var _isFloat = require('../var/is_float') return _isFloat(mixedVar)&#125;","raw":null,"content":null},{"title":"PHP's is_integer in JavaScript","date":"2016-05-11T20:27:50.102Z","updated":"2016-05-11T20:27:50.102Z","comments":true,"path":"php/var/is_integer/index.html","permalink":"http://locutus.io/php/var/is_integer/index.html","excerpt":"","keywords":null,"text":"12345678910111213module.exports = function is_integer (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_integer/ // original by: Paulo Freitas // note 1: 1.0 is simplified to 1 before it can be accessed by the function, this makes // note 1: it different from the PHP implementation. We can't fix this unfortunately. // example 1: is_integer(186.31) // returns 1: false // example 2: is_integer(12) // returns 2: true var _isInt = require('../var/is_int') return _isInt(mixedVar)&#125;","raw":null,"content":null},{"title":"PHP's is_int in JavaScript","date":"2016-05-11T20:27:50.098Z","updated":"2016-05-11T20:27:50.098Z","comments":true,"path":"php/var/is_int/index.html","permalink":"http://locutus.io/php/var/is_int/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function is_int (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_int/ // original by: Alex // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: WebDevHobo (http://webdevhobo.blogspot.com/) // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // revised by: Matt Bradley // bugfixed by: Kevin van Zonneveld (http://kvz.io) // note 1: 1.0 is simplified to 1 before it can be accessed by the function, this makes // note 1: it different from the PHP implementation. We can't fix this unfortunately. // example 1: is_int(23) // returns 1: true // example 2: is_int('23') // returns 2: false // example 3: is_int(23.5) // returns 3: false // example 4: is_int(true) // returns 4: false return mixedVar === +mixedVar &amp;&amp; isFinite(mixedVar) &amp;&amp; !(mixedVar % 1)&#125;","raw":null,"content":null},{"title":"PHP's is_float in JavaScript","date":"2016-05-11T20:27:50.098Z","updated":"2016-05-11T20:27:50.098Z","comments":true,"path":"php/var/is_float/index.html","permalink":"http://locutus.io/php/var/is_float/index.html","excerpt":"","keywords":null,"text":"12345678910111213module.exports = function is_float (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_float/ // original by: Paulo Freitas // bugfixed by: Brett Zamir (http://brett-zamir.me) // improved by: WebDevHobo (http://webdevhobo.blogspot.com/) // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // note 1: 1.0 is simplified to 1 before it can be accessed by the function, this makes // note 1: it different from the PHP implementation. We can't fix this unfortunately. // example 1: is_float(186.31) // returns 1: true return +mixedVar === mixedVar &amp;&amp; (!isFinite(mixedVar) || !!(mixedVar % 1))&#125;","raw":null,"content":null},{"title":"PHP's is_double in JavaScript","date":"2016-05-11T20:27:50.094Z","updated":"2016-05-11T20:27:50.094Z","comments":true,"path":"php/var/is_double/index.html","permalink":"http://locutus.io/php/var/is_double/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function is_double (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_double/ // original by: Paulo Freitas // note 1: 1.0 is simplified to 1 before it can be accessed by the function, this makes // note 1: it different from the PHP implementation. We can't fix this unfortunately. // example 1: is_double(186.31) // returns 1: true var _isFloat = require('../var/is_float') return _isFloat(mixedVar)&#125;","raw":null,"content":null},{"title":"PHP's is_callable in JavaScript","date":"2016-05-11T20:27:50.094Z","updated":"2016-05-11T20:27:50.094Z","comments":true,"path":"php/var/is_callable/index.html","permalink":"http://locutus.io/php/var/is_callable/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980module.exports = function is_callable (mixedVar, syntaxOnly, callableName) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_callable/ // original by: Brett Zamir (http://brett-zamir.me) // input by: Fran√ßois // improved by: Brett Zamir (http://brett-zamir.me) // note 1: The variable callableName cannot work as a string variable passed by // note 1: reference as in PHP (since JavaScript does not support passing // note 1: strings by reference), but instead will take the name of // note 1: a global variable and set that instead. // note 1: When used on an object, depends on a constructor property // note 1: being kept on the object prototype // note 2: Depending on the `callableName` that is passed, this function can use eval. // note 2: The eval input is however checked to only allow valid function names, // note 2: So it should not be unsafer than uses without eval (seeing as you can) // note 2: already pass any function to be executed here. // example 1: is_callable('is_callable') // returns 1: true // example 2: is_callable('bogusFunction', true) // returns 2: true // gives true because does not do strict checking // example 3: function SomeClass () &#123;&#125; // example 3: SomeClass.prototype.someMethod = function ()&#123;&#125; // example 3: var testObj = new SomeClass() // example 3: is_callable([testObj, 'someMethod'], true, 'myVar') // example 3: var $result = myVar // returns 3: 'SomeClass::someMethod' // example 4: is_callable(function () &#123;&#125;) // returns 4: true var $global = (typeof window !== 'undefined' ? window : GLOBAL) var validJSFunctionNamePattern = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/ var name = '' var obj = &#123;&#125; var method = '' var validFunctionName = false var getFuncName = function (fn) &#123; var name = (/\\W*function\\s+([\\w\\$]+)\\s*\\(/).exec(fn) if (!name) &#123; return '(Anonymous)' &#125; return name[1] &#125; if (typeof mixedVar === 'string') &#123; obj = $global method = mixedVar name = mixedVar validFunctionName = !!name.match(validJSFunctionNamePattern) &#125; else if (typeof mixedVar === 'function') &#123; return true &#125; else if (Object.prototype.toString.call(mixedVar) === '[object Array]' &amp;&amp; mixedVar.length === 2 &amp;&amp; typeof mixedVar[0] === 'object' &amp;&amp; typeof mixedVar[1] === 'string') &#123; obj = mixedVar[0] method = mixedVar[1] name = (obj.constructor &amp;&amp; getFuncName(obj.constructor)) + '::' + method &#125; else &#123; return false &#125; if (syntaxOnly || typeof obj[method] === 'function') &#123; if (callableName) &#123; $global[callableName] = name &#125; return true &#125; // validFunctionName avoids exploits if (validFunctionName &amp;&amp; typeof eval(method) === 'function') &#123; // eslint-disable-line no-eval if (callableName) &#123; $global[callableName] = name &#125; return true &#125; return false&#125;","raw":null,"content":null},{"title":"PHP's is_buffer in JavaScript","date":"2016-05-11T20:27:50.094Z","updated":"2016-05-11T20:27:50.094Z","comments":true,"path":"php/var/is_buffer/index.html","permalink":"http://locutus.io/php/var/is_buffer/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function is_buffer (vr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_buffer/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: is_buffer('This could be binary or a regular string...') // returns 1: true return typeof vr === 'string'&#125;","raw":null,"content":null},{"title":"PHP's is_bool in JavaScript","date":"2016-05-11T20:27:50.094Z","updated":"2016-05-11T20:27:50.094Z","comments":true,"path":"php/var/is_bool/index.html","permalink":"http://locutus.io/php/var/is_bool/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function is_bool (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_bool/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: CoursesWeb (http://www.coursesweb.net/) // example 1: is_bool(false) // returns 1: true // example 2: is_bool(0) // returns 2: false return (mixedVar === true || mixedVar === false) // Faster (in FF) than type checking&#125;","raw":null,"content":null},{"title":"PHP's is_binary in JavaScript","date":"2016-05-11T20:27:50.094Z","updated":"2016-05-11T20:27:50.094Z","comments":true,"path":"php/var/is_binary/index.html","permalink":"http://locutus.io/php/var/is_binary/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function is_binary (vr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_binary/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: is_binary('This could be binary as far as JavaScript knows...') // returns 1: true return typeof vr === 'string' // If it is a string of any kind, it could be binary&#125;","raw":null,"content":null},{"title":"PHP's is_array in JavaScript","date":"2016-05-11T20:27:50.094Z","updated":"2016-05-11T20:27:50.094Z","comments":true,"path":"php/var/is_array/index.html","permalink":"http://locutus.io/php/var/is_array/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192module.exports = function is_array (mixedVar) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_array/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Legaev Andrey // improved by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Nathan Sepulveda // improved by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Cord // bugfixed by: Manish // bugfixed by: Brett Zamir (http://brett-zamir.me) // note 1: In Locutus, javascript objects are like php associative arrays, // note 1: thus JavaScript objects will also // note 1: return true in this function (except for objects which inherit properties, // note 1: being thus used as objects), // note 1: unless you do ini_set('locutus.objectsAsArrays', 0), // note 1: in which case only genuine JavaScript arrays // note 1: will return true // example 1: is_array(['Kevin', 'van', 'Zonneveld']) // returns 1: true // example 2: is_array('Kevin van Zonneveld') // returns 2: false // example 3: is_array(&#123;0: 'Kevin', 1: 'van', 2: 'Zonneveld'&#125;) // returns 3: true // example 4: ini_set('locutus.objectsAsArrays', 0) // example 4: is_array(&#123;0: 'Kevin', 1: 'van', 2: 'Zonneveld'&#125;) // returns 4: false // example 5: is_array(function tmp_a ()&#123; this.name = 'Kevin' &#125;) // returns 5: false var _getFuncName = function (fn) &#123; var name = (/\\W*function\\s+([\\w\\$]+)\\s*\\(/).exec(fn) if (!name) &#123; return '(Anonymous)' &#125; return name[1] &#125; var _isArray = function (mixedVar) &#123; // return Object.prototype.toString.call(mixedVar) === '[object Array]'; // The above works, but let's do the even more stringent approach: // (since Object.prototype.toString could be overridden) // Null, Not an object, no length property so couldn't be an Array (or String) if (!mixedVar || typeof mixedVar !== 'object' || typeof mixedVar.length !== 'number') &#123; return false &#125; var len = mixedVar.length mixedVar[mixedVar.length] = 'bogus' // The only way I can think of to get around this (or where there would be trouble) // would be to have an object defined // with a custom \"length\" getter which changed behavior on each call // (or a setter to mess up the following below) or a custom // setter for numeric properties, but even that would need to listen for // specific indexes; but there should be no false negatives // and such a false positive would need to rely on later JavaScript // innovations like __defineSetter__ if (len !== mixedVar.length) &#123; // We know it's an array since length auto-changed with the addition of a // numeric property at its length end, so safely get rid of our bogus element mixedVar.length -= 1 return true &#125; // Get rid of the property we added onto a non-array object; only possible // side-effect is if the user adds back the property later, it will iterate // this property in the older order placement in IE (an order which should not // be depended on anyways) delete mixedVar[mixedVar.length] return false &#125; if (!mixedVar || typeof mixedVar !== 'object') &#123; return false &#125; var isArray = _isArray(mixedVar) if (isArray) &#123; return true &#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.objectsAsArrays') : undefined) || 'on' if (iniVal === 'on') &#123; var asString = Object.prototype.toString.call(mixedVar) var asFunc = _getFuncName(mixedVar.constructor) if (asString === '[object Object]' &amp;&amp; asFunc === 'Object') &#123; // Most likely a literal and intended as assoc. array return true &#125; &#125; return false&#125;","raw":null,"content":null},{"title":"PHP's intval in JavaScript","date":"2016-05-11T20:27:50.090Z","updated":"2016-05-11T20:27:50.090Z","comments":true,"path":"php/var/intval/index.html","permalink":"http://locutus.io/php/var/intval/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334module.exports = function intval (mixedVar, base) &#123; // discuss at: http://locutus.io/php/intval/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: stensi // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // input by: Matteo // example 1: intval('Kevin van Zonneveld') // returns 1: 0 // example 2: intval(4.2) // returns 2: 4 // example 3: intval(42, 8) // returns 3: 42 // example 4: intval('09') // returns 4: 9 // example 5: intval('1e', 16) // returns 5: 30 var tmp var type = typeof mixedVar if (type === 'boolean') &#123; return +mixedVar &#125; else if (type === 'string') &#123; tmp = parseInt(mixedVar, base || 10) return (isNaN(tmp) || !isFinite(tmp)) ? 0 : tmp &#125; else if (type === 'number' &amp;&amp; isFinite(mixedVar)) &#123; return mixedVar | 0 &#125; else &#123; return 0 &#125;&#125;","raw":null,"content":null},{"title":"PHP's var extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/var/index.html","permalink":"http://locutus.io/php/var/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's gettype in JavaScript","date":"2016-05-11T20:27:50.090Z","updated":"2016-05-11T20:27:50.090Z","comments":true,"path":"php/var/gettype/index.html","permalink":"http://locutus.io/php/var/gettype/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566module.exports = function gettype (mixedVar) &#123; // discuss at: http://locutus.io/php/gettype/ // original by: Paulo Freitas // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Douglas Crockford (http://javascript.crockford.com) // improved by: Brett Zamir (http://brett-zamir.me) // input by: KELAN // note 1: 1.0 is simplified to 1 before it can be accessed by the function, this makes // note 1: it different from the PHP implementation. We can't fix this unfortunately. // example 1: gettype(1) // returns 1: 'integer' // example 2: gettype(undefined) // returns 2: 'undefined' // example 3: gettype(&#123;0: 'Kevin van Zonneveld'&#125;) // returns 3: 'object' // example 4: gettype('foo') // returns 4: 'string' // example 5: gettype(&#123;0: function () &#123;return false;&#125;&#125;) // returns 5: 'object' // example 6: gettype(&#123;0: 'test', length: 1, splice: function () &#123;&#125;&#125;) // returns 6: 'object' // example 7: gettype(['test']) // returns 7: 'array' var isFloat = require('../var/is_float') var s = typeof mixedVar var name var _getFuncName = function (fn) &#123; var name = (/\\W*function\\s+([\\w\\$]+)\\s*\\(/).exec(fn) if (!name) &#123; return '(Anonymous)' &#125; return name[1] &#125; if (s === 'object') &#123; if (mixedVar !== null) &#123; // From: http://javascript.crockford.com/remedial.html // @todo: Break up this lengthy if statement if (typeof mixedVar.length === 'number' &amp;&amp; !(mixedVar.propertyIsEnumerable('length')) &amp;&amp; typeof mixedVar.splice === 'function') &#123; s = 'array' &#125; else if (mixedVar.constructor &amp;&amp; _getFuncName(mixedVar.constructor)) &#123; name = _getFuncName(mixedVar.constructor) if (name === 'Date') &#123; // not in PHP s = 'date' &#125; else if (name === 'RegExp') &#123; // not in PHP s = 'regexp' &#125; else if (name === 'LOCUTUS_Resource') &#123; // Check against our own resource constructor s = 'resource' &#125; &#125; &#125; else &#123; s = 'null' &#125; &#125; else if (s === 'number') &#123; s = isFloat(mixedVar) ? 'double' : 'integer' &#125; return s&#125;","raw":null,"content":null},{"title":"PHP's floatval in JavaScript","date":"2016-05-11T20:27:50.086Z","updated":"2016-05-11T20:27:50.086Z","comments":true,"path":"php/var/floatval/index.html","permalink":"http://locutus.io/php/var/floatval/index.html","excerpt":"","keywords":null,"text":"1234567891011121314module.exports = function floatval (mixedVar) &#123; // discuss at: http://locutus.io/php/floatval/ // original by: Michael White (http://getsprink.com) // note 1: The native parseFloat() method of JavaScript returns NaN // note 1: when it encounters a string before an int or float value. // example 1: floatval('150.03_page-section') // returns 1: 150.03 // example 2: floatval('page: 3') // example 2: floatval('-50 + 8') // returns 2: 0 // returns 2: -50 return (parseFloat(mixedVar) || 0)&#125;","raw":null,"content":null},{"title":"PHP's empty in JavaScript","date":"2016-05-11T20:27:50.086Z","updated":"2016-05-11T20:27:50.086Z","comments":true,"path":"php/var/empty/index.html","permalink":"http://locutus.io/php/var/empty/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445module.exports = function empty (mixedVar) &#123; // discuss at: http://locutus.io/php/empty/ // original by: Philippe Baumann // input by: Onno Marsman (https://twitter.com/onnomarsman) // input by: LH // input by: Stoyan Kyosev (http://www.svest.org/) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // improved by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Francesco // improved by: Marc Jansen // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // example 1: empty(null) // returns 1: true // example 2: empty(undefined) // returns 2: true // example 3: empty([]) // returns 3: true // example 4: empty(&#123;&#125;) // returns 4: true // example 5: empty(&#123;'aFunc' : function () &#123; alert('humpty'); &#125; &#125;) // returns 5: false var undef var key var i var len var emptyValues = [undef, null, false, 0, '', '0'] for (i = 0, len = emptyValues.length; i &lt; len; i++) &#123; if (mixedVar === emptyValues[i]) &#123; return true &#125; &#125; if (typeof mixedVar === 'object') &#123; for (key in mixedVar) &#123; if (mixedVar.hasOwnProperty(key)) &#123; return false &#125; &#125; return true &#125; return false&#125;","raw":null,"content":null},{"title":"PHP's doubleval in JavaScript","date":"2016-05-11T20:27:50.086Z","updated":"2016-05-11T20:27:50.086Z","comments":true,"path":"php/var/doubleval/index.html","permalink":"http://locutus.io/php/var/doubleval/index.html","excerpt":"","keywords":null,"text":"123456789101112module.exports = function doubleval (mixedVar) &#123; // discuss at: http://locutus.io/php/doubleval/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: 1.0 is simplified to 1 before it can be accessed by the function, this makes // note 1: it different from the PHP implementation. We can't fix this unfortunately. // example 1: doubleval(186) // returns 1: 186.00 var floatval = require('../var/floatval') return floatval(mixedVar)&#125;","raw":null,"content":null},{"title":"PHP's urlencode in JavaScript","date":"2016-05-11T20:27:50.086Z","updated":"2016-05-11T20:27:50.086Z","comments":true,"path":"php/url/urlencode/index.html","permalink":"http://locutus.io/php/url/urlencode/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940module.exports = function urlencode (str) &#123; // discuss at: http://locutus.io/php/urlencode/ // original by: Philip Peterson // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Lars Fischer // input by: AJ // input by: travc // input by: Brett Zamir (http://brett-zamir.me) // input by: Ratheous // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Joris // reimplemented by: Brett Zamir (http://brett-zamir.me) // reimplemented by: Brett Zamir (http://brett-zamir.me) // note 1: This reflects PHP 5.3/6.0+ behavior // note 1: Please be aware that this function // note 1: expects to encode into UTF-8 encoded strings, as found on // note 1: pages served as UTF-8 // example 1: urlencode('Kevin van Zonneveld!') // returns 1: 'Kevin+van+Zonneveld%21' // example 2: urlencode('http://kvz.io/') // returns 2: 'http%3A%2F%2Fkvz.io%2F' // example 3: urlencode('http://www.google.nl/search?q=Locutus&amp;ie=utf-8') // returns 3: 'http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3DLocutus%26ie%3Dutf-8' str = (str + '') // Tilde should be allowed unescaped in future versions of PHP (as reflected below), // but if you want to reflect current // PHP behavior, you would need to add \".replace(/~/g, '%7E');\" to the following. return encodeURIComponent(str) .replace(/!/g, '%21') .replace(/'/g, '%27') .replace(/\\(/g, '%28') .replace(/\\)/g, '%29') .replace(/\\*/g, '%2A') .replace(/%20/g, '+')&#125;","raw":null,"content":null},{"title":"PHP's urldecode in JavaScript","date":"2016-05-11T20:27:50.086Z","updated":"2016-05-11T20:27:50.086Z","comments":true,"path":"php/url/urldecode/index.html","permalink":"http://locutus.io/php/url/urldecode/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940module.exports = function urldecode (str) &#123; // discuss at: http://locutus.io/php/urldecode/ // original by: Philip Peterson // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Lars Fischer // improved by: Orlando // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // input by: AJ // input by: travc // input by: Brett Zamir (http://brett-zamir.me) // input by: Ratheous // input by: e-mike // input by: lovio // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Rob // reimplemented by: Brett Zamir (http://brett-zamir.me) // note 1: info on what encoding functions to use from: // note 1: http://xkr.us/articles/javascript/encode-compare/ // note 1: Please be aware that this function expects to decode // note 1: from UTF-8 encoded strings, as found on // note 1: pages served as UTF-8 // example 1: urldecode('Kevin+van+Zonneveld%21') // returns 1: 'Kevin van Zonneveld!' // example 2: urldecode('http%3A%2F%2Fkvz.io%2F') // returns 2: 'http://kvz.io/' // example 3: urldecode('http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3DLocutus%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a') // returns 3: 'http://www.google.nl/search?q=Locutus&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=com.ubuntu:en-US:unofficial&amp;client=firefox-a' // example 4: urldecode('%E5%A5%BD%3_4') // returns 4: '\\u597d%3_4' return decodeURIComponent((str + '') .replace(/%(?![\\da-f]&#123;2&#125;)/gi, function () &#123; // PHP tolerates poorly formed escape sequences return '%25' &#125;) .replace(/\\+/g, '%20'))&#125;","raw":null,"content":null},{"title":"PHP's rawurlencode in JavaScript","date":"2016-05-11T20:27:50.086Z","updated":"2016-05-11T20:27:50.086Z","comments":true,"path":"php/url/rawurlencode/index.html","permalink":"http://locutus.io/php/url/rawurlencode/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435module.exports = function rawurlencode (str) &#123; // discuss at: http://locutus.io/php/rawurlencode/ // original by: Brett Zamir (http://brett-zamir.me) // input by: travc // input by: Brett Zamir (http://brett-zamir.me) // input by: Michael Grier // input by: Ratheous // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Joris // reimplemented by: Brett Zamir (http://brett-zamir.me) // reimplemented by: Brett Zamir (http://brett-zamir.me) // note 1: This reflects PHP 5.3/6.0+ behavior // note 1: Please be aware that this function expects \\ // note 1: to encode into UTF-8 encoded strings, as found on // note 1: pages served as UTF-8 // example 1: rawurlencode('Kevin van Zonneveld!') // returns 1: 'Kevin%20van%20Zonneveld%21' // example 2: rawurlencode('http://kvz.io/') // returns 2: 'http%3A%2F%2Fkvz.io%2F' // example 3: rawurlencode('http://www.google.nl/search?q=Locutus&amp;ie=utf-8') // returns 3: 'http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3DLocutus%26ie%3Dutf-8' str = (str + '') // Tilde should be allowed unescaped in future versions of PHP (as reflected below), // but if you want to reflect current // PHP behavior, you would need to add \".replace(/~/g, '%7E');\" to the following. return encodeURIComponent(str) .replace(/!/g, '%21') .replace(/'/g, '%27') .replace(/\\(/g, '%28') .replace(/\\)/g, '%29') .replace(/\\*/g, '%2A')&#125;","raw":null,"content":null},{"title":"PHP's rawurldecode in JavaScript","date":"2016-05-11T20:27:50.078Z","updated":"2016-05-11T20:27:50.078Z","comments":true,"path":"php/url/rawurldecode/index.html","permalink":"http://locutus.io/php/url/rawurldecode/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526module.exports = function rawurldecode (str) &#123; // discuss at: http://locutus.io/php/rawurldecode/ // original by: Brett Zamir (http://brett-zamir.me) // input by: travc // input by: Brett Zamir (http://brett-zamir.me) // input by: Ratheous // input by: lovio // bugfixed by: Kevin van Zonneveld (http://kvz.io) // reimplemented by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: Please be aware that this function expects to decode // note 1: from UTF-8 encoded strings, as found on // note 1: pages served as UTF-8 // example 1: rawurldecode('Kevin+van+Zonneveld%21') // returns 1: 'Kevin+van+Zonneveld!' // example 2: rawurldecode('http%3A%2F%2Fkvz.io%2F') // returns 2: 'http://kvz.io/' // example 3: rawurldecode('http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3DLocutus%26ie%3D') // returns 3: 'http://www.google.nl/search?q=Locutus&amp;ie=' return decodeURIComponent((str + '') .replace(/%(?![\\da-f]&#123;2&#125;)/gi, function () &#123; // PHP tolerates poorly formed escape sequences return '%25' &#125;))&#125;","raw":null,"content":null},{"title":"PHP's parse_url in JavaScript","date":"2016-05-11T20:27:50.078Z","updated":"2016-05-11T20:27:50.078Z","comments":true,"path":"php/url/parse_url/index.html","permalink":"http://locutus.io/php/url/parse_url/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697module.exports = function parse_url (str, component) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/parse_url/ // original by: Steven Levithan (http://blog.stevenlevithan.com) // reimplemented by: Brett Zamir (http://brett-zamir.me) // input by: Lorenzo Pisani // input by: Tony // improved by: Brett Zamir (http://brett-zamir.me) // note 1: original by http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js // note 1: blog post at http://blog.stevenlevithan.com/archives/parseuri // note 1: demo at http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js // note 1: Does not replace invalid characters with '_' as in PHP, // note 1: nor does it return false with // note 1: a seriously malformed URL. // note 1: Besides function name, is essentially the same as parseUri as // note 1: well as our allowing // note 1: an extra slash after the scheme/protocol (to allow file:/// as in PHP) // example 1: parse_url('http://user:pass@host/path?a=v#a') // returns 1: &#123;scheme: 'http', host: 'host', user: 'user', pass: 'pass', path: '/path', query: 'a=v', fragment: 'a'&#125; // example 2: parse_url('http://en.wikipedia.org/wiki/%22@%22_%28album%29') // returns 2: &#123;scheme: 'http', host: 'en.wikipedia.org', path: '/wiki/%22@%22_%28album%29'&#125; // example 3: parse_url('https://host.domain.tld/a@b.c/folder') // returns 3: &#123;scheme: 'https', host: 'host.domain.tld', path: '/a@b.c/folder'&#125; // example 4: parse_url('https://gooduser:secretpassword@www.example.com/a@b.c/folder?foo=bar') // returns 4: &#123; scheme: 'https', host: 'www.example.com', path: '/a@b.c/folder', query: 'foo=bar', user: 'gooduser', pass: 'secretpassword' &#125; var query var mode = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.parse_url.mode') : undefined) || 'php' var key = [ 'source', 'scheme', 'authority', 'userInfo', 'user', 'pass', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'fragment' ] // For loose we added one optional slash to post-scheme to catch file:/// (should restrict this) var parser = &#123; php: new RegExp([ '(?:([^:\\\\/?#]+):)?', '(?:\\\\/\\\\/()(?:(?:()(?:([^:@\\\\/]*):?([^:@\\\\/]*))?@)?([^:\\\\/?#]*)(?::(\\\\d*))?))?', '()', '(?:(()(?:(?:[^?#\\\\/]*\\\\/)*)()(?:[^?#]*))(?:\\\\?([^#]*))?(?:#(.*))?)' ].join('')), strict: new RegExp([ '(?:([^:\\\\/?#]+):)?', '(?:\\\\/\\\\/((?:(([^:@\\\\/]*):?([^:@\\\\/]*))?@)?([^:\\\\/?#]*)(?::(\\\\d*))?))?', '((((?:[^?#\\\\/]*\\\\/)*)([^?#]*))(?:\\\\?([^#]*))?(?:#(.*))?)' ].join('')), loose: new RegExp([ '(?:(?![^:@]+:[^:@\\\\/]*@)([^:\\\\/?#.]+):)?', '(?:\\\\/\\\\/\\\\/?)?', '((?:(([^:@\\\\/]*):?([^:@\\\\/]*))?@)?([^:\\\\/?#]*)(?::(\\\\d*))?)', '(((\\\\/(?:[^?#](?![^?#\\\\/]*\\\\.[^?#\\\\/.]+(?:[?#]|$)))*\\\\/?)?([^?#\\\\/]*))', '(?:\\\\?([^#]*))?(?:#(.*))?)' ].join('')) &#125; var m = parser[mode].exec(str) var uri = &#123;&#125; var i = 14 while (i--) &#123; if (m[i]) &#123; uri[key[i]] = m[i] &#125; &#125; if (component) &#123; return uri[component.replace('PHP_URL_', '').toLowerCase()] &#125; if (mode !== 'php') &#123; var name = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.parse_url.queryKey') : undefined) || 'queryKey' parser = /(?:^|&amp;)([^&amp;=]*)=?([^&amp;]*)/g uri[name] = &#123;&#125; query = uri[key[12]] || '' query.replace(parser, function ($0, $1, $2) &#123; if ($1) &#123; uri[name][$1] = $2 &#125; &#125;) &#125; delete uri.source return uri&#125;","raw":null,"content":null},{"title":"PHP's url extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/url/index.html","permalink":"http://locutus.io/php/url/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's http_build_query in JavaScript","date":"2016-05-11T20:27:50.078Z","updated":"2016-05-11T20:27:50.078Z","comments":true,"path":"php/url/http_build_query/index.html","permalink":"http://locutus.io/php/url/http_build_query/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566module.exports = function http_build_query (formdata, numericPrefix, argSeparator) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/http_build_query/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Legaev Andrey // improved by: Michael White (http://getsprink.com) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // revised by: stag019 // input by: Dreamer // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: MIO_KODUKI (http://mio-koduki.blogspot.com/) // note 1: If the value is null, key and value are skipped in the // note 1: http_build_query of PHP while in locutus they are not. // example 1: http_build_query(&#123;foo: 'bar', php: 'hypertext processor', baz: 'boom', cow: 'milk'&#125;, '', '&amp;amp;') // returns 1: 'foo=bar&amp;amp;php=hypertext+processor&amp;amp;baz=boom&amp;amp;cow=milk' // example 2: http_build_query(&#123;'php': 'hypertext processor', 0: 'foo', 1: 'bar', 2: 'baz', 3: 'boom', 'cow': 'milk'&#125;, 'myvar_') // returns 2: 'myvar_0=foo&amp;myvar_1=bar&amp;myvar_2=baz&amp;myvar_3=boom&amp;php=hypertext+processor&amp;cow=milk' var urlencode = require('../url/urlencode') var value var key var tmp = [] var _httpBuildQueryHelper = function (key, val, argSeparator) &#123; var k var tmp = [] if (val === true) &#123; val = '1' &#125; else if (val === false) &#123; val = '0' &#125; if (val !== null) &#123; if (typeof val === 'object') &#123; for (k in val) &#123; if (val[k] !== null) &#123; tmp.push(_httpBuildQueryHelper(key + '[' + k + ']', val[k], argSeparator)) &#125; &#125; return tmp.join(argSeparator) &#125; else if (typeof val !== 'function') &#123; return urlencode(key) + '=' + urlencode(val) &#125; else &#123; throw new Error('There was an error processing for http_build_query().') &#125; &#125; else &#123; return '' &#125; &#125; if (!argSeparator) &#123; argSeparator = '&amp;' &#125; for (key in formdata) &#123; value = formdata[key] if (numericPrefix &amp;&amp; !isNaN(key)) &#123; key = String(numericPrefix) + key &#125; var query = _httpBuildQueryHelper(key, value, argSeparator) if (query !== '') &#123; tmp.push(query) &#125; &#125; return tmp.join(argSeparator)&#125;","raw":null,"content":null},{"title":"PHP's base64_encode in JavaScript","date":"2016-05-11T20:27:50.078Z","updated":"2016-05-11T20:27:50.078Z","comments":true,"path":"php/url/base64_encode/index.html","permalink":"http://locutus.io/php/url/base64_encode/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667module.exports = function base64_encode (stringToEncode) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/base64_encode/ // original by: Tyler Akins (http://rumkin.com) // improved by: Bayron Guevara // improved by: Thunder.m // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // bugfixed by: Pellentesque Malesuada // example 1: base64_encode('Kevin van Zonneveld') // returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA==' // example 2: base64_encode('a') // returns 2: 'YQ==' // example 3: base64_encode('‚úì √† la mode') // returns 3: '4pyTIMOgIGxhIG1vZGU=' if (typeof window !== 'undefined') &#123; if (typeof window.btoa !== 'undefined') &#123; return window.btoa(escape(encodeURIComponent(stringToEncode))) &#125; &#125; else &#123; return new Buffer(stringToEncode).toString('base64') &#125; var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' var o1 var o2 var o3 var h1 var h2 var h3 var h4 var bits var i = 0 var ac = 0 var enc = '' var tmpArr = [] if (!stringToEncode) &#123; return stringToEncode &#125; stringToEncode = unescape(encodeURIComponent(stringToEncode)) do &#123; // pack three octets into four hexets o1 = stringToEncode.charCodeAt(i++) o2 = stringToEncode.charCodeAt(i++) o3 = stringToEncode.charCodeAt(i++) bits = o1 &lt;&lt; 16 | o2 &lt;&lt; 8 | o3 h1 = bits &gt;&gt; 18 &amp; 0x3f h2 = bits &gt;&gt; 12 &amp; 0x3f h3 = bits &gt;&gt; 6 &amp; 0x3f h4 = bits &amp; 0x3f // use hexets to index into b64, and append result to encoded string tmpArr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4) &#125; while (i &lt; stringToEncode.length) enc = tmpArr.join('') var r = stringToEncode.length % 3 return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3)&#125;","raw":null,"content":null},{"title":"PHP's base64_decode in JavaScript","date":"2016-05-11T20:27:50.078Z","updated":"2016-05-11T20:27:50.078Z","comments":true,"path":"php/url/base64_decode/index.html","permalink":"http://locutus.io/php/url/base64_decode/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172module.exports = function base64_decode (encodedData) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/base64_decode/ // original by: Tyler Akins (http://rumkin.com) // improved by: Thunder.m // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Kevin van Zonneveld (http://kvz.io) // input by: Aman Gupta // input by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Pellentesque Malesuada // bugfixed by: Kevin van Zonneveld (http://kvz.io) // example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==') // returns 1: 'Kevin van Zonneveld' // example 2: base64_decode('YQ==') // returns 2: 'a' // example 3: base64_decode('4pyTIMOgIGxhIG1vZGU=') // returns 3: '‚úì √† la mode' if (typeof window !== 'undefined') &#123; if (typeof window.atob !== 'undefined') &#123; return decodeURIComponent(unescape(window.atob(encodedData))) &#125; &#125; else &#123; return new Buffer(encodedData, 'base64').toString('utf-8') &#125; var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' var o1 var o2 var o3 var h1 var h2 var h3 var h4 var bits var i = 0 var ac = 0 var dec = '' var tmpArr = [] if (!encodedData) &#123; return encodedData &#125; encodedData += '' do &#123; // unpack four hexets into three octets using index points in b64 h1 = b64.indexOf(encodedData.charAt(i++)) h2 = b64.indexOf(encodedData.charAt(i++)) h3 = b64.indexOf(encodedData.charAt(i++)) h4 = b64.indexOf(encodedData.charAt(i++)) bits = h1 &lt;&lt; 18 | h2 &lt;&lt; 12 | h3 &lt;&lt; 6 | h4 o1 = bits &gt;&gt; 16 &amp; 0xff o2 = bits &gt;&gt; 8 &amp; 0xff o3 = bits &amp; 0xff if (h3 === 64) &#123; tmpArr[ac++] = String.fromCharCode(o1) &#125; else if (h4 === 64) &#123; tmpArr[ac++] = String.fromCharCode(o1, o2) &#125; else &#123; tmpArr[ac++] = String.fromCharCode(o1, o2, o3) &#125; &#125; while (i &lt; encodedData.length) dec = tmpArr.join('') return decodeURIComponent(escape(dec.replace(/\\0+$/, '')))&#125;","raw":null,"content":null},{"title":"PHP's wordwrap in JavaScript","date":"2016-05-11T20:27:50.078Z","updated":"2016-05-11T20:27:50.078Z","comments":true,"path":"php/strings/wordwrap/index.html","permalink":"http://locutus.io/php/strings/wordwrap/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445module.exports = function wordwrap (str, intWidth, strBreak, cut) &#123; // discuss at: http://locutus.io/php/wordwrap/ // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // improved by: Nick Callen // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Sakimori // revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // bugfixed by: Michael Grier // bugfixed by: Feras ALHAEK // note 1: It would be great if this function could be split up to have // note 1: smaller line lengths, less ternary operators, and more readable variable names // example 1: wordwrap('Kevin van Zonneveld', 6, '|', true) // returns 1: 'Kevin |van |Zonnev|eld' // example 2: wordwrap('The quick brown fox jumped over the lazy dog.', 20, '&lt;br /&gt;\\n') // returns 2: 'The quick brown fox &lt;br /&gt;\\njumped over the lazy&lt;br /&gt;\\n dog.' // example 3: wordwrap('Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.') // returns 3: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod \\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim \\nveniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea \\ncommodo consequat.' var m = ((arguments.length &gt;= 2) ? arguments[1] : 75) var b = ((arguments.length &gt;= 3) ? arguments[2] : '\\n') var c = ((arguments.length &gt;= 4) ? arguments[3] : false) var i, j, l, s, r str += '' if (m &lt; 1) &#123; return str &#125; for (i = -1, l = (r = str.split(/\\r\\n|\\n|\\r/)).length; ++i &lt; l; r[i] += s) &#123; // @todo: Split this up over many more lines and more semantic variable names // so it becomes readable for (s = r[i], r[i] = ''; s.length &gt; m; r[i] += s.slice(0, j) + ((s = s.slice(j)).length ? b : '')) &#123; j = c === 2 || (j = s.slice(0, m + 1).match(/\\S*(\\s)?$/))[1] ? m : j.input.length - j[0].length || c === true &amp;&amp; m || j.input.length + (j = s.slice(m).match(/^\\S*/))[0].length &#125; &#125; return r.join('\\n')&#125;","raw":null,"content":null},{"title":"PHP's vsprintf in JavaScript","date":"2016-05-11T20:27:50.078Z","updated":"2016-05-11T20:27:50.078Z","comments":true,"path":"php/strings/vsprintf/index.html","permalink":"http://locutus.io/php/strings/vsprintf/index.html","excerpt":"","keywords":null,"text":"12345678910module.exports = function vsprintf (format, args) &#123; // discuss at: http://locutus.io/php/vsprintf/ // original by: ejsanders // example 1: vsprintf('%04d-%02d-%02d', [1988, 8, 1]) // returns 1: '1988-08-01' var sprintf = require('../strings/sprintf') return sprintf.apply(this, [format].concat(args))&#125;","raw":null,"content":null},{"title":"PHP's vprintf in JavaScript","date":"2016-05-11T20:27:50.074Z","updated":"2016-05-11T20:27:50.074Z","comments":true,"path":"php/strings/vprintf/index.html","permalink":"http://locutus.io/php/strings/vprintf/index.html","excerpt":"","keywords":null,"text":"123456789101112131415module.exports = function vprintf (format, args) &#123; // discuss at: http://locutus.io/php/vprintf/ // original by: Ash Searle (http://hexmen.com/blog/) // improved by: Michael White (http://getsprink.com) // reimplemented by: Brett Zamir (http://brett-zamir.me) // example 1: vprintf(\"%01.2f\", 123.1) // returns 1: 6 var sprintf = require('../strings/sprintf') var echo = require('../strings/echo') var ret = sprintf.apply(this, [format].concat(args)) echo(ret) return ret.length&#125;","raw":null,"content":null},{"title":"PHP's ucwords in JavaScript","date":"2016-05-11T20:27:50.070Z","updated":"2016-05-11T20:27:50.070Z","comments":true,"path":"php/strings/ucwords/index.html","permalink":"http://locutus.io/php/strings/ucwords/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718module.exports = function ucwords (str) &#123; // discuss at: http://locutus.io/php/ucwords/ // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // improved by: Waldo Malqui Silva (http://waldo.malqui.info) // improved by: Robin // improved by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // input by: James (http://www.james-bell.co.uk/) // example 1: ucwords('kevin van zonneveld') // returns 1: 'Kevin Van Zonneveld' // example 2: ucwords('HELLO WORLD') // returns 2: 'HELLO WORLD' return (str + '') .replace(/^([a-z\\u00E0-\\u00FC])|\\s+([a-z\\u00E0-\\u00FC])/g, function ($1) &#123; return $1.toUpperCase() &#125;)&#125;","raw":null,"content":null},{"title":"PHP's ucfirst in JavaScript","date":"2016-05-11T20:27:50.070Z","updated":"2016-05-11T20:27:50.070Z","comments":true,"path":"php/strings/ucfirst/index.html","permalink":"http://locutus.io/php/strings/ucfirst/index.html","excerpt":"","keywords":null,"text":"12345678910111213module.exports = function ucfirst (str) &#123; // discuss at: http://locutus.io/php/ucfirst/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: ucfirst('kevin van zonneveld') // returns 1: 'Kevin van zonneveld' str += '' var f = str.charAt(0) .toUpperCase() return f + str.substr(1)&#125;","raw":null,"content":null},{"title":"PHP's trim in JavaScript","date":"2016-05-11T20:27:50.070Z","updated":"2016-05-11T20:27:50.070Z","comments":true,"path":"php/strings/trim/index.html","permalink":"http://locutus.io/php/strings/trim/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768module.exports = function trim (str, charlist) &#123; // discuss at: http://locutus.io/php/trim/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: mdsjack (http://www.mdsjack.bo.it) // improved by: Alexander Ermolaev (http://snippets.dzone.com/user/AlexanderErmolaev) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Steven Levithan (http://blog.stevenlevithan.com) // improved by: Jack // input by: Erkekjetter // input by: DxGx // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: trim(' Kevin van Zonneveld ') // returns 1: 'Kevin van Zonneveld' // example 2: trim('Hello World', 'Hdle') // returns 2: 'o Wor' // example 3: trim(16, 1) // returns 3: '6' var whitespace = [ ' ', '\\n', '\\r', '\\t', '\\f', '\\x0b', '\\xa0', '\\u2000', '\\u2001', '\\u2002', '\\u2003', '\\u2004', '\\u2005', '\\u2006', '\\u2007', '\\u2008', '\\u2009', '\\u200a', '\\u200b', '\\u2028', '\\u2029', '\\u3000' ].join('') var l = 0 var i = 0 str += '' if (charlist) &#123; whitespace = (charlist + '').replace(/([\\[\\]\\(\\)\\.\\?\\/\\*\\&#123;\\&#125;\\+\\$\\^:])/g, '$1') &#125; l = str.length for (i = 0; i &lt; l; i++) &#123; if (whitespace.indexOf(str.charAt(i)) === -1) &#123; str = str.substring(i) break &#125; &#125; l = str.length for (i = l - 1; i &gt;= 0; i--) &#123; if (whitespace.indexOf(str.charAt(i)) === -1) &#123; str = str.substring(0, i + 1) break &#125; &#125; return whitespace.indexOf(str.charAt(0)) === -1 ? str : ''&#125;","raw":null,"content":null},{"title":"PHP's substr_replace in JavaScript","date":"2016-05-11T20:27:50.070Z","updated":"2016-05-11T20:27:50.070Z","comments":true,"path":"php/strings/substr_replace/index.html","permalink":"http://locutus.io/php/strings/substr_replace/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233module.exports = function substr_replace (str, replace, start, length) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/substr_replace/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', 0) // returns 1: 'bob' // example 2: var $var = 'ABCDEFGH:/MNRPQR/' // example 2: substr_replace($var, 'bob', 0, $var.length) // returns 2: 'bob' // example 3: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', 0, 0) // returns 3: 'bobABCDEFGH:/MNRPQR/' // example 4: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', 10, -1) // returns 4: 'ABCDEFGH:/bob/' // example 5: substr_replace('ABCDEFGH:/MNRPQR/', 'bob', -7, -1) // returns 5: 'ABCDEFGH:/bob/' // example 6: substr_replace('ABCDEFGH:/MNRPQR/', '', 10, -1) // returns 6: 'ABCDEFGH://' if (start &lt; 0) &#123; // start position in str start = start + str.length &#125; length = length !== undefined ? length : str.length if (length &lt; 0) &#123; length = length + str.length - start &#125; return [ str.slice(0, start), replace.substr(0, length), replace.slice(length), str.slice(start + length) ].join('')&#125;","raw":null,"content":null},{"title":"PHP's substr_count in JavaScript","date":"2016-05-11T20:27:50.070Z","updated":"2016-05-11T20:27:50.070Z","comments":true,"path":"php/strings/substr_count/index.html","permalink":"http://locutus.io/php/strings/substr_count/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637module.exports = function substr_count (haystack, needle, offset, length) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/substr_count/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Thomas // example 1: substr_count('Kevin van Zonneveld', 'e') // returns 1: 3 // example 2: substr_count('Kevin van Zonneveld', 'K', 1) // returns 2: 0 // example 3: substr_count('Kevin van Zonneveld', 'Z', 0, 10) // returns 3: false var cnt = 0 haystack += '' needle += '' if (isNaN(offset)) &#123; offset = 0 &#125; if (isNaN(length)) &#123; length = 0 &#125; if (needle.length === 0) &#123; return false &#125; offset-- while ((offset = haystack.indexOf(needle, offset + 1)) !== -1) &#123; if (length &gt; 0 &amp;&amp; (offset + needle.length) &gt; length) &#123; return false &#125; cnt++ &#125; return cnt&#125;","raw":null,"content":null},{"title":"PHP's substr_compare in JavaScript","date":"2016-05-11T20:27:50.070Z","updated":"2016-05-11T20:27:50.070Z","comments":true,"path":"php/strings/substr_compare/index.html","permalink":"http://locutus.io/php/strings/substr_compare/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435module.exports = function substr_compare (mainStr, str, offset, length, caseInsensitivity) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/substr_compare/ // original by: Brett Zamir (http://brett-zamir.me) // original by: strcasecmp, strcmp // example 1: substr_compare(\"abcde\", \"bc\", 1, 2) // returns 1: 0 if (!offset &amp;&amp; offset !== 0) &#123; throw new Error('Missing offset for substr_compare()') &#125; if (offset &lt; 0) &#123; offset = mainStr.length + offset &#125; if (length &amp;&amp; length &gt; (mainStr.length - offset)) &#123; return false &#125; length = length || mainStr.length - offset mainStr = mainStr.substr(offset, length) // Should only compare up to the desired length str = str.substr(0, length) if (caseInsensitivity) &#123; // Works as strcasecmp mainStr = (mainStr + '').toLowerCase() str = (str + '').toLowerCase() if (mainStr === str) &#123; return 0 &#125; return (mainStr &gt; str) ? 1 : -1 &#125; // Works as strcmp return ((mainStr === str) ? 0 : ((mainStr &gt; str) ? 1 : -1))&#125;","raw":null,"content":null},{"title":"PHP's substr in JavaScript","date":"2016-05-11T20:27:50.070Z","updated":"2016-05-11T20:27:50.070Z","comments":true,"path":"php/strings/substr/index.html","permalink":"http://locutus.io/php/strings/substr/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121module.exports = function substr (str, start, len) &#123; // discuss at: http://locutus.io/php/substr/ // original by: Martijn Wieringa // bugfixed by: T.Wild // improved by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // revised by: Theriault (https://github.com/Theriault) // note 1: Handles rare Unicode characters if 'unicode.semantics' ini (PHP6) is set to 'on' // example 1: substr('abcdef', 0, -1) // returns 1: 'abcde' // example 2: substr(2, 0, -6) // returns 2: false // example 3: ini_set('unicode.semantics', 'on') // example 3: substr('a\\uD801\\uDC00', 0, -1) // returns 3: 'a' // example 4: ini_set('unicode.semantics', 'on') // example 4: substr('a\\uD801\\uDC00', 0, 2) // returns 4: 'a\\uD801\\uDC00' // example 5: ini_set('unicode.semantics', 'on') // example 5: substr('a\\uD801\\uDC00', -1, 1) // returns 5: '\\uD801\\uDC00' // example 6: ini_set('unicode.semantics', 'on') // example 6: substr('a\\uD801\\uDC00z\\uD801\\uDC00', -3, 2) // returns 6: '\\uD801\\uDC00z' // example 7: ini_set('unicode.semantics', 'on') // example 7: substr('a\\uD801\\uDC00z\\uD801\\uDC00', -3, -1) // returns 7: '\\uD801\\uDC00z' // test: skip-3 skip-4 skip-5 skip-6 skip-7 str += '' var end = str.length var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('unicode.emantics') : undefined) || 'off' if (iniVal === 'off') &#123; // assumes there are no non-BMP characters; // if there may be such characters, then it is best to turn it on (critical in true XHTML/XML) if (start &lt; 0) &#123; start += end &#125; if (typeof len !== 'undefined') &#123; if (len &lt; 0) &#123; end = len + end &#125; else &#123; end = len + start &#125; &#125; // PHP returns false if start does not fall within the string. // PHP returns false if the calculated end comes before the calculated start. // PHP returns an empty string if start and end are the same. // Otherwise, PHP returns the portion of the string from start to end. if (start &gt;= str.length || start &lt; 0 || start &gt; end) &#123; return false &#125; return str.slice(start, end) &#125; // Full-blown Unicode including non-Basic-Multilingual-Plane characters var i = 0 var allBMP = true var es = 0 var el = 0 var se = 0 var ret = '' for (i = 0; i &lt; str.length; i++) &#123; if (/[\\uD800-\\uDBFF]/.test(str.charAt(i)) &amp;&amp; /[\\uDC00-\\uDFFF]/.test(str.charAt(i + 1))) &#123; allBMP = false break &#125; &#125; if (!allBMP) &#123; if (start &lt; 0) &#123; for (i = end - 1, es = (start += end); i &gt;= es; i--) &#123; if (/[\\uDC00-\\uDFFF]/.test(str.charAt(i)) &amp;&amp; /[\\uD800-\\uDBFF]/.test(str.charAt(i - 1))) &#123; start-- es-- &#125; &#125; &#125; else &#123; var surrogatePairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g while ((surrogatePairs.exec(str)) !== null) &#123; var li = surrogatePairs.lastIndex if (li - 2 &lt; start) &#123; start++ &#125; else &#123; break &#125; &#125; &#125; if (start &gt;= end || start &lt; 0) &#123; return false &#125; if (len &lt; 0) &#123; for (i = end - 1, el = (end += len); i &gt;= el; i--) &#123; if (/[\\uDC00-\\uDFFF]/.test(str.charAt(i)) &amp;&amp; /[\\uD800-\\uDBFF]/.test(str.charAt(i - 1))) &#123; end-- el-- &#125; &#125; if (start &gt; end) &#123; return false &#125; return str.slice(start, end) &#125; else &#123; se = start + len for (i = start; i &lt; se; i++) &#123; ret += str.charAt(i) if (/[\\uD800-\\uDBFF]/.test(str.charAt(i)) &amp;&amp; /[\\uDC00-\\uDFFF]/.test(str.charAt(i + 1))) &#123; // Go one further, since one of the \"characters\" is part of a surrogate pair se++ &#125; &#125; return ret &#125; &#125;&#125;","raw":null,"content":null},{"title":"PHP's strtr in JavaScript","date":"2016-05-11T20:27:50.066Z","updated":"2016-05-11T20:27:50.066Z","comments":true,"path":"php/strings/strtr/index.html","permalink":"http://locutus.io/php/strings/strtr/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697module.exports = function strtr (str, trFrom, trTo) &#123; // discuss at: http://locutus.io/php/strtr/ // original by: Brett Zamir (http://brett-zamir.me) // input by: uestla // input by: Alan C // input by: Taras Bogach // input by: jpfle // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: var $trans = &#123;'hello' : 'hi', 'hi' : 'hello'&#125; // example 1: strtr('hi all, I said hello', $trans) // returns 1: 'hello all, I said hi' // example 2: strtr('√§aaba√•ccasde√∂oo', '√§√•√∂','aao') // returns 2: 'aaabaaccasdeooo' // example 3: strtr('√§√§√§√§√§√§√§√§', '√§', 'a') // returns 3: 'aaaaaaaa' // example 4: strtr('http', 'pthxyz','xyzpth') // returns 4: 'zyyx' // example 5: strtr('zyyx', 'pthxyz','xyzpth') // returns 5: 'http' // example 6: strtr('aa', &#123;'a':1,'aa':2&#125;) // returns 6: '2' var krsort = require('../array/krsort') var iniSet = require('../info/ini_set') var fr = '' var i = 0 var j = 0 var lenStr = 0 var lenFrom = 0 var sortByReference = false var fromTypeStr = '' var toTypeStr = '' var istr = '' var tmpFrom = [] var tmpTo = [] var ret = '' var match = false // Received replace_pairs? // Convert to normal trFrom-&gt;trTo chars if (typeof trFrom === 'object') &#123; // Not thread-safe; temporarily set to true // @todo: Don't rely on ini here, use internal krsort instead sortByReference = iniSet('locutus.sortByReference', false) trFrom = krsort(trFrom) iniSet('locutus.sortByReference', sortByReference) for (fr in trFrom) &#123; if (trFrom.hasOwnProperty(fr)) &#123; tmpFrom.push(fr) tmpTo.push(trFrom[fr]) &#125; &#125; trFrom = tmpFrom trTo = tmpTo &#125; // Walk through subject and replace chars when needed lenStr = str.length lenFrom = trFrom.length fromTypeStr = typeof trFrom === 'string' toTypeStr = typeof trTo === 'string' for (i = 0; i &lt; lenStr; i++) &#123; match = false if (fromTypeStr) &#123; istr = str.charAt(i) for (j = 0; j &lt; lenFrom; j++) &#123; if (istr === trFrom.charAt(j)) &#123; match = true break &#125; &#125; &#125; else &#123; for (j = 0; j &lt; lenFrom; j++) &#123; if (str.substr(i, trFrom[j].length) === trFrom[j]) &#123; match = true // Fast forward i = (i + trFrom[j].length) - 1 break &#125; &#125; &#125; if (match) &#123; ret += toTypeStr ? trTo.charAt(j) : trTo[j] &#125; else &#123; ret += str.charAt(i) &#125; &#125; return ret&#125;","raw":null,"content":null},{"title":"PHP's strtoupper in JavaScript","date":"2016-05-11T20:27:50.062Z","updated":"2016-05-11T20:27:50.062Z","comments":true,"path":"php/strings/strtoupper/index.html","permalink":"http://locutus.io/php/strings/strtoupper/index.html","excerpt":"","keywords":null,"text":"12345678910module.exports = function strtoupper (str) &#123; // discuss at: http://locutus.io/php/strtoupper/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: strtoupper('Kevin van Zonneveld') // returns 1: 'KEVIN VAN ZONNEVELD' return (str + '') .toUpperCase()&#125;","raw":null,"content":null},{"title":"PHP's strtolower in JavaScript","date":"2016-05-11T20:27:50.062Z","updated":"2016-05-11T20:27:50.062Z","comments":true,"path":"php/strings/strtolower/index.html","permalink":"http://locutus.io/php/strings/strtolower/index.html","excerpt":"","keywords":null,"text":"12345678910module.exports = function strtolower (str) &#123; // discuss at: http://locutus.io/php/strtolower/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: strtolower('Kevin van Zonneveld') // returns 1: 'kevin van zonneveld' return (str + '') .toLowerCase()&#125;","raw":null,"content":null},{"title":"PHP's strtok in JavaScript","date":"2016-05-11T20:27:50.062Z","updated":"2016-05-11T20:27:50.062Z","comments":true,"path":"php/strings/strtok/index.html","permalink":"http://locutus.io/php/strings/strtok/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435module.exports = function strtok (str, tokens) &#123; // discuss at: http://locutus.io/php/strtok/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: Use tab and newline as tokenizing characters as well // example 1: var $string = \"\\t\\t\\t\\nThis is\\tan example\\nstring\\n\" // example 1: var $tok = strtok($string, \" \\n\\t\") // example 1: var $b = '' // example 1: while ($tok !== false) &#123;$b += \"Word=\"+$tok+\"\\n\"; $tok = strtok(\" \\n\\t\");&#125; // example 1: var $result = $b // returns 1: \"Word=This\\nWord=is\\nWord=an\\nWord=example\\nWord=string\\n\" var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; if (tokens === undefined) &#123; tokens = str str = $locutus.php.strtokleftOver &#125; if (str.length === 0) &#123; return false &#125; if (tokens.indexOf(str.charAt(0)) !== -1) &#123; return strtok(str.substr(1), tokens) &#125; for (var i = 0; i &lt; str.length; i++) &#123; if (tokens.indexOf(str.charAt(i)) !== -1) &#123; break &#125; &#125; $locutus.php.strtokleftOver = str.substr(i + 1) return str.substring(0, i)&#125;","raw":null,"content":null},{"title":"PHP's strstr in JavaScript","date":"2016-05-11T20:27:50.062Z","updated":"2016-05-11T20:27:50.062Z","comments":true,"path":"php/strings/strstr/index.html","permalink":"http://locutus.io/php/strings/strstr/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728module.exports = function strstr (haystack, needle, bool) &#123; // discuss at: http://locutus.io/php/strstr/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Kevin van Zonneveld (http://kvz.io) // example 1: strstr('Kevin van Zonneveld', 'van') // returns 1: 'van Zonneveld' // example 2: strstr('Kevin van Zonneveld', 'van', true) // returns 2: 'Kevin ' // example 3: strstr('name@example.com', '@') // returns 3: '@example.com' // example 4: strstr('name@example.com', '@', true) // returns 4: 'name' var pos = 0 haystack += '' pos = haystack.indexOf(needle) if (pos === -1) &#123; return false &#125; else &#123; if (bool) &#123; return haystack.substr(0, pos) &#125; else &#123; return haystack.slice(pos) &#125; &#125;&#125;","raw":null,"content":null},{"title":"PHP's strspn in JavaScript","date":"2016-05-11T20:27:50.062Z","updated":"2016-05-11T20:27:50.062Z","comments":true,"path":"php/strings/strspn/index.html","permalink":"http://locutus.io/php/strings/strspn/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536module.exports = function strspn (str1, str2, start, lgth) &#123; // discuss at: http://locutus.io/php/strspn/ // original by: Valentina De Rosa // improved by: Brett Zamir (http://brett-zamir.me) // example 1: strspn('42 is the answer, what is the question ...', '1234567890') // returns 1: 2 // example 2: strspn('foo', 'o', 1, 2) // returns 2: 2 var found var stri var strj var j = 0 var i = 0 start = start ? (start &lt; 0 ? (str1.length + start) : start) : 0 lgth = lgth ? ((lgth &lt; 0) ? (str1.length + lgth - start) : lgth) : str1.length - start str1 = str1.substr(start, lgth) for (i = 0; i &lt; str1.length; i++) &#123; found = 0 stri = str1.substring(i, i + 1) for (j = 0; j &lt;= str2.length; j++) &#123; strj = str2.substring(j, j + 1) if (stri === strj) &#123; found = 1 break &#125; &#125; if (found !== 1) &#123; return i &#125; &#125; return i&#125;","raw":null,"content":null},{"title":"PHP's strrpos in JavaScript","date":"2016-05-11T20:27:50.062Z","updated":"2016-05-11T20:27:50.062Z","comments":true,"path":"php/strings/strrpos/index.html","permalink":"http://locutus.io/php/strings/strrpos/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function strrpos (haystack, needle, offset) &#123; // discuss at: http://locutus.io/php/strrpos/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Brett Zamir (http://brett-zamir.me) // input by: saulius // example 1: strrpos('Kevin van Zonneveld', 'e') // returns 1: 16 // example 2: strrpos('somepage.com', '.', false) // returns 2: 8 // example 3: strrpos('baa', 'a', 3) // returns 3: false // example 4: strrpos('baa', 'a', 2) // returns 4: 2 var i = -1 if (offset) &#123; i = (haystack + '') .slice(offset) .lastIndexOf(needle) // strrpos' offset indicates starting point of range till end, // while lastIndexOf's optional 2nd argument indicates ending point of range from the beginning if (i !== -1) &#123; i += offset &#125; &#125; else &#123; i = (haystack + '') .lastIndexOf(needle) &#125; return i &gt;= 0 ? i : false&#125;","raw":null,"content":null},{"title":"PHP's strripos in JavaScript","date":"2016-05-11T20:27:50.062Z","updated":"2016-05-11T20:27:50.062Z","comments":true,"path":"php/strings/strripos/index.html","permalink":"http://locutus.io/php/strings/strripos/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829module.exports = function strripos (haystack, needle, offset) &#123; // discuss at: http://locutus.io/php/strripos/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Brett Zamir (http://brett-zamir.me) // input by: saulius // example 1: strripos('Kevin van Zonneveld', 'E') // returns 1: 16 haystack = (haystack + '') .toLowerCase() needle = (needle + '') .toLowerCase() var i = -1 if (offset) &#123; i = (haystack + '') .slice(offset) .lastIndexOf(needle) // strrpos' offset indicates starting point of range till end, // while lastIndexOf's optional 2nd argument indicates ending point of range from the beginning if (i !== -1) &#123; i += offset &#125; &#125; else &#123; i = (haystack + '') .lastIndexOf(needle) &#125; return i &gt;= 0 ? i : false&#125;","raw":null,"content":null},{"title":"PHP's strrev in JavaScript","date":"2016-05-11T20:27:50.058Z","updated":"2016-05-11T20:27:50.058Z","comments":true,"path":"php/strings/strrev/index.html","permalink":"http://locutus.io/php/strings/strrev/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213module.exports = function strrev (string) &#123; // discuss at: http://locutus.io/php/strrev/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // reimplemented by: Brett Zamir (http://brett-zamir.me) // example 1: strrev('Kevin van Zonneveld') // returns 1: 'dlevennoZ nav niveK' // example 2: strrev('a\\u0301haB') // returns 2: 'Baha\\u0301' // combining // example 3: strrev('A\\uD87E\\uDC04Z') // returns 3: 'Z\\uD87E\\uDC04A' // surrogates // test: 'skip-3' string = string + '' // Performance will be enhanced with the next two lines of code commented // out if you don't care about combining characters // Keep Unicode combining characters together with the character preceding // them and which they are modifying (as in PHP 6) // See http://unicode.org/reports/tr44/#Property_Table (Me+Mn) // We also add the low surrogate range at the beginning here so it will be // maintained with its preceding high surrogate var chars = [ '\\uDC00-\\uDFFF', '\\u0300-\\u036F', '\\u0483-\\u0489', '\\u0591-\\u05BD', '\\u05BF', '\\u05C1', '\\u05C2', '\\u05C4', '\\u05C5', '\\u05C7', '\\u0610-\\u061A', '\\u064B-\\u065E', '\\u0670', '\\u06D6-\\u06DC', '\\u06DE-\\u06E4', '\\u06E7\\u06E8', '\\u06EA-\\u06ED', '\\u0711', '\\u0730-\\u074A', '\\u07A6-\\u07B0', '\\u07EB-\\u07F3', '\\u0901-\\u0903', '\\u093C', '\\u093E-\\u094D', '\\u0951-\\u0954', '\\u0962', '\\u0963', '\\u0981-\\u0983', '\\u09BC', '\\u09BE-\\u09C4', '\\u09C7', '\\u09C8', '\\u09CB-\\u09CD', '\\u09D7', '\\u09E2', '\\u09E3', '\\u0A01-\\u0A03', '\\u0A3C', '\\u0A3E-\\u0A42', '\\u0A47', '\\u0A48', '\\u0A4B-\\u0A4D', '\\u0A51', '\\u0A70', '\\u0A71', '\\u0A75', '\\u0A81-\\u0A83', '\\u0ABC', '\\u0ABE-\\u0AC5', '\\u0AC7-\\u0AC9', '\\u0ACB-\\u0ACD', '\\u0AE2', '\\u0AE3', '\\u0B01-\\u0B03', '\\u0B3C', '\\u0B3E-\\u0B44', '\\u0B47', '\\u0B48', '\\u0B4B-\\u0B4D', '\\u0B56', '\\u0B57', '\\u0B62', '\\u0B63', '\\u0B82', '\\u0BBE-\\u0BC2', '\\u0BC6-\\u0BC8', '\\u0BCA-\\u0BCD', '\\u0BD7', '\\u0C01-\\u0C03', '\\u0C3E-\\u0C44', '\\u0C46-\\u0C48', '\\u0C4A-\\u0C4D', '\\u0C55', '\\u0C56', '\\u0C62', '\\u0C63', '\\u0C82', '\\u0C83', '\\u0CBC', '\\u0CBE-\\u0CC4', '\\u0CC6-\\u0CC8', '\\u0CCA-\\u0CCD', '\\u0CD5', '\\u0CD6', '\\u0CE2', '\\u0CE3', '\\u0D02', '\\u0D03', '\\u0D3E-\\u0D44', '\\u0D46-\\u0D48', '\\u0D4A-\\u0D4D', '\\u0D57', '\\u0D62', '\\u0D63', '\\u0D82', '\\u0D83', '\\u0DCA', '\\u0DCF-\\u0DD4', '\\u0DD6', '\\u0DD8-\\u0DDF', '\\u0DF2', '\\u0DF3', '\\u0E31', '\\u0E34-\\u0E3A', '\\u0E47-\\u0E4E', '\\u0EB1', '\\u0EB4-\\u0EB9', '\\u0EBB', '\\u0EBC', '\\u0EC8-\\u0ECD', '\\u0F18', '\\u0F19', '\\u0F35', '\\u0F37', '\\u0F39', '\\u0F3E', '\\u0F3F', '\\u0F71-\\u0F84', '\\u0F86', '\\u0F87', '\\u0F90-\\u0F97', '\\u0F99-\\u0FBC', '\\u0FC6', '\\u102B-\\u103E', '\\u1056-\\u1059', '\\u105E-\\u1060', '\\u1062-\\u1064', '\\u1067-\\u106D', '\\u1071-\\u1074', '\\u1082-\\u108D', '\\u108F', '\\u135F', '\\u1712-\\u1714', '\\u1732-\\u1734', '\\u1752', '\\u1753', '\\u1772', '\\u1773', '\\u17B6-\\u17D3', '\\u17DD', '\\u180B-\\u180D', '\\u18A9', '\\u1920-\\u192B', '\\u1930-\\u193B', '\\u19B0-\\u19C0', '\\u19C8', '\\u19C9', '\\u1A17-\\u1A1B', '\\u1B00-\\u1B04', '\\u1B34-\\u1B44', '\\u1B6B-\\u1B73', '\\u1B80-\\u1B82', '\\u1BA1-\\u1BAA', '\\u1C24-\\u1C37', '\\u1DC0-\\u1DE6', '\\u1DFE', '\\u1DFF', '\\u20D0-\\u20F0', '\\u2DE0-\\u2DFF', '\\u302A-\\u302F', '\\u3099', '\\u309A', '\\uA66F-\\uA672', '\\uA67C', '\\uA67D', '\\uA802', '\\uA806', '\\uA80B', '\\uA823-\\uA827', '\\uA880', '\\uA881', '\\uA8B4-\\uA8C4', '\\uA926-\\uA92D', '\\uA947-\\uA953', '\\uAA29-\\uAA36', '\\uAA43', '\\uAA4C', '\\uAA4D', '\\uFB1E', '\\uFE00-\\uFE0F', '\\uFE20-\\uFE26' ] var graphemeExtend = new RegExp('(.)([' + chars.join('') + ']+)', 'g') // Temporarily reverse string = string.replace(graphemeExtend, '$2$1') return string.split('').reverse().join('')&#125;","raw":null,"content":null},{"title":"PHP's strrchr in JavaScript","date":"2016-05-11T20:27:50.046Z","updated":"2016-05-11T20:27:50.046Z","comments":true,"path":"php/strings/strrchr/index.html","permalink":"http://locutus.io/php/strings/strrchr/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function strrchr (haystack, needle) &#123; // discuss at: http://locutus.io/php/strrchr/ // original by: Brett Zamir (http://brett-zamir.me) // input by: Jason Wong (http://carrot.org/) // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: strrchr(\"Line 1\\nLine 2\\nLine 3\", 10).substr(1) // returns 1: 'Line 3' var pos = 0 if (typeof needle !== 'string') &#123; needle = String.fromCharCode(parseInt(needle, 10)) &#125; needle = needle.charAt(0) pos = haystack.lastIndexOf(needle) if (pos === -1) &#123; return false &#125; return haystack.substr(pos)&#125;","raw":null,"content":null},{"title":"PHP's strpos in JavaScript","date":"2016-05-11T20:27:50.046Z","updated":"2016-05-11T20:27:50.046Z","comments":true,"path":"php/strings/strpos/index.html","permalink":"http://locutus.io/php/strings/strpos/index.html","excerpt":"","keywords":null,"text":"12345678910111213module.exports = function strpos (haystack, needle, offset) &#123; // discuss at: http://locutus.io/php/strpos/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Daniel Esteban // example 1: strpos('Kevin van Zonneveld', 'e', 5) // returns 1: 14 var i = (haystack + '') .indexOf(needle, (offset || 0)) return i === -1 ? false : i&#125;","raw":null,"content":null},{"title":"PHP's strpbrk in JavaScript","date":"2016-05-11T20:27:50.046Z","updated":"2016-05-11T20:27:50.046Z","comments":true,"path":"php/strings/strpbrk/index.html","permalink":"http://locutus.io/php/strings/strpbrk/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516module.exports = function strpbrk (haystack, charList) &#123; // discuss at: http://locutus.io/php/strpbrk/ // original by: Alfonso Jimenez (http://www.alfonsojimenez.com) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // revised by: Christoph // improved by: Brett Zamir (http://brett-zamir.me) // example 1: strpbrk('This is a Simple text.', 'is') // returns 1: 'is is a Simple text.' for (var i = 0, len = haystack.length; i &lt; len; ++i) &#123; if (charList.indexOf(haystack.charAt(i)) &gt;= 0) &#123; return haystack.slice(i) &#125; &#125; return false&#125;","raw":null,"content":null},{"title":"PHP's strncmp in JavaScript","date":"2016-05-11T20:27:50.046Z","updated":"2016-05-11T20:27:50.046Z","comments":true,"path":"php/strings/strncmp/index.html","permalink":"http://locutus.io/php/strings/strncmp/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819module.exports = function strncmp (str1, str2, lgth) &#123; // discuss at: http://locutus.io/php/strncmp/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // input by: Steve Hilder // improved by: Kevin van Zonneveld (http://kvz.io) // revised by: gorthaur // reimplemented by: Brett Zamir (http://brett-zamir.me) // example 1: strncmp('aaa', 'aab', 2) // returns 1: 0 // example 2: strncmp('aaa', 'aab', 3 ) // returns 2: -1 var s1 = (str1 + '') .substr(0, lgth) var s2 = (str2 + '') .substr(0, lgth) return ((s1 === s2) ? 0 : ((s1 &gt; s2) ? 1 : -1))&#125;","raw":null,"content":null},{"title":"PHP's strncasecmp in JavaScript","date":"2016-05-11T20:27:50.046Z","updated":"2016-05-11T20:27:50.046Z","comments":true,"path":"php/strings/strncasecmp/index.html","permalink":"http://locutus.io/php/strings/strncasecmp/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152module.exports = function strncasecmp (argStr1, argStr2, len) &#123; // discuss at: http://locutus.io/php/strncasecmp/ // original by: Saulo Vallory // input by: Nate // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // note 1: Returns &lt; 0 if str1 is less than str2 ; &gt; 0 // note 1: if str1 is greater than str2, and 0 if they are equal. // example 1: strncasecmp('Price 12.9', 'Price 12.15', 2) // returns 1: 0 // example 2: strncasecmp('Price 12.09', 'Price 12.15', 10) // returns 2: -1 // example 3: strncasecmp('Price 12.90', 'Price 12.15', 30) // returns 3: 8 // example 4: strncasecmp('Version 12.9', 'Version 12.15', 20) // returns 4: 8 // example 5: strncasecmp('Version 12.15', 'Version 12.9', 20) // returns 5: -8 var diff var i = 0 var str1 = (argStr1 + '').toLowerCase().substr(0, len) var str2 = (argStr2 + '').toLowerCase().substr(0, len) if (str1.length !== str2.length) &#123; if (str1.length &lt; str2.length) &#123; len = str1.length if (str2.substr(0, str1.length) === str1) &#123; // return the difference of chars return str1.length - str2.length &#125; &#125; else &#123; len = str2.length // str1 is longer than str2 if (str1.substr(0, str2.length) === str2) &#123; // return the difference of chars return str1.length - str2.length &#125; &#125; &#125; else &#123; // Avoids trying to get a char that does not exist len = str1.length &#125; for (diff = 0, i = 0; i &lt; len; i++) &#123; diff = str1.charCodeAt(i) - str2.charCodeAt(i) if (diff !== 0) &#123; return diff &#125; &#125; return 0&#125;","raw":null,"content":null},{"title":"PHP's strnatcmp in JavaScript","date":"2016-05-11T20:27:50.046Z","updated":"2016-05-11T20:27:50.046Z","comments":true,"path":"php/strings/strnatcmp/index.html","permalink":"http://locutus.io/php/strings/strnatcmp/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128module.exports = function strnatcmp (fString1, fString2, fVersion) &#123; // discuss at: http://locutus.io/php/strnatcmp/ // original by: Martijn Wieringa // improved by: Michael White (http://getsprink.com) // improved by: Jack // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // note 1: Added fVersion argument against code guidelines, because it's so neat // example 1: strnatcmp('Price 12.9', 'Price 12.15') // returns 1: 1 // example 2: strnatcmp('Price 12.09', 'Price 12.15') // returns 2: -1 // example 3: strnatcmp('Price 12.90', 'Price 12.15') // returns 3: 1 // example 4: strnatcmp('Version 12.9', 'Version 12.15', true) // returns 4: -6 // example 5: strnatcmp('Version 12.15', 'Version 12.9', true) // returns 5: 6 // test: skip-2 var strcmp = require('../strings/strcmp') var i = 0 if (fVersion === undefined) &#123; fVersion = false &#125; var _strnatcmpSplit = function (fString) &#123; var result = [] var buffer = '' var chr = '' var i = 0 var fStringl = 0 var text = true fStringl = fString.length for (i = 0; i &lt; fStringl; i++) &#123; chr = fString.substring(i, i + 1) if (chr.match(/\\d/)) &#123; if (text) &#123; if (buffer.length &gt; 0) &#123; result[result.length] = buffer buffer = '' &#125; text = false &#125; buffer += chr &#125; else if ((text === false) &amp;&amp; (chr === '.') &amp;&amp; (i &lt; (fString.length - 1)) &amp;&amp; (fString.substring(i + 1, i + 2).match(/\\d/))) &#123; // @todo: ^--- Break this up to make it more readable result[result.length] = buffer buffer = '' &#125; else &#123; if (text === false) &#123; if (buffer.length &gt; 0) &#123; result[result.length] = parseInt(buffer, 10) buffer = '' &#125; text = true &#125; buffer += chr &#125; &#125; if (buffer.length &gt; 0) &#123; if (text) &#123; result[result.length] = buffer &#125; else &#123; result[result.length] = parseInt(buffer, 10) &#125; &#125; return result &#125; var array1 = _strnatcmpSplit(fString1 + '') var array2 = _strnatcmpSplit(fString2 + '') var len = array1.length var text = true var result = -1 var r = 0 if (len &gt; array2.length) &#123; len = array2.length result = 1 &#125; for (i = 0; i &lt; len; i++) &#123; if (isNaN(array1[i])) &#123; if (isNaN(array2[i])) &#123; text = true if ((r = strcmp(array1[i], array2[i])) !== 0) &#123; return r &#125; &#125; else if (text) &#123; return 1 &#125; else &#123; return -1 &#125; &#125; else if (isNaN(array2[i])) &#123; if (text) &#123; return -1 &#125; else &#123; return 1 &#125; &#125; else &#123; if (text || fVersion) &#123; if ((r = (array1[i] - array2[i])) !== 0) &#123; return r &#125; &#125; else &#123; if ((r = strcmp(array1[i].toString(), array2[i].toString())) !== 0) &#123; return r &#125; &#125; text = false &#125; &#125; return result&#125;","raw":null,"content":null},{"title":"PHP's strnatcasecmp in JavaScript","date":"2016-05-11T20:27:50.046Z","updated":"2016-05-11T20:27:50.046Z","comments":true,"path":"php/strings/strnatcasecmp/index.html","permalink":"http://locutus.io/php/strings/strnatcasecmp/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127module.exports = function strnatcasecmp (str1, str2) &#123; // discuss at: http://locutus.io/php/strnatcasecmp/ // original by: Martin Pool // reimplemented by: Pierre-Luc Paour // reimplemented by: Kristof Coomans (SCK-CEN (Belgian Nucleair Research Centre)) // reimplemented by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // input by: Devan Penner-Woelk // improved by: Kevin van Zonneveld (http://kvz.io) // example 1: strnatcasecmp(10, 1) // returns 1: 1 // example 2: strnatcasecmp('1', '10') // returns 2: -1 // test: skip-all var a = (str1 + '').toLowerCase() var b = (str2 + '').toLowerCase() var isWhitespaceChar = function (a) &#123; return a.charCodeAt(0) &lt;= 32 &#125; var isDigitChar = function (a) &#123; var charCode = a.charCodeAt(0) return (charCode &gt;= 48 &amp;&amp; charCode &lt;= 57) &#125; var compareRight = function (a, b) &#123; var bias = 0 var ia = 0 var ib = 0 var ca var cb // The longest run of digits wins. That aside, the greatest // value wins, but we can't know that it will until we've scanned // both numbers to know that they have the same magnitude, so we // remember it in BIAS. for (; true; ia++, ib++) &#123; ca = a.charAt(ia) cb = b.charAt(ib) if (!isDigitChar(ca) &amp;&amp; !isDigitChar(cb)) &#123; return bias &#125; else if (!isDigitChar(ca)) &#123; return -1 &#125; else if (!isDigitChar(cb)) &#123; return 1 &#125; else if (ca &lt; cb) &#123; if (bias === 0) &#123; bias = -1 &#125; &#125; else if (ca &gt; cb) &#123; if (bias === 0) &#123; bias = 1 &#125; &#125; else if (ca === '0' &amp;&amp; cb === '0') &#123; return bias &#125; &#125; &#125; var ia = 0 var ib = 0 var nza = 0 var nzb = 0 var ca var cb var result while (true) &#123; // only count the number of zeroes leading the last number compared nza = nzb = 0 ca = a.charAt(ia) cb = b.charAt(ib) // skip over leading spaces or zeros while (isWhitespaceChar(ca) || ca === '0') &#123; if (ca === '0') &#123; nza++ &#125; else &#123; // only count consecutive zeroes nza = 0 &#125; ca = a.charAt(++ia) &#125; while (isWhitespaceChar(cb) || cb === '0') &#123; if (cb === '0') &#123; nzb++ &#125; else &#123; // only count consecutive zeroes nzb = 0 &#125; cb = b.charAt(++ib) &#125; // process run of digits if (isDigitChar(ca) &amp;&amp; isDigitChar(cb)) &#123; if ((result = compareRight(a.substring(ia), b.substring(ib))) !== 0) &#123; return result &#125; &#125; if (ca === '0' &amp;&amp; cb === '0') &#123; // The strings compare the same. Perhaps the caller // will want to call strcmp to break the tie. return nza - nzb &#125; if (ca &lt; cb) &#123; return -1 &#125; else if (ca &gt; cb) &#123; return +1 &#125; // prevent possible infinite loop if (ia &gt;= a.length &amp;&amp; ib &gt;= b.length) return 0; ++ia; ++ib &#125;&#125;","raw":null,"content":null},{"title":"PHP's strlen in JavaScript","date":"2016-05-11T20:27:50.042Z","updated":"2016-05-11T20:27:50.042Z","comments":true,"path":"php/strings/strlen/index.html","permalink":"http://locutus.io/php/strings/strlen/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273module.exports = function strlen (string) &#123; // discuss at: http://locutus.io/php/strlen/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Sakimori // improved by: Kevin van Zonneveld (http://kvz.io) // input by: Kirk Strobeck // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // revised by: Brett Zamir (http://brett-zamir.me) // note 1: May look like overkill, but in order to be truly faithful to handling all Unicode // note 1: characters and to this function in PHP which does not count the number of bytes // note 1: but counts the number of characters, something like this is really necessary. // example 1: strlen('Kevin van Zonneveld') // returns 1: 19 // example 2: ini_set('unicode.semantics', 'on') // example 2: strlen('A\\ud87e\\udc04Z') // returns 2: 3 var str = string + '' var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('unicode.semantics') : undefined) || 'off' if (iniVal === 'off') &#123; return str.length &#125; var i = 0 var lgth = 0 var getWholeChar = function (str, i) &#123; var code = str.charCodeAt(i) var next = '' var prev = '' if (code &gt;= 0xD800 &amp;&amp; code &lt;= 0xDBFF) &#123; // High surrogate (could change last hex to 0xDB7F to // treat high private surrogates as single characters) if (str.length &lt;= (i + 1)) &#123; throw new Error('High surrogate without following low surrogate') &#125; next = str.charCodeAt(i + 1) if (next &lt; 0xDC00 || next &gt; 0xDFFF) &#123; throw new Error('High surrogate without following low surrogate') &#125; return str.charAt(i) + str.charAt(i + 1) &#125; else if (code &gt;= 0xDC00 &amp;&amp; code &lt;= 0xDFFF) &#123; // Low surrogate if (i === 0) &#123; throw new Error('Low surrogate without preceding high surrogate') &#125; prev = str.charCodeAt(i - 1) if (prev &lt; 0xD800 || prev &gt; 0xDBFF) &#123; // (could change last hex to 0xDB7F to treat high private surrogates // as single characters) throw new Error('Low surrogate without preceding high surrogate') &#125; // We can pass over low surrogates now as the second // component in a pair which we have already processed return false &#125; return str.charAt(i) &#125; for (i = 0, lgth = 0; i &lt; str.length; i++) &#123; if ((getWholeChar(str, i)) === false) &#123; continue &#125; // Adapt this line at the top of any loop, passing in the whole string and // the current iteration and returning a variable to represent the individual character; // purpose is to treat the first part of a surrogate pair as the whole character and then // ignore the second part lgth++ &#125; return lgth&#125;","raw":null,"content":null},{"title":"PHP's stristr in JavaScript","date":"2016-05-11T20:27:50.038Z","updated":"2016-05-11T20:27:50.038Z","comments":true,"path":"php/strings/stristr/index.html","permalink":"http://locutus.io/php/strings/stristr/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425module.exports = function stristr (haystack, needle, bool) &#123; // discuss at: http://locutus.io/php/stristr/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: stristr('Kevin van Zonneveld', 'Van') // returns 1: 'van Zonneveld' // example 2: stristr('Kevin van Zonneveld', 'VAN', true) // returns 2: 'Kevin ' var pos = 0 haystack += '' pos = haystack.toLowerCase() .indexOf((needle + '') .toLowerCase()) if (pos === -1) &#123; return false &#125; else &#123; if (bool) &#123; return haystack.substr(0, pos) &#125; else &#123; return haystack.slice(pos) &#125; &#125;&#125;","raw":null,"content":null},{"title":"PHP's stripslashes in JavaScript","date":"2016-05-11T20:27:50.038Z","updated":"2016-05-11T20:27:50.038Z","comments":true,"path":"php/strings/stripslashes/index.html","permalink":"http://locutus.io/php/strings/stripslashes/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031module.exports = function stripslashes (str) &#123; // discuss at: http://locutus.io/php/stripslashes/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Ates Goral (http://magnetiq.com) // improved by: marrtins // improved by: rezna // fixed by: Mick@el // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Brett Zamir (http://brett-zamir.me) // input by: Rick Waldron // input by: Brant Messenger (http://www.brantmessenger.com/) // reimplemented by: Brett Zamir (http://brett-zamir.me) // example 1: stripslashes('Kevin\\'s code') // returns 1: \"Kevin's code\" // example 2: stripslashes('Kevin\\\\\\'s code') // returns 2: \"Kevin\\'s code\" return (str + '') .replace(/\\\\(.?)/g, function (s, n1) &#123; switch (n1) &#123; case '\\\\': return '\\\\' case '0': return '\\u0000' case '': return '' default: return n1 &#125; &#125;)&#125;","raw":null,"content":null},{"title":"PHP's stripos in JavaScript","date":"2016-05-11T20:27:50.038Z","updated":"2016-05-11T20:27:50.038Z","comments":true,"path":"php/strings/stripos/index.html","permalink":"http://locutus.io/php/strings/stripos/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function stripos (fHaystack, fNeedle, fOffset) &#123; // discuss at: http://locutus.io/php/stripos/ // original by: Martijn Wieringa // revised by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: stripos('ABC', 'a') // returns 1: 0 var haystack = (fHaystack + '').toLowerCase() var needle = (fNeedle + '').toLowerCase() var index = 0 if ((index = haystack.indexOf(needle, fOffset)) !== -1) &#123; return index &#125; return false&#125;","raw":null,"content":null},{"title":"PHP's strip_tags in JavaScript","date":"2016-05-11T20:27:50.038Z","updated":"2016-05-11T20:27:50.038Z","comments":true,"path":"php/strings/strip_tags/index.html","permalink":"http://locutus.io/php/strings/strip_tags/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344module.exports = function strip_tags (input, allowed) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/strip_tags/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Luke Godfrey // improved by: Kevin van Zonneveld (http://kvz.io) // input by: Pul // input by: Alex // input by: Marc Palau // input by: Brett Zamir (http://brett-zamir.me) // input by: Bobby Drake // input by: Evertjan Garretsen // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Eric Nagel // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Tomasz Wesolowski // revised by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // example 1: strip_tags('&lt;p&gt;Kevin&lt;/p&gt; &lt;br /&gt;&lt;b&gt;van&lt;/b&gt; &lt;i&gt;Zonneveld&lt;/i&gt;', '&lt;i&gt;&lt;b&gt;') // returns 1: 'Kevin &lt;b&gt;van&lt;/b&gt; &lt;i&gt;Zonneveld&lt;/i&gt;' // example 2: strip_tags('&lt;p&gt;Kevin &lt;img src=\"someimage.png\" onmouseover=\"someFunction()\"&gt;van &lt;i&gt;Zonneveld&lt;/i&gt;&lt;/p&gt;', '&lt;p&gt;') // returns 2: '&lt;p&gt;Kevin van Zonneveld&lt;/p&gt;' // example 3: strip_tags(\"&lt;a href='http://kvz.io'&gt;Kevin van Zonneveld&lt;/a&gt;\", \"&lt;a&gt;\") // returns 3: \"&lt;a href='http://kvz.io'&gt;Kevin van Zonneveld&lt;/a&gt;\" // example 4: strip_tags('1 &lt; 5 5 &gt; 1') // returns 4: '1 &lt; 5 5 &gt; 1' // example 5: strip_tags('1 &lt;br/&gt; 1') // returns 5: '1 1' // example 6: strip_tags('1 &lt;br/&gt; 1', '&lt;br&gt;') // returns 6: '1 &lt;br/&gt; 1' // example 7: strip_tags('1 &lt;br/&gt; 1', '&lt;br&gt;&lt;br/&gt;') // returns 7: '1 &lt;br/&gt; 1' // making sure the allowed arg is a string containing only tags in lowercase (&lt;a&gt;&lt;b&gt;&lt;c&gt;) allowed = (((allowed || '') + '').toLowerCase().match(/&lt;[a-z][a-z0-9]*&gt;/g) || []).join('') var tags = /&lt;\\/?([a-z][a-z0-9]*)\\b[^&gt;]*&gt;/gi var commentsAndPhpTags = /&lt;!--[\\s\\S]*?--&gt;|&lt;\\?(?:php)?[\\s\\S]*?\\?&gt;/gi return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) &#123; return allowed.indexOf('&lt;' + $1.toLowerCase() + '&gt;') &gt; -1 ? $0 : '' &#125;)&#125;","raw":null,"content":null},{"title":"PHP's strcspn in JavaScript","date":"2016-05-11T20:27:50.038Z","updated":"2016-05-11T20:27:50.038Z","comments":true,"path":"php/strings/strcspn/index.html","permalink":"http://locutus.io/php/strings/strcspn/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function strcspn (str, mask, start, length) &#123; // discuss at: http://locutus.io/php/strcspn/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: strcspn('abcdefg123', '1234567890') // returns 1: 7 // example 2: strcspn('123abc', '1234567890') // returns 2: 3 start = start || 0 var count = (length &amp;&amp; ((start + length) &lt; str.length)) ? start + length : str.length strct: for (var i = start, lgth = 0; i &lt; count; i++) &#123; // eslint-disable-line no-labels for (var j = 0; j &lt; mask.length; j++) &#123; if (str.charAt(i).indexOf(mask[j]) !== -1) &#123; continue strct // eslint-disable-line no-labels &#125; &#125; ++lgth &#125; return lgth&#125;","raw":null,"content":null},{"title":"PHP's strcoll in JavaScript","date":"2016-05-11T20:27:50.038Z","updated":"2016-05-11T20:27:50.038Z","comments":true,"path":"php/strings/strcoll/index.html","permalink":"http://locutus.io/php/strings/strcoll/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function strcoll (str1, str2) &#123; // discuss at: http://locutus.io/php/strcoll/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: strcoll('a', 'b') // returns 1: -1 var setlocale = require('../strings/setlocale') var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; setlocale('LC_ALL', 0) // ensure setup of localization variables takes place var cmp = $locutus.php.locales[$locutus.php.localeCategories.LC_COLLATE].LC_COLLATE return cmp(str1, str2)&#125;","raw":null,"content":null},{"title":"PHP's strcmp in JavaScript","date":"2016-05-11T20:27:50.038Z","updated":"2016-05-11T20:27:50.038Z","comments":true,"path":"php/strings/strcmp/index.html","permalink":"http://locutus.io/php/strings/strcmp/index.html","excerpt":"","keywords":null,"text":"12345678910111213module.exports = function strcmp (str1, str2) &#123; // discuss at: http://locutus.io/php/strcmp/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // input by: Steve Hilder // improved by: Kevin van Zonneveld (http://kvz.io) // revised by: gorthaur // example 1: strcmp( 'waldo', 'owald' ) // returns 1: 1 // example 2: strcmp( 'owald', 'waldo' ) // returns 2: -1 return ((str1 === str2) ? 0 : ((str1 &gt; str2) ? 1 : -1))&#125;","raw":null,"content":null},{"title":"PHP's strchr in JavaScript","date":"2016-05-11T20:27:50.034Z","updated":"2016-05-11T20:27:50.034Z","comments":true,"path":"php/strings/strchr/index.html","permalink":"http://locutus.io/php/strings/strchr/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function strchr (haystack, needle, bool) &#123; // discuss at: http://locutus.io/php/strchr/ // original by: Philip Peterson // example 1: strchr('Kevin van Zonneveld', 'van') // returns 1: 'van Zonneveld' // example 2: strchr('Kevin van Zonneveld', 'van', true) // returns 2: 'Kevin ' var strstr = require('../strings/strstr') return strstr(haystack, needle, bool)&#125;","raw":null,"content":null},{"title":"PHP's strcasecmp in JavaScript","date":"2016-05-11T20:27:50.030Z","updated":"2016-05-11T20:27:50.030Z","comments":true,"path":"php/strings/strcasecmp/index.html","permalink":"http://locutus.io/php/strings/strcasecmp/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718module.exports = function strcasecmp (fString1, fString2) &#123; // discuss at: http://locutus.io/php/strcasecmp/ // original by: Martijn Wieringa // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: strcasecmp('Hello', 'hello') // returns 1: 0 var string1 = (fString1 + '').toLowerCase() var string2 = (fString2 + '').toLowerCase() if (string1 &gt; string2) &#123; return 1 &#125; else if (string1 === string2) &#123; return 0 &#125; return -1&#125;","raw":null,"content":null},{"title":"PHP's str_word_count in JavaScript","date":"2016-05-11T20:27:50.030Z","updated":"2016-05-11T20:27:50.030Z","comments":true,"path":"php/strings/str_word_count/index.html","permalink":"http://locutus.io/php/strings/str_word_count/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116module.exports = function str_word_count (str, format, charlist) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/str_word_count/ // original by: Ole Vrijenhoek // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Brett Zamir (http://brett-zamir.me) // input by: Bug? // improved by: Brett Zamir (http://brett-zamir.me) // example 1: str_word_count(\"Hello fri3nd, you're\\r\\n looking good today!\", 1) // returns 1: ['Hello', 'fri', 'nd', \"you're\", 'looking', 'good', 'today'] // example 2: str_word_count(\"Hello fri3nd, you're\\r\\n looking good today!\", 2) // returns 2: &#123;0: 'Hello', 6: 'fri', 10: 'nd', 14: \"you're\", 29: 'looking', 46: 'good', 51: 'today'&#125; // example 3: str_word_count(\"Hello fri3nd, you're\\r\\n looking good today!\", 1, '\\u00e0\\u00e1\\u00e3\\u00e73') // returns 3: ['Hello', 'fri3nd', \"you're\", 'looking', 'good', 'today'] // example 4: str_word_count('hey', 2) // returns 4: &#123;0: 'hey'&#125; var ctypeAlpha = require('../ctype/ctype_alpha') var len = str.length var cl = charlist &amp;&amp; charlist.length var chr = '' var tmpStr = '' var i = 0 var c = '' var wArr = [] var wC = 0 var assoc = &#123;&#125; var aC = 0 var reg = '' var match = false var _pregQuote = function (str) &#123; return (str + '').replace(/([\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\&#123;\\&#125;=!&lt;&gt;\\|:])/g, '\\\\$1') &#125; var _getWholeChar = function (str, i) &#123; // Use for rare cases of non-BMP characters var code = str.charCodeAt(i) if (code &lt; 0xD800 || code &gt; 0xDFFF) &#123; return str.charAt(i) &#125; if (code &gt;= 0xD800 &amp;&amp; code &lt;= 0xDBFF) &#123; // High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single // characters) if (str.length &lt;= (i + 1)) &#123; throw new Error('High surrogate without following low surrogate') &#125; var next = str.charCodeAt(i + 1) if (next &lt; 0xDC00 || next &gt; 0xDFFF) &#123; throw new Error('High surrogate without following low surrogate') &#125; return str.charAt(i) + str.charAt(i + 1) &#125; // Low surrogate (0xDC00 &lt;= code &amp;&amp; code &lt;= 0xDFFF) if (i === 0) &#123; throw new Error('Low surrogate without preceding high surrogate') &#125; var prev = str.charCodeAt(i - 1) if (prev &lt; 0xD800 || prev &gt; 0xDBFF) &#123; // (could change last hex to 0xDB7F to treat high private surrogates as single characters) throw new Error('Low surrogate without preceding high surrogate') &#125; // We can pass over low surrogates now as the second component in a pair which we have already // processed return false &#125; if (cl) &#123; reg = '^(' + _pregQuote(_getWholeChar(charlist, 0)) for (i = 1; i &lt; cl; i++) &#123; if ((chr = _getWholeChar(charlist, i)) === false) &#123; continue &#125; reg += '|' + _pregQuote(chr) &#125; reg += ')$' reg = new RegExp(reg) &#125; for (i = 0; i &lt; len; i++) &#123; if ((c = _getWholeChar(str, i)) === false) &#123; continue &#125; // No hyphen at beginning or end unless allowed in charlist (or locale) // No apostrophe at beginning unless allowed in charlist (or locale) // @todo: Make this more readable match = ctypeAlpha(c) || (reg &amp;&amp; c.search(reg) !== -1) || ((i !== 0 &amp;&amp; i !== len - 1) &amp;&amp; c === '-') || (i !== 0 &amp;&amp; c === \"'\") if (match) &#123; if (tmpStr === '' &amp;&amp; format === 2) &#123; aC = i &#125; tmpStr = tmpStr + c &#125; if (i === len - 1 || !match &amp;&amp; tmpStr !== '') &#123; if (format !== 2) &#123; wArr[wArr.length] = tmpStr &#125; else &#123; assoc[aC] = tmpStr &#125; tmpStr = '' wC++ &#125; &#125; if (!format) &#123; return wC &#125; else if (format === 1) &#123; return wArr &#125; else if (format === 2) &#123; return assoc &#125; throw new Error('You have supplied an incorrect format')&#125;","raw":null,"content":null},{"title":"PHP's str_split in JavaScript","date":"2016-05-11T20:27:50.030Z","updated":"2016-05-11T20:27:50.030Z","comments":true,"path":"php/strings/str_split/index.html","permalink":"http://locutus.io/php/strings/str_split/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829module.exports = function str_split (string, splitLength) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/str_split/ // original by: Martijn Wieringa // improved by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // revised by: Theriault (https://github.com/Theriault) // revised by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // input by: Bjorn Roesbeke (http://www.bjornroesbeke.be/) // example 1: str_split('Hello Friend', 3) // returns 1: ['Hel', 'lo ', 'Fri', 'end'] if (splitLength === null) &#123; splitLength = 1 &#125; if (string === null || splitLength &lt; 1) &#123; return false &#125; string += '' var chunks = [] var pos = 0 var len = string.length while (pos &lt; len) &#123; chunks.push(string.slice(pos, pos += splitLength)) &#125; return chunks&#125;","raw":null,"content":null},{"title":"PHP's str_shuffle in JavaScript","date":"2016-05-11T20:27:50.030Z","updated":"2016-05-11T20:27:50.030Z","comments":true,"path":"php/strings/str_shuffle/index.html","permalink":"http://locutus.io/php/strings/str_shuffle/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function str_shuffle (str) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/str_shuffle/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: var $shuffled = str_shuffle(\"abcdef\") // example 1: var $result = $shuffled.length // returns 1: 6 if (arguments.length === 0) &#123; throw new Error('Wrong parameter count for str_shuffle()') &#125; if (str === null) &#123; return '' &#125; str += '' var newStr = '' var rand var i = str.length while (i) &#123; rand = Math.floor(Math.random() * i) newStr += str.charAt(rand) str = str.substring(0, rand) + str.substr(rand + 1) i-- &#125; return newStr&#125;","raw":null,"content":null},{"title":"PHP's str_rot13 in JavaScript","date":"2016-05-11T20:27:50.030Z","updated":"2016-05-11T20:27:50.030Z","comments":true,"path":"php/strings/str_rot13/index.html","permalink":"http://locutus.io/php/strings/str_rot13/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718module.exports = function str_rot13 (str) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/str_rot13/ // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // improved by: Ates Goral (http://magnetiq.com) // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: str_rot13('Kevin van Zonneveld') // returns 1: 'Xriva ina Mbaariryq' // example 2: str_rot13('Xriva ina Mbaariryq') // returns 2: 'Kevin van Zonneveld' // example 3: str_rot13(33) // returns 3: '33' return (str + '') .replace(/[a-z]/gi, function (s) &#123; return String.fromCharCode(s.charCodeAt(0) + (s.toLowerCase() &lt; 'n' ? 13 : -13)) &#125;)&#125;","raw":null,"content":null},{"title":"PHP's str_replace in JavaScript","date":"2016-05-11T20:27:50.030Z","updated":"2016-05-11T20:27:50.030Z","comments":true,"path":"php/strings/str_replace/index.html","permalink":"http://locutus.io/php/strings/str_replace/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879module.exports = function str_replace (search, replace, subject, countObj) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/str_replace/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Gabriel Paderni // improved by: Philip Peterson // improved by: Simon Willison (http://simonwillison.net) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // bugfixed by: Anton Ongson // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Oleg Eremeev // bugfixed by: Glen Arason (http://CanadianDomainRegistry.ca) // bugfixed by: Glen Arason (http://CanadianDomainRegistry.ca) // input by: Onno Marsman (https://twitter.com/onnomarsman) // input by: Brett Zamir (http://brett-zamir.me) // input by: Oleg Eremeev // note 1: The countObj parameter (optional) if used must be passed in as a // note 1: object. The count will then be written by reference into it's `value` property // example 1: str_replace(' ', '.', 'Kevin van Zonneveld') // returns 1: 'Kevin.van.Zonneveld' // example 2: str_replace(['&#123;name&#125;', 'l'], ['hello', 'm'], '&#123;name&#125;, lars') // returns 2: 'hemmo, mars' // example 3: str_replace(Array('S','F'),'x','ASDFASDF') // returns 3: 'AxDxAxDx' // example 4: var countObj = &#123;&#125; // example 4: str_replace(['A','D'], ['x','y'] , 'ASDFASDF' , countObj) // example 4: var $result = countObj.value // returns 4: 4 var i = 0 var j = 0 var temp = '' var repl = '' var sl = 0 var fl = 0 var f = [].concat(search) var r = [].concat(replace) var s = subject var ra = Object.prototype.toString.call(r) === '[object Array]' var sa = Object.prototype.toString.call(s) === '[object Array]' s = [].concat(s) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; if (typeof (search) === 'object' &amp;&amp; typeof (replace) === 'string') &#123; temp = replace replace = [] for (i = 0; i &lt; search.length; i += 1) &#123; replace[i] = temp &#125; temp = '' r = [].concat(replace) ra = Object.prototype.toString.call(r) === '[object Array]' &#125; if (typeof countObj !== 'undefined') &#123; countObj.value = 0 &#125; for (i = 0, sl = s.length; i &lt; sl; i++) &#123; if (s[i] === '') &#123; continue &#125; for (j = 0, fl = f.length; j &lt; fl; j++) &#123; temp = s[i] + '' repl = ra ? (r[j] !== undefined ? r[j] : '') : r[0] s[i] = (temp).split(f[j]).join(repl) if (typeof countObj !== 'undefined') &#123; countObj.value += ((temp.split(f[j])).length - 1) &#125; &#125; &#125; return sa ? s : s[0]&#125;","raw":null,"content":null},{"title":"PHP's str_repeat in JavaScript","date":"2016-05-11T20:27:50.030Z","updated":"2016-05-11T20:27:50.030Z","comments":true,"path":"php/strings/str_repeat/index.html","permalink":"http://locutus.io/php/strings/str_repeat/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122module.exports = function str_repeat (input, multiplier) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/str_repeat/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // improved by: Ian Carter (http://euona.com/) // example 1: str_repeat('-=', 10) // returns 1: '-=-=-=-=-=-=-=-=-=-=' var y = '' while (true) &#123; if (multiplier &amp; 1) &#123; y += input &#125; multiplier &gt;&gt;= 1 if (multiplier) &#123; input += input &#125; else &#123; break &#125; &#125; return y&#125;","raw":null,"content":null},{"title":"PHP's str_pad in JavaScript","date":"2016-05-11T20:27:50.026Z","updated":"2016-05-11T20:27:50.026Z","comments":true,"path":"php/strings/str_pad/index.html","permalink":"http://locutus.io/php/strings/str_pad/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445module.exports = function str_pad (input, padLength, padString, padType) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/str_pad/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Michael White (http://getsprink.com) // input by: Marco van Oort // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: str_pad('Kevin van Zonneveld', 30, '-=', 'STR_PAD_LEFT') // returns 1: '-=-=-=-=-=-Kevin van Zonneveld' // example 2: str_pad('Kevin van Zonneveld', 30, '-', 'STR_PAD_BOTH') // returns 2: '------Kevin van Zonneveld-----' var half = '' var padToGo var _strPadRepeater = function (s, len) &#123; var collect = '' while (collect.length &lt; len) &#123; collect += s &#125; collect = collect.substr(0, len) return collect &#125; input += '' padString = padString !== undefined ? padString : ' ' if (padType !== 'STR_PAD_LEFT' &amp;&amp; padType !== 'STR_PAD_RIGHT' &amp;&amp; padType !== 'STR_PAD_BOTH') &#123; padType = 'STR_PAD_RIGHT' &#125; if ((padToGo = padLength - input.length) &gt; 0) &#123; if (padType === 'STR_PAD_LEFT') &#123; input = _strPadRepeater(padString, padToGo) + input &#125; else if (padType === 'STR_PAD_RIGHT') &#123; input = input + _strPadRepeater(padString, padToGo) &#125; else if (padType === 'STR_PAD_BOTH') &#123; half = _strPadRepeater(padString, Math.ceil(padToGo / 2)) input = half + input + half input = input.substr(0, padLength) &#125; &#125; return input&#125;","raw":null,"content":null},{"title":"PHP's str_ireplace in JavaScript","date":"2016-05-11T20:27:50.018Z","updated":"2016-05-11T20:27:50.018Z","comments":true,"path":"php/strings/str_ireplace/index.html","permalink":"http://locutus.io/php/strings/str_ireplace/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596module.exports = function str_ireplace (search, replace, subject, countObj) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/str_ireplace/ // original by: Glen Arason (http://CanadianDomainRegistry.ca) // note 1: Case-insensitive version of str_replace() // note 1: Compliant with PHP 5.0 str_ireplace() Full details at: // note 1: http://ca3.php.net/manual/en/function.str-ireplace.php // note 2: The countObj parameter (optional) if used must be passed in as a // note 2: object. The count will then be written by reference into it's `value` property // example 1: str_ireplace('M', 'e', 'name') // returns 1: 'naee' // example 2: var $countObj = &#123;&#125; // example 2: str_ireplace('M', 'e', 'name', $countObj) // example 2: var $result = $countObj.value // returns 2: 1 var i = 0 var j = 0 var temp = '' var repl = '' var sl = 0 var fl = 0 var f = '' var r = '' var s = '' var ra = '' var otemp = '' var oi = '' var ofjl = '' var os = subject var osa = Object.prototype.toString.call(os) === '[object Array]' // var sa = '' if (typeof (search) === 'object') &#123; temp = search search = [] for (i = 0; i &lt; temp.length; i += 1) &#123; search[i] = temp[i].toLowerCase() &#125; &#125; else &#123; search = search.toLowerCase() &#125; if (typeof (subject) === 'object') &#123; temp = subject subject = [] for (i = 0; i &lt; temp.length; i += 1) &#123; subject[i] = temp[i].toLowerCase() &#125; &#125; else &#123; subject = subject.toLowerCase() &#125; if (typeof (search) === 'object' &amp;&amp; typeof (replace) === 'string') &#123; temp = replace replace = [] for (i = 0; i &lt; search.length; i += 1) &#123; replace[i] = temp &#125; &#125; temp = '' f = [].concat(search) r = [].concat(replace) ra = Object.prototype.toString.call(r) === '[object Array]' s = subject // sa = Object.prototype.toString.call(s) === '[object Array]' s = [].concat(s) os = [].concat(os) if (countObj) &#123; countObj.value = 0 &#125; for (i = 0, sl = s.length; i &lt; sl; i++) &#123; if (s[i] === '') &#123; continue &#125; for (j = 0, fl = f.length; j &lt; fl; j++) &#123; temp = s[i] + '' repl = ra ? (r[j] !== undefined ? r[j] : '') : r[0] s[i] = (temp).split(f[j]).join(repl) otemp = os[i] + '' oi = temp.indexOf(f[j]) ofjl = f[j].length if (oi &gt;= 0) &#123; os[i] = (otemp).split(otemp.substr(oi, ofjl)).join(repl) &#125; if (countObj) &#123; countObj.value += ((temp.split(f[j])).length - 1) &#125; &#125; &#125; return osa ? os : os[0]&#125;","raw":null,"content":null},{"title":"PHP's str_getcsv in JavaScript","date":"2016-05-11T20:27:50.018Z","updated":"2016-05-11T20:27:50.018Z","comments":true,"path":"php/strings/str_getcsv/index.html","permalink":"http://locutus.io/php/strings/str_getcsv/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960module.exports = function str_getcsv (input, delimiter, enclosure, escape) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/str_getcsv/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: str_getcsv('\"abc\",\"def\",\"ghi\"') // returns 1: ['abc', 'def', 'ghi'] // example 2: str_getcsv('\"row2\"\"cell1\",\"row2cell2\",\"row2cell3\"', null, null, '\"') // returns 2: ['row2\"cell1', 'row2cell2', 'row2cell3'] /* // These test cases allowing for missing delimiters are not currently supported str_getcsv('\"row2\"\"cell1\",row2cell2,row2cell3', null, null, '\"'); ['row2\"cell1', 'row2cell2', 'row2cell3'] str_getcsv('row1cell1,\"row1,cell2\",row1cell3', null, null, '\"'); ['row1cell1', 'row1,cell2', 'row1cell3'] str_getcsv('\"row2\"\"cell1\",row2cell2,\"row2\"\"\"\"cell3\"'); ['row2\"cell1', 'row2cell2', 'row2\"\"cell3'] str_getcsv('row1cell1,\"row1,cell2\",\"row1\"\",\"\"cell3\"', null, null, '\"'); ['row1cell1', 'row1,cell2', 'row1\",\"cell3']; Should also test newlines within */ var i var inpLen var output = [] var _backwards = function (str) &#123; // We need to go backwards to simulate negative look-behind (don't split on // an escaped enclosure even if followed by the delimiter and another enclosure mark) return str.split('').reverse().join('') &#125; var _pq = function (str) &#123; // preg_quote() return String(str).replace(/([\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\&#123;\\&#125;=!&lt;&gt;\\|:])/g, '\\\\$1') &#125; delimiter = delimiter || ',' enclosure = enclosure || '\"' escape = escape || '\\\\' var pqEnc = _pq(enclosure) var pqEsc = _pq(escape) input = input .replace(new RegExp('^\\\\s*' + pqEnc), '') .replace(new RegExp(pqEnc + '\\\\s*$'), '') // PHP behavior may differ by including whitespace even outside of the enclosure input = _backwards(input) .split(new RegExp(pqEnc + '\\\\s*' + _pq(delimiter) + '\\\\s*' + pqEnc + '(?!' + pqEsc + ')', 'g')) .reverse() for (i = 0, inpLen = input.length; i &lt; inpLen; i++) &#123; output.push(_backwards(input[i]) .replace(new RegExp(pqEsc + pqEnc, 'g'), enclosure)) &#125; return output&#125;","raw":null,"content":null},{"title":"PHP's sscanf in JavaScript","date":"2016-05-11T20:27:50.018Z","updated":"2016-05-11T20:27:50.018Z","comments":true,"path":"php/strings/sscanf/index.html","permalink":"http://locutus.io/php/strings/sscanf/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273module.exports = function sscanf (str, format) &#123; // discuss at: http://locutus.io/php/sscanf/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: sscanf('SN/2350001', 'SN/%d') // returns 1: [2350001] // example 2: var myVar = &#123;&#125; // example 2: sscanf('SN/2350001', 'SN/%d', myVar) // example 2: var $result = myVar.value // returns 2: 2350001 // example 3: sscanf(\"10--20\", \"%2$d--%1$d\") // Must escape '$' in PHP, but not JS // returns 3: [20, 10] var retArr = [] var _NWS = /\\S/ var args = arguments var digit var _setExtraConversionSpecs = function (offset) &#123; // Since a mismatched character sets us off track from future // legitimate finds, we just scan // to the end for any other conversion specifications (besides a percent literal), // setting them to null // sscanf seems to disallow all conversion specification components (of sprintf) // except for type specifiers // Do not allow % in last char. class // var matches = format.match(/%[+-]?([ 0]|'.)?-?\\d*(\\.\\d+)?[bcdeufFosxX]/g); // Do not allow % in last char. class: var matches = format.slice(offset).match(/%[cdeEufgosxX]/g) // b, F,G give errors in PHP, but 'g', though also disallowed, doesn't if (matches) &#123; var lgth = matches.length while (lgth--) &#123; retArr.push(null) &#125; &#125; return _finish() &#125; var _finish = function () &#123; if (args.length === 2) &#123; return retArr &#125; for (var i = 0; i &lt; retArr.length; ++i) &#123; args[i + 2].value = retArr[i] &#125; return i &#125; var _addNext = function (j, regex, cb) &#123; if (assign) &#123; var remaining = str.slice(j) var check = width ? remaining.substr(0, width) : remaining var match = regex.exec(check) // @todo: Make this more readable var key = digit !== undefined ? digit : retArr.length var testNull = retArr[key] = match ? (cb ? cb.apply(null, match) : match[0]) : null if (testNull === null) &#123; throw new Error('No match in string') &#125; return j + match[0].length &#125; return j &#125; if (arguments.length &lt; 2) &#123; throw new Error('Not enough arguments passed to sscanf') &#125; // PROCESS for (var i = 0, j = 0; i &lt; format.length; i++) &#123; var width = 0 var assign = true if (format.charAt(i) === '%') &#123; if (format.charAt(i + 1) === '%') &#123; if (str.charAt(j) === '%') &#123; // a matched percent literal // skip beyond duplicated percent ++i ++j continue &#125; // Format indicated a percent literal, but not actually present return _setExtraConversionSpecs(i + 2) &#125; // CHARACTER FOLLOWING PERCENT IS NOT A PERCENT // We need 'g' set to get lastIndex var prePattern = new RegExp('^(?:(\\\\d+)\\\\$)?(\\\\*)?(\\\\d*)([hlL]?)', 'g') var preConvs = prePattern.exec(format.slice(i + 1)) var tmpDigit = digit if (tmpDigit &amp;&amp; preConvs[1] === undefined) &#123; var msg = 'All groups in sscanf() must be expressed as numeric if ' msg += 'any have already been used' throw new Error(msg) &#125; digit = preConvs[1] ? parseInt(preConvs[1], 10) - 1 : undefined assign = !preConvs[2] width = parseInt(preConvs[3], 10) var sizeCode = preConvs[4] i += prePattern.lastIndex // @todo: Does PHP do anything with these? Seems not to matter if (sizeCode) &#123; // This would need to be processed later switch (sizeCode) &#123; case 'h': case 'l': case 'L': // Treats subsequent as short int (for d,i,n) or unsigned short int (for o,u,x) // Treats subsequent as long int (for d,i,n), or unsigned long int (for o,u,x); // or as double (for e,f,g) instead of float or wchar_t instead of char // Treats subsequent as long double (for e,f,g) break default: throw new Error('Unexpected size specifier in sscanf()!') &#125; &#125; // PROCESS CHARACTER try &#123; // For detailed explanations, see http://web.archive.org/web/20031128125047/http://www.uwm.edu/cgi-bin/IMT/wwwman?topic=scanf%283%29&amp;msection= // Also http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sscanf.html // p, S, C arguments in C function not available // DOCUMENTED UNDER SSCANF switch (format.charAt(i + 1)) &#123; case 'F': // Not supported in PHP sscanf; the argument is treated as a float, and // presented as a floating-point number (non-locale aware) // sscanf doesn't support locales, so no need for two (see %f) break case 'g': // Not supported in PHP sscanf; shorter of %e and %f // Irrelevant to input conversion break case 'G': // Not supported in PHP sscanf; shorter of %E and %f // Irrelevant to input conversion break case 'b': // Not supported in PHP sscanf; the argument is treated as an integer, // and presented as a binary number // Not supported - couldn't distinguish from other integers break case 'i': // Integer with base detection (Equivalent of 'd', but base 0 instead of 10) var pattern = /([+-])?(?:(?:0x([\\da-fA-F]+))|(?:0([0-7]+))|(\\d+))/ j = _addNext(j, pattern, function (num, sign, hex, oct, dec) &#123; return hex ? parseInt(num, 16) : oct ? parseInt(num, 8) : parseInt(num, 10) &#125;) break case 'n': // Number of characters processed so far retArr[digit !== undefined ? digit : retArr.length - 1] = j break // DOCUMENTED UNDER SPRINTF case 'c': // Get character; suppresses skipping over whitespace! // (but shouldn't be whitespace in format anyways, so no difference here) // Non-greedy match j = _addNext(j, new RegExp('.&#123;1,' + (width || 1) + '&#125;')) break case 'D': case 'd': // sscanf documented decimal number; equivalent of 'd'; // Optionally signed decimal integer j = _addNext(j, /([+-])?(?:0*)(\\d+)/, function (num, sign, dec) &#123; // Ignores initial zeroes, unlike %i and parseInt() var decInt = parseInt((sign || '') + dec, 10) if (decInt &lt; 0) &#123; // PHP also won't allow less than -2147483648 // integer overflow with negative return decInt &lt; -2147483648 ? -2147483648 : decInt &#125; else &#123; // PHP also won't allow greater than -2147483647 return decInt &lt; 2147483647 ? decInt : 2147483647 &#125; &#125;) break case 'f': case 'E': case 'e': // Although sscanf doesn't support locales, // this is used instead of '%F'; seems to be same as %e // These don't discriminate here as both allow exponential float of either case j = _addNext(j, /([+-])?(?:0*)(\\d*\\.?\\d*(?:[eE]?\\d+)?)/, function (num, sign, dec) &#123; if (dec === '.') &#123; return null &#125; // Ignores initial zeroes, unlike %i and parseFloat() return parseFloat((sign || '') + dec) &#125;) break case 'u': // unsigned decimal integer // We won't deal with integer overflows due to signs j = _addNext(j, /([+-])?(?:0*)(\\d+)/, function (num, sign, dec) &#123; // Ignores initial zeroes, unlike %i and parseInt() var decInt = parseInt(dec, 10) if (sign === '-') &#123; // PHP also won't allow greater than 4294967295 // integer overflow with negative return 4294967296 - decInt &#125; else &#123; return decInt &lt; 4294967295 ? decInt : 4294967295 &#125; &#125;) break case 'o': // Octal integer // @todo: add overflows as above? j = _addNext(j, /([+-])?(?:0([0-7]+))/, function (num, sign, oct) &#123; return parseInt(num, 8) &#125;) break case 's': // Greedy match j = _addNext(j, /\\S+/) break case 'X': case 'x': // Same as 'x'? // @todo: add overflows as above? // Initial 0x not necessary here j = _addNext(j, /([+-])?(?:(?:0x)?([\\da-fA-F]+))/, function (num, sign, hex) &#123; return parseInt(num, 16) &#125;) break case '': // If no character left in expression throw new Error('Missing character after percent mark in sscanf() format argument') default: throw new Error('Unrecognized character after percent mark in sscanf() format argument') &#125; &#125; catch (e) &#123; if (e === 'No match in string') &#123; // Allow us to exit return _setExtraConversionSpecs(i + 2) &#125; // Calculate skipping beyond initial percent too &#125; ++i &#125; else if (format.charAt(i) !== str.charAt(j)) &#123; // @todo: Double-check i whitespace ignored in string and/or formats _NWS.lastIndex = 0 if ((_NWS) .test(str.charAt(j)) || str.charAt(j) === '') &#123; // Whitespace doesn't need to be an exact match) return _setExtraConversionSpecs(i + 1) &#125; else &#123; // Adjust strings when encounter non-matching whitespace, // so they align in future checks above // Ok to replace with j++;? str = str.slice(0, j) + str.slice(j + 1) i-- &#125; &#125; else &#123; j++ &#125; &#125; // POST-PROCESSING return _finish()&#125;","raw":null,"content":null},{"title":"PHP's sprintf in JavaScript","date":"2016-05-11T20:27:50.018Z","updated":"2016-05-11T20:27:50.018Z","comments":true,"path":"php/strings/sprintf/index.html","permalink":"http://locutus.io/php/strings/sprintf/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190module.exports = function sprintf () &#123; // discuss at: http://locutus.io/php/sprintf/ // original by: Ash Searle (http://hexmen.com/blog/) // improved by: Michael White (http://getsprink.com) // improved by: Jack // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Dj // improved by: Allidylls // input by: Paulo Freitas // input by: Brett Zamir (http://brett-zamir.me) // example 1: sprintf(\"%01.2f\", 123.1) // returns 1: '123.10' // example 2: sprintf(\"[%10s]\", 'monkey') // returns 2: '[ monkey]' // example 3: sprintf(\"[%'#10s]\", 'monkey') // returns 3: '[####monkey]' // example 4: sprintf(\"%d\", 123456789012345) // returns 4: '123456789012345' // example 5: sprintf('%-03s', 'E') // returns 5: 'E00' var regex = /%%|%(\\d+\\$)?([\\-+'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(?:\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuideEfFgG])/g var a = arguments var i = 0 var format = a[i++] var _pad = function (str, len, chr, leftJustify) &#123; if (!chr) &#123; chr = ' ' &#125; var padding = (str.length &gt;= len) ? '' : new Array(1 + len - str.length &gt;&gt;&gt; 0).join(chr) return leftJustify ? str + padding : padding + str &#125; var justify = function (value, prefix, leftJustify, minWidth, zeroPad, customPadChar) &#123; var diff = minWidth - value.length if (diff &gt; 0) &#123; if (leftJustify || !zeroPad) &#123; value = _pad(value, minWidth, customPadChar, leftJustify) &#125; else &#123; value = [ value.slice(0, prefix.length), _pad('', diff, '0', true), value.slice(prefix.length) ].join('') &#125; &#125; return value &#125; var _formatBaseX = function (value, base, prefix, leftJustify, minWidth, precision, zeroPad) &#123; // Note: casts negative numbers to positive ones var number = value &gt;&gt;&gt; 0 prefix = (prefix &amp;&amp; number &amp;&amp; &#123; '2': '0b', '8': '0', '16': '0x' &#125;[base]) || '' value = prefix + _pad(number.toString(base), precision || 0, '0', false) return justify(value, prefix, leftJustify, minWidth, zeroPad) &#125; // _formatString() var _formatString = function (value, leftJustify, minWidth, precision, zeroPad, customPadChar) &#123; if (precision !== null &amp;&amp; precision !== undefined) &#123; value = value.slice(0, precision) &#125; return justify(value, '', leftJustify, minWidth, zeroPad, customPadChar) &#125; // doFormat() var doFormat = function (substring, valueIndex, flags, minWidth, precision, type) &#123; var number, prefix, method, textTransform, value if (substring === '%%') &#123; return '%' &#125; // parse flags var leftJustify = false var positivePrefix = '' var zeroPad = false var prefixBaseX = false var customPadChar = ' ' var flagsl = flags.length var j for (j = 0; j &lt; flagsl; j++) &#123; switch (flags.charAt(j)) &#123; case ' ': positivePrefix = ' ' break case '+': positivePrefix = '+' break case '-': leftJustify = true break case \"'\": customPadChar = flags.charAt(j + 1) break case '0': zeroPad = true customPadChar = '0' break case '#': prefixBaseX = true break &#125; &#125; // parameters may be null, undefined, empty-string or real valued // we want to ignore null, undefined and empty-string values if (!minWidth) &#123; minWidth = 0 &#125; else if (minWidth === '*') &#123; minWidth = +a[i++] &#125; else if (minWidth.charAt(0) === '*') &#123; minWidth = +a[minWidth.slice(1, -1)] &#125; else &#123; minWidth = +minWidth &#125; // Note: undocumented perl feature: if (minWidth &lt; 0) &#123; minWidth = -minWidth leftJustify = true &#125; if (!isFinite(minWidth)) &#123; throw new Error('sprintf: (minimum-)width must be finite') &#125; if (!precision) &#123; precision = 'fFeE'.indexOf(type) &gt; -1 ? 6 : (type === 'd') ? 0 : undefined &#125; else if (precision === '*') &#123; precision = +a[i++] &#125; else if (precision.charAt(0) === '*') &#123; precision = +a[precision.slice(1, -1)] &#125; else &#123; precision = +precision &#125; // grab value using valueIndex if required? value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++] switch (type) &#123; case 's': return _formatString(value + '', leftJustify, minWidth, precision, zeroPad, customPadChar) case 'c': return _formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad) case 'b': return _formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad) case 'o': return _formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad) case 'x': return _formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad) case 'X': return _formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad) .toUpperCase() case 'u': return _formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad) case 'i': case 'd': number = +value || 0 // Plain Math.round doesn't just truncate number = Math.round(number - number % 1) prefix = number &lt; 0 ? '-' : positivePrefix value = prefix + _pad(String(Math.abs(number)), precision, '0', false) return justify(value, prefix, leftJustify, minWidth, zeroPad) case 'e': case 'E': case 'f': // @todo: Should handle locales (as per setlocale) case 'F': case 'g': case 'G': number = +value prefix = number &lt; 0 ? '-' : positivePrefix method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())] textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2] value = prefix + Math.abs(number)[method](precision) return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]() default: return substring &#125; &#125; return format.replace(regex, doFormat)&#125;","raw":null,"content":null},{"title":"PHP's split in JavaScript","date":"2016-05-11T20:27:50.018Z","updated":"2016-05-11T20:27:50.018Z","comments":true,"path":"php/strings/split/index.html","permalink":"http://locutus.io/php/strings/split/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function split (delimiter, string) &#123; // discuss at: http://locutus.io/php/split/ // original by: Kevin van Zonneveld (http://kvz.io) // example 1: split(' ', 'Kevin van Zonneveld') // returns 1: ['Kevin', 'van', 'Zonneveld'] var explode = require('../strings/explode') return explode(delimiter, string)&#125;","raw":null,"content":null},{"title":"PHP's soundex in JavaScript","date":"2016-05-11T20:27:50.018Z","updated":"2016-05-11T20:27:50.018Z","comments":true,"path":"php/strings/soundex/index.html","permalink":"http://locutus.io/php/strings/soundex/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364module.exports = function soundex (str) &#123; // discuss at: http://locutus.io/php/soundex/ // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // original by: Arnout Kazemier (http://www.3rd-Eden.com) // improved by: Jack // improved by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // revised by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // example 1: soundex('Kevin') // returns 1: 'K150' // example 2: soundex('Ellery') // returns 2: 'E460' // example 3: soundex('Euler') // returns 3: 'E460' str = (str + '').toUpperCase() if (!str) &#123; return '' &#125; var sdx = [0, 0, 0, 0] var m = &#123; B: 1, F: 1, P: 1, V: 1, C: 2, G: 2, J: 2, K: 2, Q: 2, S: 2, X: 2, Z: 2, D: 3, T: 3, L: 4, M: 5, N: 5, R: 6 &#125; var i = 0 var j var s = 0 var c var p while ((c = str.charAt(i++)) &amp;&amp; s &lt; 4) &#123; if ((j = m[c])) &#123; if (j !== p) &#123; sdx[s++] = p = j &#125; &#125; else &#123; s += i === 1 p = 0 &#125; &#125; sdx[0] = str.charAt(0) return sdx.join('')&#125;","raw":null,"content":null},{"title":"PHP's similar_text in JavaScript","date":"2016-05-11T20:27:50.018Z","updated":"2016-05-11T20:27:50.018Z","comments":true,"path":"php/strings/similar_text/index.html","permalink":"http://locutus.io/php/strings/similar_text/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465module.exports = function similar_text (first, second, percent) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/similar_text/ // original by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // bugfixed by: Chris McMacken // bugfixed by: Jarkko Rantavuori original by findings in stackoverflow (http://stackoverflow.com/questions/14136349/how-does-similar-text-work) // improved by: Markus Padourek (taken from http://www.kevinhq.com/2012/06/php-similartext-function-in-javascript_16.html) // example 1: similar_text('Hello World!', 'Hello locutus!') // returns 1: 8 // example 2: similar_text('Hello World!', null) // returns 2: 0 if (first === null || second === null || typeof first === 'undefined' || typeof second === 'undefined') &#123; return 0 &#125; first += '' second += '' var pos1 = 0 var pos2 = 0 var max = 0 var firstLength = first.length var secondLength = second.length var p var q var l var sum for (p = 0; p &lt; firstLength; p++) &#123; for (q = 0; q &lt; secondLength; q++) &#123; for (l = 0; (p + l &lt; firstLength) &amp;&amp; (q + l &lt; secondLength) &amp;&amp; (first.charAt(p + l) === second.charAt(q + l)); l++) &#123; // eslint-disable-line max-len // @todo: ^-- break up this crazy for loop and put the logic in its body &#125; if (l &gt; max) &#123; max = l pos1 = p pos2 = q &#125; &#125; &#125; sum = max if (sum) &#123; if (pos1 &amp;&amp; pos2) &#123; sum += similar_text(first.substr(0, pos1), second.substr(0, pos2)) &#125; if ((pos1 + max &lt; firstLength) &amp;&amp; (pos2 + max &lt; secondLength)) &#123; sum += similar_text( first.substr(pos1 + max, firstLength - pos1 - max), second.substr(pos2 + max, secondLength - pos2 - max)) &#125; &#125; if (!percent) &#123; return sum &#125; return (sum * 200) / (firstLength + secondLength)&#125;","raw":null,"content":null},{"title":"PHP's sha1_file in JavaScript","date":"2016-05-11T20:27:50.006Z","updated":"2016-05-11T20:27:50.006Z","comments":true,"path":"php/strings/sha1_file/index.html","permalink":"http://locutus.io/php/strings/sha1_file/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function sha1_file (str_filename) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/sha1_file/ // original by: Kevin van Zonneveld (http://kvz.io) // note 1: Relies on file_get_contents which does not work in the browser, so Node only. // note 2: Keep in mind that in accordance with PHP, the whole file is buffered and then // note 2: hashed. We'd recommend Node's native crypto modules for faster and more // note 2: efficient hashing // example 1: sha1_file('test/never-change.txt') // returns 1: '0ea65a1f4b4d69712affc58240932f3eb8a2af66' var fileGetContents = require('../filesystem/file_get_contents') var sha1 = require('../strings/sha1') var buf = fileGetContents(str_filename) if (buf === false) &#123; return false &#125; return sha1(buf)&#125;","raw":null,"content":null},{"title":"PHP's sha1 in JavaScript","date":"2016-05-11T20:27:50.014Z","updated":"2016-05-11T20:27:50.014Z","comments":true,"path":"php/strings/sha1/index.html","permalink":"http://locutus.io/php/strings/sha1/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154module.exports = function sha1 (str) &#123; // discuss at: http://locutus.io/php/sha1/ // original by: Webtoolkit.info (http://www.webtoolkit.info/) // improved by: Michael White (http://getsprink.com) // improved by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then // note 1: hashed. If available, we'd recommend using Node's native crypto modules directly // note 1: in a steaming fashion for faster and more efficient hashing // example 1: sha1('Kevin van Zonneveld') // returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897' var hash try &#123; var crypto = require('crypto') var sha1sum = crypto.createHash('sha1') sha1sum.update(str) hash = sha1sum.digest('hex') &#125; catch (e) &#123; hash = undefined &#125; if (hash !== undefined) &#123; return hash &#125; var _rotLeft = function (n, s) &#123; var t4 = (n &lt;&lt; s) | (n &gt;&gt;&gt; (32 - s)) return t4 &#125; var _cvtHex = function (val) &#123; var str = '' var i var v for (i = 7; i &gt;= 0; i--) &#123; v = (val &gt;&gt;&gt; (i * 4)) &amp; 0x0f str += v.toString(16) &#125; return str &#125; var blockstart var i, j var W = new Array(80) var H0 = 0x67452301 var H1 = 0xEFCDAB89 var H2 = 0x98BADCFE var H3 = 0x10325476 var H4 = 0xC3D2E1F0 var A, B, C, D, E var temp // utf8_encode str = unescape(encodeURIComponent(str)) var strLen = str.length var wordArray = [] for (i = 0; i &lt; strLen - 3; i += 4) &#123; j = str.charCodeAt(i) &lt;&lt; 24 | str.charCodeAt(i + 1) &lt;&lt; 16 | str.charCodeAt(i + 2) &lt;&lt; 8 | str.charCodeAt(i + 3) wordArray.push(j) &#125; switch (strLen % 4) &#123; case 0: i = 0x080000000 break case 1: i = str.charCodeAt(strLen - 1) &lt;&lt; 24 | 0x0800000 break case 2: i = str.charCodeAt(strLen - 2) &lt;&lt; 24 | str.charCodeAt(strLen - 1) &lt;&lt; 16 | 0x08000 break case 3: i = str.charCodeAt(strLen - 3) &lt;&lt; 24 | str.charCodeAt(strLen - 2) &lt;&lt; 16 | str.charCodeAt(strLen - 1) &lt;&lt; 8 | 0x80 break &#125; wordArray.push(i) while ((wordArray.length % 16) !== 14) &#123; wordArray.push(0) &#125; wordArray.push(strLen &gt;&gt;&gt; 29) wordArray.push((strLen &lt;&lt; 3) &amp; 0x0ffffffff) for (blockstart = 0; blockstart &lt; wordArray.length; blockstart += 16) &#123; for (i = 0; i &lt; 16; i++) &#123; W[i] = wordArray[blockstart + i] &#125; for (i = 16; i &lt;= 79; i++) &#123; W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1) &#125; A = H0 B = H1 C = H2 D = H3 E = H4 for (i = 0; i &lt;= 19; i++) &#123; temp = (_rotLeft(A, 5) + ((B &amp; C) | (~B &amp; D)) + E + W[i] + 0x5A827999) &amp; 0x0ffffffff E = D D = C C = _rotLeft(B, 30) B = A A = temp &#125; for (i = 20; i &lt;= 39; i++) &#123; temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) &amp; 0x0ffffffff E = D D = C C = _rotLeft(B, 30) B = A A = temp &#125; for (i = 40; i &lt;= 59; i++) &#123; temp = (_rotLeft(A, 5) + ((B &amp; C) | (B &amp; D) | (C &amp; D)) + E + W[i] + 0x8F1BBCDC) &amp; 0x0ffffffff E = D D = C C = _rotLeft(B, 30) B = A A = temp &#125; for (i = 60; i &lt;= 79; i++) &#123; temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) &amp; 0x0ffffffff E = D D = C C = _rotLeft(B, 30) B = A A = temp &#125; H0 = (H0 + A) &amp; 0x0ffffffff H1 = (H1 + B) &amp; 0x0ffffffff H2 = (H2 + C) &amp; 0x0ffffffff H3 = (H3 + D) &amp; 0x0ffffffff H4 = (H4 + E) &amp; 0x0ffffffff &#125; temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4) return temp.toLowerCase()&#125;","raw":null,"content":null},{"title":"PHP's setlocale in JavaScript","date":"2016-05-11T20:27:50.006Z","updated":"2016-05-11T20:27:50.006Z","comments":true,"path":"php/strings/setlocale/index.html","permalink":"http://locutus.io/php/strings/setlocale/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347module.exports = function setlocale (category, locale) &#123; // discuss at: http://locutus.io/php/setlocale/ // original by: Brett Zamir (http://brett-zamir.me) // original by: Blues (http://hacks.bluesmoon.info/strftime/strftime.js) // original by: YUI Library (http://developer.yahoo.com/yui/docs/YAHOO.util.DateLocale.html) // note 1: Is extensible, but currently only implements locales en, // note 1: en_US, en_GB, en_AU, fr, and fr_CA for LC_TIME only; C for LC_CTYPE; // note 1: C and en for LC_MONETARY/LC_NUMERIC; en for LC_COLLATE // note 1: Uses global: locutus to store locale info // note 1: Consider using http://demo.icu-project.org/icu-bin/locexp as basis for localization (as in i18n_loc_set_default()) // note 2: This function tries to establish the locale via the `window` global. // note 2: This feature will not work in Node and hence is Browser-only // example 1: setlocale('LC_ALL', 'en_US') // returns 1: 'en_US' var getenv = require('../info/getenv') var categ = '' var cats = [] var i = 0 var _copy = function _copy (orig) &#123; if (orig instanceof RegExp) &#123; return new RegExp(orig) &#125; else if (orig instanceof Date) &#123; return new Date(orig) &#125; var newObj = &#123;&#125; for (var i in orig) &#123; if (typeof orig[i] === 'object') &#123; newObj[i] = _copy(orig[i]) &#125; else &#123; newObj[i] = orig[i] &#125; &#125; return newObj &#125; // Function usable by a ngettext implementation (apparently not an accessible part of setlocale(), // but locale-specific) See http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms // though amended with others from https://developer.mozilla.org/En/Localization_and_Plurals (new // categories noted with \"MDC\" below, though not sure of whether there is a convention for the // relative order of these newer groups as far as ngettext) The function name indicates the number // of plural forms (nplural) Need to look into http://cldr.unicode.org/ (maybe future JavaScript); // Dojo has some functions (under new BSD), including JSON conversions of LDML XML from CLDR: // http://bugs.dojotoolkit.org/browser/dojo/trunk/cldr and docs at // http://api.dojotoolkit.org/jsdoc/HEAD/dojo.cldr // var _nplurals1 = function (n) &#123; // // e.g., Japanese // return 0 // &#125; var _nplurals2a = function (n) &#123; // e.g., English return n !== 1 ? 1 : 0 &#125; var _nplurals2b = function (n) &#123; // e.g., French return n &gt; 1 ? 1 : 0 &#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; // Reconcile Windows vs. *nix locale names? // Allow different priority orders of languages, esp. if implement gettext as in // LANGUAGE env. var.? (e.g., show German if French is not available) if (!$locutus.php.locales || !$locutus.php.locales.fr_CA || !$locutus.php.locales.fr_CA.LC_TIME || !$locutus.php.locales.fr_CA.LC_TIME.x) &#123; // Can add to the locales $locutus.php.locales = &#123;&#125; $locutus.php.locales.en = &#123; 'LC_COLLATE': function (str1, str2) &#123; // @todo: This one taken from strcmp, but need for other locales; we don't use localeCompare // since its locale is not settable return (str1 === str2) ? 0 : ((str1 &gt; str2) ? 1 : -1) &#125;, 'LC_CTYPE': &#123; // Need to change any of these for English as opposed to C? an: /^[A-Za-z\\d]+$/g, al: /^[A-Za-z]+$/g, ct: /^[\\u0000-\\u001F\\u007F]+$/g, dg: /^[\\d]+$/g, gr: /^[\\u0021-\\u007E]+$/g, lw: /^[a-z]+$/g, pr: /^[\\u0020-\\u007E]+$/g, pu: /^[\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E]+$/g, sp: /^[\\f\\n\\r\\t\\v ]+$/g, up: /^[A-Z]+$/g, xd: /^[A-Fa-f\\d]+$/g, CODESET: 'UTF-8', // Used by sql_regcase lower: 'abcdefghijklmnopqrstuvwxyz', upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' &#125;, 'LC_TIME': &#123; // Comments include nl_langinfo() constant equivalents and any // changes from Blues' implementation a: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // ABDAY_ A: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // DAY_ b: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // ABMON_ B: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ], // MON_ c: '%a %d %b %Y %r %Z', // D_T_FMT // changed %T to %r per results p: ['AM', 'PM'], // AM_STR/PM_STR P: ['am', 'pm'], // Not available in nl_langinfo() r: '%I:%M:%S %p', // T_FMT_AMPM (Fixed for all locales) x: '%m/%d/%Y', // D_FMT // switched order of %m and %d; changed %y to %Y (C uses %y) X: '%r', // T_FMT // changed from %T to %r (%T is default for C, not English US) // Following are from nl_langinfo() or http://www.cptec.inpe.br/sx4/sx4man2/g1ab02e/strftime.4.html alt_digits: '', // e.g., ordinal ERA: '', ERA_YEAR: '', ERA_D_T_FMT: '', ERA_D_FMT: '', ERA_T_FMT: '' &#125;, // Assuming distinction between numeric and monetary is thus: // See below for C locale 'LC_MONETARY': &#123; // based on Windows \"english\" (English_United States.1252) locale int_curr_symbol: 'USD', currency_symbol: '$', mon_decimal_point: '.', mon_thousands_sep: ',', mon_grouping: [3], // use mon_thousands_sep; \"\" for no grouping; additional array members // indicate successive group lengths after first group // (e.g., if to be 1,23,456, could be [3, 2]) positive_sign: '', negative_sign: '-', int_frac_digits: 2, // Fractional digits only for money defaults? frac_digits: 2, p_cs_precedes: 1, // positive currency symbol follows value = 0; precedes value = 1 p_sep_by_space: 0, // 0: no space between curr. symbol and value; 1: space sep. them unless symb. // and sign are adjacent then space sep. them from value; 2: space sep. sign // and value unless symb. and sign are adjacent then space separates n_cs_precedes: 1, // see p_cs_precedes n_sep_by_space: 0, // see p_sep_by_space p_sign_posn: 3, // 0: parentheses surround quantity and curr. symbol; 1: sign precedes them; // 2: sign follows them; 3: sign immed. precedes curr. symbol; 4: sign immed. // succeeds curr. symbol n_sign_posn: 0 // see p_sign_posn &#125;, 'LC_NUMERIC': &#123; // based on Windows \"english\" (English_United States.1252) locale decimal_point: '.', thousands_sep: ',', grouping: [3] // see mon_grouping, but for non-monetary values (use thousands_sep) &#125;, 'LC_MESSAGES': &#123; YESEXPR: '^[yY].*', NOEXPR: '^[nN].*', YESSTR: '', NOSTR: '' &#125;, nplurals: _nplurals2a &#125; $locutus.php.locales.en_US = _copy($locutus.php.locales.en) $locutus.php.locales.en_US.LC_TIME.c = '%a %d %b %Y %r %Z' $locutus.php.locales.en_US.LC_TIME.x = '%D' $locutus.php.locales.en_US.LC_TIME.X = '%r' // The following are based on *nix settings $locutus.php.locales.en_US.LC_MONETARY.int_curr_symbol = 'USD ' $locutus.php.locales.en_US.LC_MONETARY.p_sign_posn = 1 $locutus.php.locales.en_US.LC_MONETARY.n_sign_posn = 1 $locutus.php.locales.en_US.LC_MONETARY.mon_grouping = [3, 3] $locutus.php.locales.en_US.LC_NUMERIC.thousands_sep = '' $locutus.php.locales.en_US.LC_NUMERIC.grouping = [] $locutus.php.locales.en_GB = _copy($locutus.php.locales.en) $locutus.php.locales.en_GB.LC_TIME.r = '%l:%M:%S %P %Z' $locutus.php.locales.en_AU = _copy($locutus.php.locales.en_GB) // Assume C locale is like English (?) (We need C locale for LC_CTYPE) $locutus.php.locales.C = _copy($locutus.php.locales.en) $locutus.php.locales.C.LC_CTYPE.CODESET = 'ANSI_X3.4-1968' $locutus.php.locales.C.LC_MONETARY = &#123; int_curr_symbol: '', currency_symbol: '', mon_decimal_point: '', mon_thousands_sep: '', mon_grouping: [], p_cs_precedes: 127, p_sep_by_space: 127, n_cs_precedes: 127, n_sep_by_space: 127, p_sign_posn: 127, n_sign_posn: 127, positive_sign: '', negative_sign: '', int_frac_digits: 127, frac_digits: 127 &#125; $locutus.php.locales.C.LC_NUMERIC = &#123; decimal_point: '.', thousands_sep: '', grouping: [] &#125; // D_T_FMT $locutus.php.locales.C.LC_TIME.c = '%a %b %e %H:%M:%S %Y' // D_FMT $locutus.php.locales.C.LC_TIME.x = '%m/%d/%y' // T_FMT $locutus.php.locales.C.LC_TIME.X = '%H:%M:%S' $locutus.php.locales.C.LC_MESSAGES.YESEXPR = '^[yY]' $locutus.php.locales.C.LC_MESSAGES.NOEXPR = '^[nN]' $locutus.php.locales.fr = _copy($locutus.php.locales.en) $locutus.php.locales.fr.nplurals = _nplurals2b $locutus.php.locales.fr.LC_TIME.a = ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'] $locutus.php.locales.fr.LC_TIME.A = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'] $locutus.php.locales.fr.LC_TIME.b = ['jan', 'f\\u00E9v', 'mar', 'avr', 'mai', 'jun', 'jui', 'ao\\u00FB', 'sep', 'oct', 'nov', 'd\\u00E9c' ] $locutus.php.locales.fr.LC_TIME.B = ['janvier', 'f\\u00E9vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao\\u00FBt', 'septembre', 'octobre', 'novembre', 'd\\u00E9cembre' ] $locutus.php.locales.fr.LC_TIME.c = '%a %d %b %Y %T %Z' $locutus.php.locales.fr.LC_TIME.p = ['', ''] $locutus.php.locales.fr.LC_TIME.P = ['', ''] $locutus.php.locales.fr.LC_TIME.x = '%d.%m.%Y' $locutus.php.locales.fr.LC_TIME.X = '%T' $locutus.php.locales.fr_CA = _copy($locutus.php.locales.fr) $locutus.php.locales.fr_CA.LC_TIME.x = '%Y-%m-%d' &#125; if (!$locutus.php.locale) &#123; $locutus.php.locale = 'en_US' // Try to establish the locale via the `window` global if (typeof window !== 'undefined' &amp;&amp; window.document) &#123; var d = window.document var NS_XHTML = 'http://www.w3.org/1999/xhtml' var NS_XML = 'http://www.w3.org/XML/1998/namespace' if (d.getElementsByTagNameNS &amp;&amp; d.getElementsByTagNameNS(NS_XHTML, 'html')[0]) &#123; if (d.getElementsByTagNameNS(NS_XHTML, 'html')[0].getAttributeNS &amp;&amp; d.getElementsByTagNameNS(NS_XHTML, 'html')[0].getAttributeNS(NS_XML, 'lang')) &#123; $locutus.php.locale = d.getElementsByTagName(NS_XHTML, 'html')[0] .getAttributeNS(NS_XML, 'lang') &#125; else if (d.getElementsByTagNameNS(NS_XHTML, 'html')[0].lang) &#123; // XHTML 1.0 only $locutus.php.locale = d.getElementsByTagNameNS(NS_XHTML, 'html')[0].lang &#125; &#125; else if (d.getElementsByTagName('html')[0] &amp;&amp; d.getElementsByTagName('html')[0].lang) &#123; $locutus.php.locale = d.getElementsByTagName('html')[0].lang &#125; &#125; &#125; // PHP-style $locutus.php.locale = $locutus.php.locale.replace('-', '_') // @todo: locale if declared locale hasn't been defined if (!($locutus.php.locale in $locutus.php.locales)) &#123; if ($locutus.php.locale.replace(/_[a-zA-Z]+$/, '') in $locutus.php.locales) &#123; $locutus.php.locale = $locutus.php.locale.replace(/_[a-zA-Z]+$/, '') &#125; &#125; if (!$locutus.php.localeCategories) &#123; $locutus.php.localeCategories = &#123; 'LC_COLLATE': $locutus.php.locale, // for string comparison, see strcoll() 'LC_CTYPE': $locutus.php.locale, // for character classification and conversion, for example strtoupper() 'LC_MONETARY': $locutus.php.locale, // for localeconv() 'LC_NUMERIC': $locutus.php.locale, // for decimal separator (See also localeconv()) 'LC_TIME': $locutus.php.locale, // for date and time formatting with strftime() // for system responses (available if PHP was compiled with libintl): 'LC_MESSAGES': $locutus.php.locale &#125; &#125; if (locale === null || locale === '') &#123; locale = getenv(category) || getenv('LANG') &#125; else if (Object.prototype.toString.call(locale) === '[object Array]') &#123; for (i = 0; i &lt; locale.length; i++) &#123; if (!(locale[i] in $locutus.php.locales)) &#123; if (i === locale.length - 1) &#123; // none found return false &#125; continue &#125; locale = locale[i] break &#125; &#125; // Just get the locale if (locale === '0' || locale === 0) &#123; if (category === 'LC_ALL') &#123; for (categ in $locutus.php.localeCategories) &#123; // Add \".UTF-8\" or allow \".@latint\", etc. to the end? cats.push(categ + '=' + $locutus.php.localeCategories[categ]) &#125; return cats.join(';') &#125; return $locutus.php.localeCategories[category] &#125; if (!(locale in $locutus.php.locales)) &#123; // Locale not found return false &#125; // Set and get locale if (category === 'LC_ALL') &#123; for (categ in $locutus.php.localeCategories) &#123; $locutus.php.localeCategories[categ] = locale &#125; &#125; else &#123; $locutus.php.localeCategories[category] = locale &#125; return locale&#125;","raw":null,"content":null},{"title":"PHP's rtrim in JavaScript","date":"2016-05-11T20:27:50.006Z","updated":"2016-05-11T20:27:50.006Z","comments":true,"path":"php/strings/rtrim/index.html","permalink":"http://locutus.io/php/strings/rtrim/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718module.exports = function rtrim (str, charlist) &#123; // discuss at: http://locutus.io/php/rtrim/ // original by: Kevin van Zonneveld (http://kvz.io) // input by: Erkekjetter // input by: rem // improved by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: rtrim(' Kevin van Zonneveld ') // returns 1: ' Kevin van Zonneveld' charlist = !charlist ? ' \\\\s\\u00A0' : (charlist + '') .replace(/([\\[\\]\\(\\)\\.\\?\\/\\*\\&#123;\\&#125;\\+\\$\\^:])/g, '\\\\$1') var re = new RegExp('[' + charlist + ']+$', 'g') return (str + '').replace(re, '')&#125;","raw":null,"content":null},{"title":"PHP's quotemeta in JavaScript","date":"2016-05-11T20:27:50.006Z","updated":"2016-05-11T20:27:50.006Z","comments":true,"path":"php/strings/quotemeta/index.html","permalink":"http://locutus.io/php/strings/quotemeta/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function quotemeta (str) &#123; // discuss at: http://locutus.io/php/quotemeta/ // original by: Paulo Freitas // example 1: quotemeta(\". + * ? ^ ( $ )\") // returns 1: '\\\\. \\\\+ \\\\* \\\\? \\\\^ \\\\( \\\\$ \\\\)' return (str + '') .replace(/([\\.\\\\\\+\\*\\?\\[\\^\\]\\$\\(\\)])/g, '\\\\$1')&#125;","raw":null,"content":null},{"title":"PHP's quoted_printable_encode in JavaScript","date":"2016-05-11T20:27:50.006Z","updated":"2016-05-11T20:27:50.006Z","comments":true,"path":"php/strings/quoted_printable_encode/index.html","permalink":"http://locutus.io/php/strings/quoted_printable_encode/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546module.exports = function quoted_printable_encode (str) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/quoted_printable_encode/ // original by: Theriault (https://github.com/Theriault) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Theriault (https://github.com/Theriault) // example 1: quoted_printable_encode('a=b=c') // returns 1: 'a=3Db=3Dc' // example 2: quoted_printable_encode('abc \\r\\n123 \\r\\n') // returns 2: 'abc =20\\r\\n123 =20\\r\\n' // example 3: quoted_printable_encode('0123456789012345678901234567890123456789012345678901234567890123456789012345') // returns 3: '012345678901234567890123456789012345678901234567890123456789012345678901234=\\r\\n5' // test: skip-2 var hexChars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'] var RFC2045Encode1IN = / \\r\\n|\\r\\n|[^!-&lt;&gt;-~ ]/gm var RFC2045Encode1OUT = function (sMatch) &#123; // Encode space before CRLF sequence to prevent spaces from being stripped // Keep hard line breaks intact; CRLF sequences if (sMatch.length &gt; 1) &#123; return sMatch.replace(' ', '=20') &#125; // Encode matching character var chr = sMatch.charCodeAt(0) return '=' + hexChars[((chr &gt;&gt;&gt; 4) &amp; 15)] + hexChars[(chr &amp; 15)] &#125; // Split lines to 75 characters; the reason it's 75 and not 76 is because softline breaks are // preceeded by an equal sign; which would be the 76th character. However, if the last line/string // was exactly 76 characters, then a softline would not be needed. PHP currently softbreaks // anyway; so this function replicates PHP. var RFC2045Encode2IN = /.&#123;1,72&#125;(?!\\r\\n)[^=]&#123;0,3&#125;/g var RFC2045Encode2OUT = function (sMatch) &#123; if (sMatch.substr(sMatch.length - 2) === '\\r\\n') &#123; return sMatch &#125; return sMatch + '=\\r\\n' &#125; str = str .replace(RFC2045Encode1IN, RFC2045Encode1OUT) .replace(RFC2045Encode2IN, RFC2045Encode2OUT) // Strip last softline break return str.substr(0, str.length - 3)&#125;","raw":null,"content":null},{"title":"PHP's quoted_printable_decode in JavaScript","date":"2016-05-11T20:27:50.006Z","updated":"2016-05-11T20:27:50.006Z","comments":true,"path":"php/strings/quoted_printable_decode/index.html","permalink":"http://locutus.io/php/strings/quoted_printable_decode/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function quoted_printable_decode (str) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/quoted_printable_decode/ // original by: Ole Vrijenhoek // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Theriault (https://github.com/Theriault) // reimplemented by: Theriault (https://github.com/Theriault) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: quoted_printable_decode('a=3Db=3Dc') // returns 1: 'a=b=c' // example 2: quoted_printable_decode('abc =20\\r\\n123 =20\\r\\n') // returns 2: 'abc \\r\\n123 \\r\\n' // example 3: quoted_printable_decode('012345678901234567890123456789012345678901234567890123456789012345678901234=\\r\\n56789') // returns 3: '01234567890123456789012345678901234567890123456789012345678901234567890123456789' // example 4: quoted_printable_decode(\"Lorem ipsum dolor sit amet=23, consectetur adipisicing elit\") // returns 4: 'Lorem ipsum dolor sit amet#, consectetur adipisicing elit' // Decodes all equal signs followed by two hex digits var RFC2045Decode1 = /=\\r\\n/gm // the RFC states against decoding lower case encodings, but following apparent PHP behavior var RFC2045Decode2IN = /=([0-9A-F]&#123;2&#125;)/gim // RFC2045Decode2IN = /=([0-9A-F]&#123;2&#125;)/gm, var RFC2045Decode2OUT = function (sMatch, sHex) &#123; return String.fromCharCode(parseInt(sHex, 16)) &#125; return str.replace(RFC2045Decode1, '') .replace(RFC2045Decode2IN, RFC2045Decode2OUT)&#125;","raw":null,"content":null},{"title":"PHP's printf in JavaScript","date":"2016-05-11T20:27:50.006Z","updated":"2016-05-11T20:27:50.006Z","comments":true,"path":"php/strings/printf/index.html","permalink":"http://locutus.io/php/strings/printf/index.html","excerpt":"","keywords":null,"text":"1234567891011121314module.exports = function printf () &#123; // discuss at: http://locutus.io/php/printf/ // original by: Ash Searle (http://hexmen.com/blog/) // improved by: Michael White (http://getsprink.com) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: printf(\"%01.2f\", 123.1) // returns 1: 6 var sprintf = require('../strings/sprintf') var echo = require('../strings/echo') var ret = sprintf.apply(this, arguments) echo(ret) return ret.length&#125;","raw":null,"content":null},{"title":"PHP's parse_str in JavaScript","date":"2016-05-11T20:27:50.002Z","updated":"2016-05-11T20:27:50.002Z","comments":true,"path":"php/strings/parse_str/index.html","permalink":"http://locutus.io/php/strings/parse_str/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132module.exports = function parse_str (str, array) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/parse_str/ // original by: Cagri Ekin // improved by: Michael White (http://getsprink.com) // improved by: Jack // improved by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: stag019 // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: MIO_KODUKI (http://mio-koduki.blogspot.com/) // reimplemented by: stag019 // input by: Dreamer // input by: Zaide (http://zaidesthings.com/) // input by: David Pesta (http://davidpesta.com/) // input by: jeicquest // note 1: When no argument is specified, will put variables in global scope. // note 1: When a particular argument has been passed, and the // note 1: returned value is different parse_str of PHP. // note 1: For example, a=b=c&amp;d====c // example 1: var $arr = &#123;&#125; // example 1: parse_str('first=foo&amp;second=bar', $arr) // example 1: var $result = $arr // returns 1: &#123; first: 'foo', second: 'bar' &#125; // example 2: var $arr = &#123;&#125; // example 2: parse_str('str_a=Jack+and+Jill+didn%27t+see+the+well.', $arr) // example 2: var $result = $arr // returns 2: &#123; str_a: \"Jack and Jill didn't see the well.\" &#125; // example 3: var $abc = &#123;3:'a'&#125; // example 3: parse_str('a[b][\"c\"]=def&amp;a[q]=t+5', $abc) // example 3: var $result = $abc // returns 3: &#123;\"3\":\"a\",\"a\":&#123;\"b\":&#123;\"c\":\"def\"&#125;,\"q\":\"t 5\"&#125;&#125; var strArr = String(str).replace(/^&amp;/, '').replace(/&amp;$/, '').split('&amp;') var sal = strArr.length var i var j var ct var p var lastObj var obj var undef var chr var tmp var key var value var postLeftBracketPos var keys var keysLen var _fixStr = function (str) &#123; return decodeURIComponent(str.replace(/\\+/g, '%20')) &#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; if (!array) &#123; array = $global &#125; for (i = 0; i &lt; sal; i++) &#123; tmp = strArr[i].split('=') key = _fixStr(tmp[0]) value = (tmp.length &lt; 2) ? '' : _fixStr(tmp[1]) while (key.charAt(0) === ' ') &#123; key = key.slice(1) &#125; if (key.indexOf('\\x00') &gt; -1) &#123; key = key.slice(0, key.indexOf('\\x00')) &#125; if (key &amp;&amp; key.charAt(0) !== '[') &#123; keys = [] postLeftBracketPos = 0 for (j = 0; j &lt; key.length; j++) &#123; if (key.charAt(j) === '[' &amp;&amp; !postLeftBracketPos) &#123; postLeftBracketPos = j + 1 &#125; else if (key.charAt(j) === ']') &#123; if (postLeftBracketPos) &#123; if (!keys.length) &#123; keys.push(key.slice(0, postLeftBracketPos - 1)) &#125; keys.push(key.substr(postLeftBracketPos, j - postLeftBracketPos)) postLeftBracketPos = 0 if (key.charAt(j + 1) !== '[') &#123; break &#125; &#125; &#125; &#125; if (!keys.length) &#123; keys = [key] &#125; for (j = 0; j &lt; keys[0].length; j++) &#123; chr = keys[0].charAt(j) if (chr === ' ' || chr === '.' || chr === '[') &#123; keys[0] = keys[0].substr(0, j) + '_' + keys[0].substr(j + 1) &#125; if (chr === '[') &#123; break &#125; &#125; obj = array for (j = 0, keysLen = keys.length; j &lt; keysLen; j++) &#123; key = keys[j].replace(/^['\"]/, '').replace(/['\"]$/, '') lastObj = obj if ((key !== '' &amp;&amp; key !== ' ') || j === 0) &#123; if (obj[key] === undef) &#123; obj[key] = &#123;&#125; &#125; obj = obj[key] &#125; else &#123; // To insert new dimension ct = -1 for (p in obj) &#123; if (obj.hasOwnProperty(p)) &#123; if (+p &gt; ct &amp;&amp; p.match(/^\\d+$/g)) &#123; ct = +p &#125; &#125; &#125; key = ct + 1 &#125; &#125; lastObj[key] = value &#125; &#125;&#125;","raw":null,"content":null},{"title":"PHP's ord in JavaScript","date":"2016-05-11T20:27:49.994Z","updated":"2016-05-11T20:27:49.994Z","comments":true,"path":"php/strings/ord/index.html","permalink":"http://locutus.io/php/strings/ord/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839module.exports = function ord (string) &#123; // discuss at: http://locutus.io/php/ord/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // input by: incidence // example 1: ord('K') // returns 1: 75 // example 2: ord('\\uD800\\uDC00'); // surrogate pair to create a single Unicode character // returns 2: 65536 var str = string + '' var code = str.charCodeAt(0) if (code &gt;= 0xD800 &amp;&amp; code &lt;= 0xDBFF) &#123; // High surrogate (could change last hex to 0xDB7F to treat // high private surrogates as single characters) var hi = code if (str.length === 1) &#123; // This is just a high surrogate with no following low surrogate, // so we return its value; return code // we could also throw an error as it is not a complete character, // but someone may want to know &#125; var low = str.charCodeAt(1) return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000 &#125; if (code &gt;= 0xDC00 &amp;&amp; code &lt;= 0xDFFF) &#123; // Low surrogate // This is just a low surrogate with no preceding high surrogate, // so we return its value; return code // we could also throw an error as it is not a complete character, // but someone may want to know &#125; return code&#125;","raw":null,"content":null},{"title":"PHP's number_format in JavaScript","date":"2016-05-11T20:27:49.994Z","updated":"2016-05-11T20:27:49.994Z","comments":true,"path":"php/strings/number_format/index.html","permalink":"http://locutus.io/php/strings/number_format/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576module.exports = function number_format (number, decimals, decPoint, thousandsSep) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/number_format/ // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: davook // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Theriault (https://github.com/Theriault) // improved by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Michael White (http://getsprink.com) // bugfixed by: Benjamin Lupton // bugfixed by: Allan Jensen (http://www.winternet.no) // bugfixed by: Howard Yeend // bugfixed by: Diogo Resende // bugfixed by: Rival // bugfixed by: Brett Zamir (http://brett-zamir.me) // revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // revised by: Luke Smith (http://lucassmith.name) // input by: Kheang Hok Chin (http://www.distantia.ca/) // input by: Jay Klehr // input by: Amir Habibi (http://www.residence-mixte.com/) // input by: Amirouche // example 1: number_format(1234.56) // returns 1: '1,235' // example 2: number_format(1234.56, 2, ',', ' ') // returns 2: '1 234,56' // example 3: number_format(1234.5678, 2, '.', '') // returns 3: '1234.57' // example 4: number_format(67, 2, ',', '.') // returns 4: '67,00' // example 5: number_format(1000) // returns 5: '1,000' // example 6: number_format(67.311, 2) // returns 6: '67.31' // example 7: number_format(1000.55, 1) // returns 7: '1,000.6' // example 8: number_format(67000, 5, ',', '.') // returns 8: '67.000,00000' // example 9: number_format(0.9, 0) // returns 9: '1' // example 10: number_format('1.20', 2) // returns 10: '1.20' // example 11: number_format('1.20', 4) // returns 11: '1.2000' // example 12: number_format('1.2000', 3) // returns 12: '1.200' // example 13: number_format('1 000,50', 2, '.', ' ') // returns 13: '100 050.00' // example 14: number_format(1e-8, 8, '.', '') // returns 14: '0.00000001' number = (number + '').replace(/[^0-9+\\-Ee.]/g, '') var n = !isFinite(+number) ? 0 : +number var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals) var sep = (typeof thousandsSep === 'undefined') ? ',' : thousandsSep var dec = (typeof decPoint === 'undefined') ? '.' : decPoint var s = '' var toFixedFix = function (n, prec) &#123; var k = Math.pow(10, prec) return '' + (Math.round(n * k) / k) .toFixed(prec) &#125; // @todo: for IE parseFloat(0.55).toFixed(0) = 0; s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.') if (s[0].length &gt; 3) &#123; s[0] = s[0].replace(/\\B(?=(?:\\d&#123;3&#125;)+(?!\\d))/g, sep) &#125; if ((s[1] || '').length &lt; prec) &#123; s[1] = s[1] || '' s[1] += new Array(prec - s[1].length + 1).join('0') &#125; return s.join(dec)&#125;","raw":null,"content":null},{"title":"PHP's nl_langinfo in JavaScript","date":"2016-05-11T20:27:49.994Z","updated":"2016-05-11T20:27:49.994Z","comments":true,"path":"php/strings/nl_langinfo/index.html","permalink":"http://locutus.io/php/strings/nl_langinfo/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104module.exports = function nl_langinfo (item) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/nl_langinfo/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: nl_langinfo('DAY_1') // returns 1: 'Sunday' var setlocale = require('../strings/setlocale') setlocale('LC_ALL', 0) // Ensure locale data is available var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; var loc = $locutus.php.locales[$locutus.php.localeCategories.LC_TIME] if (item.indexOf('ABDAY_') === 0) &#123; return loc.LC_TIME.a[parseInt(item.replace(/^ABDAY_/, ''), 10) - 1] &#125; else if (item.indexOf('DAY_') === 0) &#123; return loc.LC_TIME.A[parseInt(item.replace(/^DAY_/, ''), 10) - 1] &#125; else if (item.indexOf('ABMON_') === 0) &#123; return loc.LC_TIME.b[parseInt(item.replace(/^ABMON_/, ''), 10) - 1] &#125; else if (item.indexOf('MON_') === 0) &#123; return loc.LC_TIME.B[parseInt(item.replace(/^MON_/, ''), 10) - 1] &#125; else &#123; switch (item) &#123; // More LC_TIME case 'AM_STR': return loc.LC_TIME.p[0] case 'PM_STR': return loc.LC_TIME.p[1] case 'D_T_FMT': return loc.LC_TIME.c case 'D_FMT': return loc.LC_TIME.x case 'T_FMT': return loc.LC_TIME.X case 'T_FMT_AMPM': return loc.LC_TIME.r case 'ERA': case 'ERA_YEAR': case 'ERA_D_T_FMT': case 'ERA_D_FMT': case 'ERA_T_FMT': // all fall-throughs return loc.LC_TIME[item] &#125; loc = $locutus.php.locales[$locutus.php.localeCategories.LC_MONETARY] if (item === 'CRNCYSTR') &#123; // alias item = 'CURRENCY_SYMBOL' &#125; switch (item) &#123; case 'INT_CURR_SYMBOL': case 'CURRENCY_SYMBOL': case 'MON_DECIMAL_POINT': case 'MON_THOUSANDS_SEP': case 'POSITIVE_SIGN': case 'NEGATIVE_SIGN': case 'INT_FRAC_DIGITS': case 'FRAC_DIGITS': case 'P_CS_PRECEDES': case 'P_SEP_BY_SPACE': case 'N_CS_PRECEDES': case 'N_SEP_BY_SPACE': case 'P_SIGN_POSN': case 'N_SIGN_POSN': // all fall-throughs return loc.LC_MONETARY[item.toLowerCase()] case 'MON_GROUPING': // Same as above, or return something different since this returns an array? return loc.LC_MONETARY[item.toLowerCase()] &#125; loc = $locutus.php.locales[$locutus.php.localeCategories.LC_NUMERIC] switch (item) &#123; case 'RADIXCHAR': case 'DECIMAL_POINT': // Fall-through return loc.LC_NUMERIC[item.toLowerCase()] case 'THOUSEP': case 'THOUSANDS_SEP': // Fall-through return loc.LC_NUMERIC[item.toLowerCase()] case 'GROUPING': // Same as above, or return something different since this returns an array? return loc.LC_NUMERIC[item.toLowerCase()] &#125; loc = $locutus.php.locales[$locutus.php.localeCategories.LC_MESSAGES] switch (item) &#123; case 'YESEXPR': case 'NOEXPR': case 'YESSTR': case 'NOSTR': // all fall-throughs return loc.LC_MESSAGES[item] &#125; loc = $locutus.php.locales[$locutus.php.localeCategories.LC_CTYPE] if (item === 'CODESET') &#123; return loc.LC_CTYPE[item] &#125; return false &#125;&#125;","raw":null,"content":null},{"title":"PHP's nl2br in JavaScript","date":"2016-05-11T20:27:49.994Z","updated":"2016-05-11T20:27:49.994Z","comments":true,"path":"php/strings/nl2br/index.html","permalink":"http://locutus.io/php/strings/nl2br/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324module.exports = function nl2br (str, isXhtml) &#123; // discuss at: http://locutus.io/php/nl2br/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Philip Peterson // improved by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Atli √û√≥r // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Maximusya // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // example 1: nl2br('Kevin\\nvan\\nZonneveld') // returns 1: 'Kevin&lt;br /&gt;\\nvan&lt;br /&gt;\\nZonneveld' // example 2: nl2br(\"\\nOne\\nTwo\\n\\nThree\\n\", false) // returns 2: '&lt;br&gt;\\nOne&lt;br&gt;\\nTwo&lt;br&gt;\\n&lt;br&gt;\\nThree&lt;br&gt;\\n' // example 3: nl2br(\"\\nOne\\nTwo\\n\\nThree\\n\", true) // returns 3: '&lt;br /&gt;\\nOne&lt;br /&gt;\\nTwo&lt;br /&gt;\\n&lt;br /&gt;\\nThree&lt;br /&gt;\\n' // Adjust comment to avoid issue on locutus.io display var breakTag = (isXhtml || typeof isXhtml === 'undefined') ? '&lt;br ' + '/&gt;' : '&lt;br&gt;' return (str + '') .replace(/([^&gt;\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1' + breakTag + '$2')&#125;","raw":null,"content":null},{"title":"PHP's money_format in JavaScript","date":"2016-05-11T20:27:49.994Z","updated":"2016-05-11T20:27:49.994Z","comments":true,"path":"php/strings/money_format/index.html","permalink":"http://locutus.io/php/strings/money_format/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265module.exports = function money_format (format, number) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/money_format/ // original by: Brett Zamir (http://brett-zamir.me) // input by: daniel airton wermann (http://wermann.com.br) // bugfixed by: Brett Zamir (http://brett-zamir.me) // note 1: This depends on setlocale having the appropriate // note 1: locale (these examples use 'en_US') // example 1: money_format('%i', 1234.56) // returns 1: ' USD 1,234.56' // example 2: money_format('%14#8.2n', 1234.5678) // returns 2: ' $ 1,234.57' // example 3: money_format('%14#8.2n', -1234.5678) // returns 3: '-$ 1,234.57' // example 4: money_format('%(14#8.2n', 1234.5678) // returns 4: ' $ 1,234.57 ' // example 5: money_format('%(14#8.2n', -1234.5678) // returns 5: '($ 1,234.57)' // example 6: money_format('%=014#8.2n', 1234.5678) // returns 6: ' $000001,234.57' // example 7: money_format('%=014#8.2n', -1234.5678) // returns 7: '-$000001,234.57' // example 8: money_format('%=*14#8.2n', 1234.5678) // returns 8: ' $*****1,234.57' // example 9: money_format('%=*14#8.2n', -1234.5678) // returns 9: '-$*****1,234.57' // example 10: money_format('%=*^14#8.2n', 1234.5678) // returns 10: ' $****1234.57' // example 11: money_format('%=*^14#8.2n', -1234.5678) // returns 11: ' -$****1234.57' // example 12: money_format('%=*!14#8.2n', 1234.5678) // returns 12: ' *****1,234.57' // example 13: money_format('%=*!14#8.2n', -1234.5678) // returns 13: '-*****1,234.57' // example 14: money_format('%i', 3590) // returns 14: ' USD 3,590.00' var setlocale = require('../strings/setlocale') // Per PHP behavior, there seems to be no extra padding // for sign when there is a positive number, though my // understanding of the description is that there should be padding; // need to revisit examples // Helpful info at http://ftp.gnu.org/pub/pub/old-gnu/Manuals/glibc-2.2.3/html_chapter/libc_7.html // and http://publib.boulder.ibm.com/infocenter/zos/v1r10/index.jsp?topic=/com.ibm.zos.r10.bpxbd00/strfmp.htm if (typeof number !== 'number') &#123; return null &#125; // 1: flags, 3: width, 5: left, 7: right, 8: conversion var regex = /%((=.|[+^(!-])*?)(\\d*?)(#(\\d+))?(\\.(\\d+))?([in%])/g // Ensure the locale data we need is set up setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; var monetary = $locutus.php.locales[$locutus.php.localeCategories.LC_MONETARY].LC_MONETARY var doReplace = function (n0, flags, n2, width, n4, left, n6, right, conversion) &#123; var value = '' var repl = '' if (conversion === '%') &#123; // Percent does not seem to be allowed with intervening content return '%' &#125; var fill = flags &amp;&amp; (/=./).test(flags) ? flags.match(/=(.)/)[1] : ' ' // flag: =f (numeric fill) // flag: ! (suppress currency symbol) var showCurrSymbol = !flags || flags.indexOf('!') === -1 // field width: w (minimum field width) width = parseInt(width, 10) || 0 var neg = number &lt; 0 // Convert to string number = number + '' // We don't want negative symbol represented here yet number = neg ? number.slice(1) : number var decpos = number.indexOf('.') // Get integer portion var integer = decpos !== -1 ? number.slice(0, decpos) : number // Get decimal portion var fraction = decpos !== -1 ? number.slice(decpos + 1) : '' var _strSplice = function (integerStr, idx, thouSep) &#123; var integerArr = integerStr.split('') integerArr.splice(idx, 0, thouSep) return integerArr.join('') &#125; var intLen = integer.length left = parseInt(left, 10) var filler = intLen &lt; left if (filler) &#123; var fillnum = left - intLen integer = new Array(fillnum + 1).join(fill) + integer &#125; if (flags.indexOf('^') === -1) &#123; // flag: ^ (disable grouping characters (of locale)) // use grouping characters // ',' var thouSep = monetary.mon_thousands_sep // [3] (every 3 digits in U.S.A. locale) var monGrouping = monetary.mon_grouping if (monGrouping[0] &lt; integer.length) &#123; for (var i = 0, idx = integer.length; i &lt; monGrouping.length; i++) &#123; // e.g., 3 idx -= monGrouping[i] if (idx &lt;= 0) &#123; break &#125; if (filler &amp;&amp; idx &lt; fillnum) &#123; thouSep = fill &#125; integer = _strSplice(integer, idx, thouSep) &#125; &#125; if (monGrouping[i - 1] &gt; 0) &#123; // Repeating last grouping (may only be one) until highest portion of integer reached while (idx &gt; monGrouping[i - 1]) &#123; idx -= monGrouping[i - 1] if (filler &amp;&amp; idx &lt; fillnum) &#123; thouSep = fill &#125; integer = _strSplice(integer, idx, thouSep) &#125; &#125; &#125; // left, right if (right === '0') &#123; // No decimal or fractional digits value = integer &#125; else &#123; // '.' var decPt = monetary.mon_decimal_point if (right === '' || right === undefined) &#123; right = conversion === 'i' ? monetary.int_frac_digits : monetary.frac_digits &#125; right = parseInt(right, 10) if (right === 0) &#123; // Only remove fractional portion if explicitly set to zero digits fraction = '' decPt = '' &#125; else if (right &lt; fraction.length) &#123; fraction = Math.round(parseFloat( fraction.slice(0, right) + '.' + fraction.substr(right, 1) )) if (right &gt; fraction.length) &#123; fraction = new Array(right - fraction.length + 1).join('0') + fraction // prepend with 0's &#125; &#125; else if (right &gt; fraction.length) &#123; fraction += new Array(right - fraction.length + 1).join('0') // pad with 0's &#125; value = integer + decPt + fraction &#125; var symbol = '' if (showCurrSymbol) &#123; // 'i' vs. 'n' ('USD' vs. '$') symbol = conversion === 'i' ? monetary.int_curr_symbol : monetary.currency_symbol &#125; var signPosn = neg ? monetary.n_sign_posn : monetary.p_sign_posn // 0: no space between curr. symbol and value // 1: space sep. them unless symb. and sign are adjacent then space sep. them from value // 2: space sep. sign and value unless symb. and sign are adjacent then space separates var sepBySpace = neg ? monetary.n_sep_by_space : monetary.p_sep_by_space // p_cs_precedes, n_cs_precedes // positive currency symbol follows value = 0; precedes value = 1 var csPrecedes = neg ? monetary.n_cs_precedes : monetary.p_cs_precedes // Assemble symbol/value/sign and possible space as appropriate if (flags.indexOf('(') !== -1) &#123; // flag: parenth. for negative // @todo: unclear on whether and how sepBySpace, signPosn, or csPrecedes have // an impact here (as they do below), but assuming for now behaves as signPosn 0 as // far as localized sepBySpace and signPosn behavior repl = (csPrecedes ? symbol + (sepBySpace === 1 ? ' ' : '') : '') + value + (!csPrecedes ? ( sepBySpace === 1 ? ' ' : '') + symbol : '') if (neg) &#123; repl = '(' + repl + ')' &#125; else &#123; repl = ' ' + repl + ' ' &#125; &#125; else &#123; // '+' is default // '' var posSign = monetary.positive_sign // '-' var negSign = monetary.negative_sign var sign = neg ? (negSign) : (posSign) var otherSign = neg ? (posSign) : (negSign) var signPadding = '' if (signPosn) &#123; // has a sign signPadding = new Array(otherSign.length - sign.length + 1).join(' ') &#125; var valueAndCS = '' switch (signPosn) &#123; // 0: parentheses surround value and curr. symbol; // 1: sign precedes them; // 2: sign follows them; // 3: sign immed. precedes curr. symbol; (but may be space between) // 4: sign immed. succeeds curr. symbol; (but may be space between) case 0: valueAndCS = csPrecedes ? symbol + (sepBySpace === 1 ? ' ' : '') + value : value + (sepBySpace === 1 ? ' ' : '') + symbol repl = '(' + valueAndCS + ')' break case 1: valueAndCS = csPrecedes ? symbol + (sepBySpace === 1 ? ' ' : '') + value : value + (sepBySpace === 1 ? ' ' : '') + symbol repl = signPadding + sign + (sepBySpace === 2 ? ' ' : '') + valueAndCS break case 2: valueAndCS = csPrecedes ? symbol + (sepBySpace === 1 ? ' ' : '') + value : value + (sepBySpace === 1 ? ' ' : '') + symbol repl = valueAndCS + (sepBySpace === 2 ? ' ' : '') + sign + signPadding break case 3: repl = csPrecedes ? signPadding + sign + (sepBySpace === 2 ? ' ' : '') + symbol + (sepBySpace === 1 ? ' ' : '') + value : value + (sepBySpace === 1 ? ' ' : '') + sign + signPadding + (sepBySpace === 2 ? ' ' : '') + symbol break case 4: repl = csPrecedes ? symbol + (sepBySpace === 2 ? ' ' : '') + signPadding + sign + (sepBySpace === 1 ? ' ' : '') + value : value + (sepBySpace === 1 ? ' ' : '') + symbol + (sepBySpace === 2 ? ' ' : '') + sign + signPadding break &#125; &#125; var padding = width - repl.length if (padding &gt; 0) &#123; padding = new Array(padding + 1).join(' ') // @todo: How does p_sep_by_space affect the count if there is a space? // Included in count presumably? if (flags.indexOf('-') !== -1) &#123; // left-justified (pad to right) repl += padding &#125; else &#123; // right-justified (pad to left) repl = padding + repl &#125; &#125; return repl &#125; return format.replace(regex, doReplace)&#125;","raw":null,"content":null},{"title":"PHP's metaphone in JavaScript","date":"2016-05-11T20:27:49.994Z","updated":"2016-05-11T20:27:49.994Z","comments":true,"path":"php/strings/metaphone/index.html","permalink":"http://locutus.io/php/strings/metaphone/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221module.exports = function metaphone (word, maxPhonemes) &#123; // discuss at: http://locutus.io/php/metaphone/ // original by: Greg Frazier // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // example 1: metaphone('Gnu') // returns 1: 'N' // example 2: metaphone('bigger') // returns 2: 'BKR' // example 3: metaphone('accuracy') // returns 3: 'AKKRS' // example 4: metaphone('batch batcher') // returns 4: 'BXBXR' var type = typeof word if (type === 'undefined' || type === 'object' &amp;&amp; word !== null) &#123; // weird! return null &#125; // infinity and NaN values are treated as strings if (type === 'number') &#123; if (isNaN(word)) &#123; word = 'NAN' &#125; else if (!isFinite(word)) &#123; word = 'INF' &#125; &#125; if (maxPhonemes &lt; 0) &#123; return false &#125; maxPhonemes = Math.floor(+maxPhonemes) || 0 // alpha depends on locale, so this var might need an update // or should be turned into a regex // for now assuming pure a-z var alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' var vowel = 'AEIOU' var soft = 'EIY' var leadingNonAlpha = new RegExp('^[^' + alpha + ']+') word = typeof word === 'string' ? word : '' word = word.toUpperCase().replace(leadingNonAlpha, '') if (!word) &#123; return '' &#125; var is = function (p, c) &#123; return c !== '' &amp;&amp; p.indexOf(c) !== -1 &#125; var i = 0 var cc = word.charAt(0) // current char. Short name because it's used all over the function var nc = word.charAt(1) // next char var nnc // after next char var pc // previous char var l = word.length var meta = '' // traditional is an internal param that could be exposed for now let it be a local var var traditional = true switch (cc) &#123; case 'A': meta += nc === 'E' ? nc : cc i += 1 break case 'G': case 'K': case 'P': if (nc === 'N') &#123; meta += nc i += 2 &#125; break case 'W': if (nc === 'R') &#123; meta += nc i += 2 &#125; else if (nc === 'H' || is(vowel, nc)) &#123; meta += 'W' i += 2 &#125; break case 'X': meta += 'S' i += 1 break case 'E': case 'I': case 'O': case 'U': meta += cc i++ break &#125; for (; i &lt; l &amp;&amp; (maxPhonemes === 0 || meta.length &lt; maxPhonemes); i += 1) &#123; // eslint-disable-line no-unmodified-loop-condition,max-len cc = word.charAt(i) nc = word.charAt(i + 1) pc = word.charAt(i - 1) nnc = word.charAt(i + 2) if (cc === pc &amp;&amp; cc !== 'C') &#123; continue &#125; switch (cc) &#123; case 'B': if (pc !== 'M') &#123; meta += cc &#125; break case 'C': if (is(soft, nc)) &#123; if (nc === 'I' &amp;&amp; nnc === 'A') &#123; meta += 'X' &#125; else if (pc !== 'S') &#123; meta += 'S' &#125; &#125; else if (nc === 'H') &#123; meta += !traditional &amp;&amp; (nnc === 'R' || pc === 'S') ? 'K' : 'X' i += 1 &#125; else &#123; meta += 'K' &#125; break case 'D': if (nc === 'G' &amp;&amp; is(soft, nnc)) &#123; meta += 'J' i += 1 &#125; else &#123; meta += 'T' &#125; break case 'G': if (nc === 'H') &#123; if (!(is('BDH', word.charAt(i - 3)) || word.charAt(i - 4) === 'H')) &#123; meta += 'F' i += 1 &#125; &#125; else if (nc === 'N') &#123; if (is(alpha, nnc) &amp;&amp; word.substr(i + 1, 3) !== 'NED') &#123; meta += 'K' &#125; &#125; else if (is(soft, nc) &amp;&amp; pc !== 'G') &#123; meta += 'J' &#125; else &#123; meta += 'K' &#125; break case 'H': if (is(vowel, nc) &amp;&amp; !is('CGPST', pc)) &#123; meta += cc &#125; break case 'K': if (pc !== 'C') &#123; meta += 'K' &#125; break case 'P': meta += nc === 'H' ? 'F' : cc break case 'Q': meta += 'K' break case 'S': if (nc === 'I' &amp;&amp; is('AO', nnc)) &#123; meta += 'X' &#125; else if (nc === 'H') &#123; meta += 'X' i += 1 &#125; else if (!traditional &amp;&amp; word.substr(i + 1, 3) === 'CHW') &#123; meta += 'X' i += 2 &#125; else &#123; meta += 'S' &#125; break case 'T': if (nc === 'I' &amp;&amp; is('AO', nnc)) &#123; meta += 'X' &#125; else if (nc === 'H') &#123; meta += '0' i += 1 &#125; else if (word.substr(i + 1, 2) !== 'CH') &#123; meta += 'T' &#125; break case 'V': meta += 'F' break case 'W': case 'Y': if (is(vowel, nc)) &#123; meta += cc &#125; break case 'X': meta += 'KS' break case 'Z': meta += 'S' break case 'F': case 'J': case 'L': case 'M': case 'N': case 'R': meta += cc break &#125; &#125; return meta&#125;","raw":null,"content":null},{"title":"PHP's md5_file in JavaScript","date":"2016-05-11T20:27:49.990Z","updated":"2016-05-11T20:27:49.990Z","comments":true,"path":"php/strings/md5_file/index.html","permalink":"http://locutus.io/php/strings/md5_file/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122module.exports = function md5_file (str_filename) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/md5_file/ // original by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // note 1: Relies on file_get_contents which does not work in the browser, so Node only. // note 2: Keep in mind that in accordance with PHP, the whole file is buffered and then // note 2: hashed. We'd recommend Node's native crypto modules for faster and more // note 2: efficient hashing // example 1: md5_file('test/never-change.txt') // returns 1: 'bc3aa724b0ec7dce4c26e7f4d0d9b064' var fileGetContents = require('../filesystem/file_get_contents') var md5 = require('../strings/md5') var buf = fileGetContents(str_filename) if (buf === false) &#123; return false &#125; return md5(buf)&#125;","raw":null,"content":null},{"title":"PHP's md5 in JavaScript","date":"2016-05-11T20:27:49.994Z","updated":"2016-05-11T20:27:49.994Z","comments":true,"path":"php/strings/md5/index.html","permalink":"http://locutus.io/php/strings/md5/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241module.exports = function md5 (str) &#123; // discuss at: http://locutus.io/php/md5/ // original by: Webtoolkit.info (http://www.webtoolkit.info/) // improved by: Michael White (http://getsprink.com) // improved by: Jack // improved by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then // note 1: hashed. If available, we'd recommend using Node's native crypto modules directly // note 1: in a steaming fashion for faster and more efficient hashing // example 1: md5('Kevin van Zonneveld') // returns 1: '6e658d4bfcb59cc13f96c14450ac40b9' var hash try &#123; var crypto = require('crypto') var md5sum = crypto.createHash('md5') md5sum.update(str) hash = md5sum.digest('hex') &#125; catch (e) &#123; hash = undefined &#125; if (hash !== undefined) &#123; return hash &#125; var utf8Encode = require('../xml/utf8_encode') var xl var _rotateLeft = function (lValue, iShiftBits) &#123; return (lValue &lt;&lt; iShiftBits) | (lValue &gt;&gt;&gt; (32 - iShiftBits)) &#125; var _addUnsigned = function (lX, lY) &#123; var lX4, lY4, lX8, lY8, lResult lX8 = (lX &amp; 0x80000000) lY8 = (lY &amp; 0x80000000) lX4 = (lX &amp; 0x40000000) lY4 = (lY &amp; 0x40000000) lResult = (lX &amp; 0x3FFFFFFF) + (lY &amp; 0x3FFFFFFF) if (lX4 &amp; lY4) &#123; return (lResult ^ 0x80000000 ^ lX8 ^ lY8) &#125; if (lX4 | lY4) &#123; if (lResult &amp; 0x40000000) &#123; return (lResult ^ 0xC0000000 ^ lX8 ^ lY8) &#125; else &#123; return (lResult ^ 0x40000000 ^ lX8 ^ lY8) &#125; &#125; else &#123; return (lResult ^ lX8 ^ lY8) &#125; &#125; var _F = function (x, y, z) &#123; return (x &amp; y) | ((~x) &amp; z) &#125; var _G = function (x, y, z) &#123; return (x &amp; z) | (y &amp; (~z)) &#125; var _H = function (x, y, z) &#123; return (x ^ y ^ z) &#125; var _I = function (x, y, z) &#123; return (y ^ (x | (~z))) &#125; var _FF = function (a, b, c, d, x, s, ac) &#123; a = _addUnsigned(a, _addUnsigned(_addUnsigned(_F(b, c, d), x), ac)) return _addUnsigned(_rotateLeft(a, s), b) &#125; var _GG = function (a, b, c, d, x, s, ac) &#123; a = _addUnsigned(a, _addUnsigned(_addUnsigned(_G(b, c, d), x), ac)) return _addUnsigned(_rotateLeft(a, s), b) &#125; var _HH = function (a, b, c, d, x, s, ac) &#123; a = _addUnsigned(a, _addUnsigned(_addUnsigned(_H(b, c, d), x), ac)) return _addUnsigned(_rotateLeft(a, s), b) &#125; var _II = function (a, b, c, d, x, s, ac) &#123; a = _addUnsigned(a, _addUnsigned(_addUnsigned(_I(b, c, d), x), ac)) return _addUnsigned(_rotateLeft(a, s), b) &#125; var _convertToWordArray = function (str) &#123; var lWordCount var lMessageLength = str.length var lNumberOfWordsTemp1 = lMessageLength + 8 var lNumberOfWordsTemp2 = (lNumberOfWordsTemp1 - (lNumberOfWordsTemp1 % 64)) / 64 var lNumberOfWords = (lNumberOfWordsTemp2 + 1) * 16 var lWordArray = new Array(lNumberOfWords - 1) var lBytePosition = 0 var lByteCount = 0 while (lByteCount &lt; lMessageLength) &#123; lWordCount = (lByteCount - (lByteCount % 4)) / 4 lBytePosition = (lByteCount % 4) * 8 lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) &lt;&lt; lBytePosition)) lByteCount++ &#125; lWordCount = (lByteCount - (lByteCount % 4)) / 4 lBytePosition = (lByteCount % 4) * 8 lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 &lt;&lt; lBytePosition) lWordArray[lNumberOfWords - 2] = lMessageLength &lt;&lt; 3 lWordArray[lNumberOfWords - 1] = lMessageLength &gt;&gt;&gt; 29 return lWordArray &#125; var _wordToHex = function (lValue) &#123; var wordToHexValue = '' var wordToHexValueTemp = '' var lByte var lCount for (lCount = 0; lCount &lt;= 3; lCount++) &#123; lByte = (lValue &gt;&gt;&gt; (lCount * 8)) &amp; 255 wordToHexValueTemp = '0' + lByte.toString(16) wordToHexValue = wordToHexValue + wordToHexValueTemp.substr(wordToHexValueTemp.length - 2, 2) &#125; return wordToHexValue &#125; var x = [] var k var AA var BB var CC var DD var a var b var c var d var S11 = 7 var S12 = 12 var S13 = 17 var S14 = 22 var S21 = 5 var S22 = 9 var S23 = 14 var S24 = 20 var S31 = 4 var S32 = 11 var S33 = 16 var S34 = 23 var S41 = 6 var S42 = 10 var S43 = 15 var S44 = 21 str = utf8Encode(str) x = _convertToWordArray(str) a = 0x67452301 b = 0xEFCDAB89 c = 0x98BADCFE d = 0x10325476 xl = x.length for (k = 0; k &lt; xl; k += 16) &#123; AA = a BB = b CC = c DD = d a = _FF(a, b, c, d, x[k + 0], S11, 0xD76AA478) d = _FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756) c = _FF(c, d, a, b, x[k + 2], S13, 0x242070DB) b = _FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE) a = _FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF) d = _FF(d, a, b, c, x[k + 5], S12, 0x4787C62A) c = _FF(c, d, a, b, x[k + 6], S13, 0xA8304613) b = _FF(b, c, d, a, x[k + 7], S14, 0xFD469501) a = _FF(a, b, c, d, x[k + 8], S11, 0x698098D8) d = _FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF) c = _FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1) b = _FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE) a = _FF(a, b, c, d, x[k + 12], S11, 0x6B901122) d = _FF(d, a, b, c, x[k + 13], S12, 0xFD987193) c = _FF(c, d, a, b, x[k + 14], S13, 0xA679438E) b = _FF(b, c, d, a, x[k + 15], S14, 0x49B40821) a = _GG(a, b, c, d, x[k + 1], S21, 0xF61E2562) d = _GG(d, a, b, c, x[k + 6], S22, 0xC040B340) c = _GG(c, d, a, b, x[k + 11], S23, 0x265E5A51) b = _GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA) a = _GG(a, b, c, d, x[k + 5], S21, 0xD62F105D) d = _GG(d, a, b, c, x[k + 10], S22, 0x2441453) c = _GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681) b = _GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8) a = _GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6) d = _GG(d, a, b, c, x[k + 14], S22, 0xC33707D6) c = _GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87) b = _GG(b, c, d, a, x[k + 8], S24, 0x455A14ED) a = _GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905) d = _GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8) c = _GG(c, d, a, b, x[k + 7], S23, 0x676F02D9) b = _GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A) a = _HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942) d = _HH(d, a, b, c, x[k + 8], S32, 0x8771F681) c = _HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122) b = _HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C) a = _HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44) d = _HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9) c = _HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60) b = _HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70) a = _HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6) d = _HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA) c = _HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085) b = _HH(b, c, d, a, x[k + 6], S34, 0x4881D05) a = _HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039) d = _HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5) c = _HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8) b = _HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665) a = _II(a, b, c, d, x[k + 0], S41, 0xF4292244) d = _II(d, a, b, c, x[k + 7], S42, 0x432AFF97) c = _II(c, d, a, b, x[k + 14], S43, 0xAB9423A7) b = _II(b, c, d, a, x[k + 5], S44, 0xFC93A039) a = _II(a, b, c, d, x[k + 12], S41, 0x655B59C3) d = _II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92) c = _II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D) b = _II(b, c, d, a, x[k + 1], S44, 0x85845DD1) a = _II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F) d = _II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0) c = _II(c, d, a, b, x[k + 6], S43, 0xA3014314) b = _II(b, c, d, a, x[k + 13], S44, 0x4E0811A1) a = _II(a, b, c, d, x[k + 4], S41, 0xF7537E82) d = _II(d, a, b, c, x[k + 11], S42, 0xBD3AF235) c = _II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB) b = _II(b, c, d, a, x[k + 9], S44, 0xEB86D391) a = _addUnsigned(a, AA) b = _addUnsigned(b, BB) c = _addUnsigned(c, CC) d = _addUnsigned(d, DD) &#125; var temp = _wordToHex(a) + _wordToHex(b) + _wordToHex(c) + _wordToHex(d) return temp.toLowerCase()&#125;","raw":null,"content":null},{"title":"PHP's ltrim in JavaScript","date":"2016-05-11T20:27:49.986Z","updated":"2016-05-11T20:27:49.986Z","comments":true,"path":"php/strings/ltrim/index.html","permalink":"http://locutus.io/php/strings/ltrim/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function ltrim (str, charlist) &#123; // discuss at: http://locutus.io/php/ltrim/ // original by: Kevin van Zonneveld (http://kvz.io) // input by: Erkekjetter // improved by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: ltrim(' Kevin van Zonneveld ') // returns 1: 'Kevin van Zonneveld ' charlist = !charlist ? ' \\\\s\\u00A0' : (charlist + '') .replace(/([\\[\\]\\(\\)\\.\\?\\/\\*\\&#123;\\&#125;\\+\\$\\^:])/g, '$1') var re = new RegExp('^[' + charlist + ']+', 'g') return (str + '') .replace(re, '')&#125;","raw":null,"content":null},{"title":"PHP's localeconv in JavaScript","date":"2016-05-11T20:27:49.986Z","updated":"2016-05-11T20:27:49.986Z","comments":true,"path":"php/strings/localeconv/index.html","permalink":"http://locutus.io/php/strings/localeconv/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function localeconv () &#123; // discuss at: http://locutus.io/php/localeconv/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: setlocale('LC_ALL', 'en_US') // example 1: localeconv() // returns 1: &#123;decimal_point: '.', thousands_sep: '', positive_sign: '', negative_sign: '-', int_frac_digits: 2, frac_digits: 2, p_cs_precedes: 1, p_sep_by_space: 0, n_cs_precedes: 1, n_sep_by_space: 0, p_sign_posn: 1, n_sign_posn: 1, grouping: [], int_curr_symbol: 'USD ', currency_symbol: '$', mon_decimal_point: '.', mon_thousands_sep: ',', mon_grouping: [3, 3]&#125; var setlocale = require('../strings/setlocale') var arr = &#123;&#125; var prop = '' // ensure setup of localization variables takes place, if not already setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; // Make copies for (prop in $locutus.php.locales[$locutus.php.localeCategories.LC_NUMERIC].LC_NUMERIC) &#123; arr[prop] = $locutus.php.locales[$locutus.php.localeCategories.LC_NUMERIC].LC_NUMERIC[prop] &#125; for (prop in $locutus.php.locales[$locutus.php.localeCategories.LC_MONETARY].LC_MONETARY) &#123; arr[prop] = $locutus.php.locales[$locutus.php.localeCategories.LC_MONETARY].LC_MONETARY[prop] &#125; return arr&#125;","raw":null,"content":null},{"title":"PHP's levenshtein in JavaScript","date":"2016-05-11T20:27:49.986Z","updated":"2016-05-11T20:27:49.986Z","comments":true,"path":"php/strings/levenshtein/index.html","permalink":"http://locutus.io/php/strings/levenshtein/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091module.exports = function levenshtein (s1, s2, costIns, costRep, costDel) &#123; // discuss at: http://locutus.io/php/levenshtein/ // original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // revised by: Andrea Giammarchi (http://webreflection.blogspot.com) // reimplemented by: Brett Zamir (http://brett-zamir.me) // reimplemented by: Alexander M Beedie // reimplemented by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // example 1: levenshtein('Kevin van Zonneveld', 'Kevin van Sommeveld') // returns 1: 3 // example 2: levenshtein(\"carrrot\", \"carrots\") // returns 2: 2 // example 3: levenshtein(\"carrrot\", \"carrots\", 2, 3, 4) // returns 3: 6 // var LEVENSHTEIN_MAX_LENGTH = 255 // PHP limits the function to max 255 character-long strings costIns = costIns == null ? 1 : +costIns costRep = costRep == null ? 1 : +costRep costDel = costDel == null ? 1 : +costDel if (s1 === s2) &#123; return 0 &#125; var l1 = s1.length var l2 = s2.length if (l1 === 0) &#123; return l2 * costIns &#125; if (l2 === 0) &#123; return l1 * costDel &#125; // Enable the 3 lines below to set the same limits on string length as PHP does // if (l1 &gt; LEVENSHTEIN_MAX_LENGTH || l2 &gt; LEVENSHTEIN_MAX_LENGTH) &#123; // return -1; // &#125; var split = false try &#123; split = !('0')[0] &#125; catch (e) &#123; // Earlier IE may not support access by string index split = true &#125; if (split) &#123; s1 = s1.split('') s2 = s2.split('') &#125; var p1 = new Array(l2 + 1) var p2 = new Array(l2 + 1) var i1, i2, c0, c1, c2, tmp for (i2 = 0; i2 &lt;= l2; i2++) &#123; p1[i2] = i2 * costIns &#125; for (i1 = 0; i1 &lt; l1; i1++) &#123; p2[0] = p1[0] + costDel for (i2 = 0; i2 &lt; l2; i2++) &#123; c0 = p1[i2] + ((s1[i1] === s2[i2]) ? 0 : costRep) c1 = p1[i2 + 1] + costDel if (c1 &lt; c0) &#123; c0 = c1 &#125; c2 = p2[i2] + costIns if (c2 &lt; c0) &#123; c0 = c2 &#125; p2[i2 + 1] = c0 &#125; tmp = p1 p1 = p2 p2 = tmp &#125; c0 = p1[l2] return c0&#125;","raw":null,"content":null},{"title":"PHP's lcfirst in JavaScript","date":"2016-05-11T20:27:49.986Z","updated":"2016-05-11T20:27:49.986Z","comments":true,"path":"php/strings/lcfirst/index.html","permalink":"http://locutus.io/php/strings/lcfirst/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function lcfirst (str) &#123; // discuss at: http://locutus.io/php/lcfirst/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: lcfirst('Kevin Van Zonneveld') // returns 1: 'kevin Van Zonneveld' str += '' var f = str.charAt(0) .toLowerCase() return f + str.substr(1)&#125;","raw":null,"content":null},{"title":"PHP's join in JavaScript","date":"2016-05-11T20:27:49.986Z","updated":"2016-05-11T20:27:49.986Z","comments":true,"path":"php/strings/join/index.html","permalink":"http://locutus.io/php/strings/join/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function join (glue, pieces) &#123; // discuss at: http://locutus.io/php/join/ // original by: Kevin van Zonneveld (http://kvz.io) // example 1: join(' ', ['Kevin', 'van', 'Zonneveld']) // returns 1: 'Kevin van Zonneveld' var implode = require('../strings/implode') return implode(glue, pieces)&#125;","raw":null,"content":null},{"title":"PHP's strings extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/strings/index.html","permalink":"http://locutus.io/php/strings/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's implode in JavaScript","date":"2016-05-11T20:27:49.986Z","updated":"2016-05-11T20:27:49.986Z","comments":true,"path":"php/strings/implode/index.html","permalink":"http://locutus.io/php/strings/implode/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233module.exports = function implode (glue, pieces) &#123; // discuss at: http://locutus.io/php/implode/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Waldo Malqui Silva (http://waldo.malqui.info) // improved by: Itsacon (http://www.itsacon.net/) // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: implode(' ', ['Kevin', 'van', 'Zonneveld']) // returns 1: 'Kevin van Zonneveld' // example 2: implode(' ', &#123;first:'Kevin', last: 'van Zonneveld'&#125;) // returns 2: 'Kevin van Zonneveld' var i = '' var retVal = '' var tGlue = '' if (arguments.length === 1) &#123; pieces = glue glue = '' &#125; if (typeof pieces === 'object') &#123; if (Object.prototype.toString.call(pieces) === '[object Array]') &#123; return pieces.join(glue) &#125; for (i in pieces) &#123; retVal += tGlue + pieces[i] tGlue = glue &#125; return retVal &#125; return pieces&#125;","raw":null,"content":null},{"title":"PHP's htmlspecialchars_decode in JavaScript","date":"2016-05-11T20:27:49.982Z","updated":"2016-05-11T20:27:49.982Z","comments":true,"path":"php/strings/htmlspecialchars_decode/index.html","permalink":"http://locutus.io/php/strings/htmlspecialchars_decode/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869module.exports = function htmlspecialchars_decode (string, quoteStyle) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/htmlspecialchars_decode/ // original by: Mirek Slugen // improved by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Mateusz \"loonquawl\" Zalega // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Brett Zamir (http://brett-zamir.me) // input by: ReverseSyntax // input by: Slawomir Kaniecki // input by: Scott Cariss // input by: Francois // input by: Ratheous // input by: Mailfaker (http://www.weedem.fr/) // revised by: Kevin van Zonneveld (http://kvz.io) // reimplemented by: Brett Zamir (http://brett-zamir.me) // example 1: htmlspecialchars_decode(\"&lt;p&gt;this -&amp;gt; &amp;quot;&lt;/p&gt;\", 'ENT_NOQUOTES') // returns 1: '&lt;p&gt;this -&gt; &amp;quot;&lt;/p&gt;' // example 2: htmlspecialchars_decode(\"&amp;amp;quot;\") // returns 2: '&amp;quot;' var optTemp = 0 var i = 0 var noquotes = false if (typeof quoteStyle === 'undefined') &#123; quoteStyle = 2 &#125; string = string.toString() .replace(/&amp;lt;/g, '&lt;') .replace(/&amp;gt;/g, '&gt;') var OPTS = &#123; 'ENT_NOQUOTES': 0, 'ENT_HTML_QUOTE_SINGLE': 1, 'ENT_HTML_QUOTE_DOUBLE': 2, 'ENT_COMPAT': 2, 'ENT_QUOTES': 3, 'ENT_IGNORE': 4 &#125; if (quoteStyle === 0) &#123; noquotes = true &#125; if (typeof quoteStyle !== 'number') &#123; // Allow for a single string or an array of string flags quoteStyle = [].concat(quoteStyle) for (i = 0; i &lt; quoteStyle.length; i++) &#123; // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4 if (OPTS[quoteStyle[i]] === 0) &#123; noquotes = true &#125; else if (OPTS[quoteStyle[i]]) &#123; optTemp = optTemp | OPTS[quoteStyle[i]] &#125; &#125; quoteStyle = optTemp &#125; if (quoteStyle &amp; OPTS.ENT_HTML_QUOTE_SINGLE) &#123; // PHP doesn't currently escape if more than one 0, but it should: string = string.replace(/&amp;#0*39;/g, \"'\") // This would also be useful here, but not a part of PHP: // string = string.replace(/&amp;apos;|&amp;#x0*27;/g, \"'\"); &#125; if (!noquotes) &#123; string = string.replace(/&amp;quot;/g, '\"') &#125; // Put this in last place to avoid escape being double-decoded string = string.replace(/&amp;amp;/g, '&amp;') return string&#125;","raw":null,"content":null},{"title":"PHP's htmlspecialchars in JavaScript","date":"2016-05-11T20:27:49.986Z","updated":"2016-05-11T20:27:49.986Z","comments":true,"path":"php/strings/htmlspecialchars/index.html","permalink":"http://locutus.io/php/strings/htmlspecialchars/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172module.exports = function htmlspecialchars (string, quoteStyle, charset, doubleEncode) &#123; // discuss at: http://locutus.io/php/htmlspecialchars/ // original by: Mirek Slugen // improved by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Nathan // bugfixed by: Arno // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Brett Zamir (http://brett-zamir.me) // revised by: Kevin van Zonneveld (http://kvz.io) // input by: Ratheous // input by: Mailfaker (http://www.weedem.fr/) // input by: felix // reimplemented by: Brett Zamir (http://brett-zamir.me) // note 1: charset argument not supported // example 1: htmlspecialchars(\"&lt;a href='test'&gt;Test&lt;/a&gt;\", 'ENT_QUOTES') // returns 1: '&amp;lt;a href=&amp;#039;test&amp;#039;&amp;gt;Test&amp;lt;/a&amp;gt;' // example 2: htmlspecialchars(\"ab\\\"c'd\", ['ENT_NOQUOTES', 'ENT_QUOTES']) // returns 2: 'ab\"c&amp;#039;d' // example 3: htmlspecialchars('my \"&amp;entity;\" is still here', null, null, false) // returns 3: 'my &amp;quot;&amp;entity;&amp;quot; is still here' var optTemp = 0 var i = 0 var noquotes = false if (typeof quoteStyle === 'undefined' || quoteStyle === null) &#123; quoteStyle = 2 &#125; string = string || '' string = string.toString() if (doubleEncode !== false) &#123; // Put this first to avoid double-encoding string = string.replace(/&amp;/g, '&amp;amp;') &#125; string = string .replace(/&lt;/g, '&amp;lt;') .replace(/&gt;/g, '&amp;gt;') var OPTS = &#123; 'ENT_NOQUOTES': 0, 'ENT_HTML_QUOTE_SINGLE': 1, 'ENT_HTML_QUOTE_DOUBLE': 2, 'ENT_COMPAT': 2, 'ENT_QUOTES': 3, 'ENT_IGNORE': 4 &#125; if (quoteStyle === 0) &#123; noquotes = true &#125; if (typeof quoteStyle !== 'number') &#123; // Allow for a single string or an array of string flags quoteStyle = [].concat(quoteStyle) for (i = 0; i &lt; quoteStyle.length; i++) &#123; // Resolve string input to bitwise e.g. 'ENT_IGNORE' becomes 4 if (OPTS[quoteStyle[i]] === 0) &#123; noquotes = true &#125; else if (OPTS[quoteStyle[i]]) &#123; optTemp = optTemp | OPTS[quoteStyle[i]] &#125; &#125; quoteStyle = optTemp &#125; if (quoteStyle &amp; OPTS.ENT_HTML_QUOTE_SINGLE) &#123; string = string.replace(/'/g, '&amp;#039;') &#125; if (!noquotes) &#123; string = string.replace(/\"/g, '&amp;quot;') &#125; return string&#125;","raw":null,"content":null},{"title":"PHP's htmlentities in JavaScript","date":"2016-05-11T20:27:49.978Z","updated":"2016-05-11T20:27:49.978Z","comments":true,"path":"php/strings/htmlentities/index.html","permalink":"http://locutus.io/php/strings/htmlentities/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748module.exports = function htmlentities (string, quoteStyle, charset, doubleEncode) &#123; // discuss at: http://locutus.io/php/htmlentities/ // original by: Kevin van Zonneveld (http://kvz.io) // revised by: Kevin van Zonneveld (http://kvz.io) // revised by: Kevin van Zonneveld (http://kvz.io) // improved by: nobbler // improved by: Jack // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // improved by: Dj (http://locutus.io/php/htmlentities:425#comment_134018) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Brett Zamir (http://brett-zamir.me) // input by: Ratheous // note 1: function is compatible with PHP 5.2 and older // example 1: htmlentities('Kevin &amp; van Zonneveld') // returns 1: 'Kevin &amp;amp; van Zonneveld' // example 2: htmlentities(\"foo'bar\",\"ENT_QUOTES\") // returns 2: 'foo&amp;#039;bar' var getHtmlTranslationTable = require('../strings/get_html_translation_table') var hashMap = getHtmlTranslationTable('HTML_ENTITIES', quoteStyle) string = string === null ? '' : string + '' if (!hashMap) &#123; return false &#125; if (quoteStyle &amp;&amp; quoteStyle === 'ENT_QUOTES') &#123; hashMap[\"'\"] = '&amp;#039;' &#125; doubleEncode = doubleEncode === null || !!doubleEncode var regex = new RegExp('&amp;(?:#\\\\d+|#x[\\\\da-f]+|[a-zA-Z][\\\\da-z]*);|[' + Object.keys(hashMap) .join('') // replace regexp special chars .replace(/([()[\\]&#123;&#125;\\-.*+?^$|\\/\\\\])/g, '\\\\$1') + ']', 'g') return string.replace(regex, function (ent) &#123; if (ent.length &gt; 1) &#123; return doubleEncode ? hashMap['&amp;'] + ent.substr(1) : ent &#125; return hashMap[ent] &#125;)&#125;","raw":null,"content":null},{"title":"PHP's html_entity_decode in JavaScript","date":"2016-05-11T20:27:49.978Z","updated":"2016-05-11T20:27:49.978Z","comments":true,"path":"php/strings/html_entity_decode/index.html","permalink":"http://locutus.io/php/strings/html_entity_decode/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142module.exports = function html_entity_decode (string, quoteStyle) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/html_entity_decode/ // original by: john (http://www.jd-tech.net) // input by: ger // input by: Ratheous // input by: Nick Kolosov (http://sammy.ru) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: marc andreu // revised by: Kevin van Zonneveld (http://kvz.io) // revised by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Fox // example 1: html_entity_decode('Kevin &amp;amp; van Zonneveld') // returns 1: 'Kevin &amp; van Zonneveld' // example 2: html_entity_decode('&amp;amp;lt;') // returns 2: '&amp;lt;' var getHtmlTranslationTable = require('../strings/get_html_translation_table') var tmpStr = '' var entity = '' var symbol = '' tmpStr = string.toString() var hashMap = getHtmlTranslationTable('HTML_ENTITIES', quoteStyle) if (hashMap === false) &#123; return false &#125; // @todo: &amp;amp; problem // http://locutus.io/php/get_html_translation_table:416#comment_97660 delete (hashMap['&amp;']) hashMap['&amp;'] = '&amp;amp;' for (symbol in hashMap) &#123; entity = hashMap[symbol] tmpStr = tmpStr.split(entity).join(symbol) &#125; tmpStr = tmpStr.split('&amp;#039;').join(\"'\") return tmpStr&#125;","raw":null,"content":null},{"title":"PHP's hex2bin in JavaScript","date":"2016-05-11T20:27:49.978Z","updated":"2016-05-11T20:27:49.978Z","comments":true,"path":"php/strings/hex2bin/index.html","permalink":"http://locutus.io/php/strings/hex2bin/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425module.exports = function hex2bin (s) &#123; // discuss at: http://locutus.io/php/hex2bin/ // original by: Dumitru Uzun (http://duzun.me) // example 1: hex2bin('44696d61') // returns 1: 'Dima' // example 2: hex2bin('00') // returns 2: '\\x00' // example 3: hex2bin('2f1q') // returns 3: false var ret = [] var i = 0 var l s += '' for (l = s.length; i &lt; l; i += 2) &#123; var c = parseInt(s.substr(i, 1), 16) var k = parseInt(s.substr(i + 1, 1), 16) if (isNaN(c) || isNaN(k)) return false ret.push((c &lt;&lt; 4) | k) &#125; return String.fromCharCode.apply(String, ret)&#125;","raw":null,"content":null},{"title":"PHP's get_html_translation_table in JavaScript","date":"2016-05-11T20:27:49.978Z","updated":"2016-05-11T20:27:49.978Z","comments":true,"path":"php/strings/get_html_translation_table/index.html","permalink":"http://locutus.io/php/strings/get_html_translation_table/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170module.exports = function get_html_translation_table (table, quoteStyle) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/get_html_translation_table/ // original by: Philip Peterson // revised by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: noname // bugfixed by: Alex // bugfixed by: Marco // bugfixed by: madipta // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: T.Wild // improved by: KELAN // improved by: Brett Zamir (http://brett-zamir.me) // input by: Frank Forte // input by: Ratheous // note 1: It has been decided that we're not going to add global // note 1: dependencies to Locutus, meaning the constants are not // note 1: real constants, but strings instead. Integers are also supported if someone // note 1: chooses to create the constants themselves. // example 1: get_html_translation_table('HTML_SPECIALCHARS') // returns 1: &#123;'\"': '&amp;quot;', '&amp;': '&amp;amp;', '&lt;': '&amp;lt;', '&gt;': '&amp;gt;'&#125; var entities = &#123;&#125; var hashMap = &#123;&#125; var decimal var constMappingTable = &#123;&#125; var constMappingQuoteStyle = &#123;&#125; var useTable = &#123;&#125; var useQuoteStyle = &#123;&#125; // Translate arguments constMappingTable[0] = 'HTML_SPECIALCHARS' constMappingTable[1] = 'HTML_ENTITIES' constMappingQuoteStyle[0] = 'ENT_NOQUOTES' constMappingQuoteStyle[2] = 'ENT_COMPAT' constMappingQuoteStyle[3] = 'ENT_QUOTES' useTable = !isNaN(table) ? constMappingTable[table] : table ? table.toUpperCase() : 'HTML_SPECIALCHARS' useQuoteStyle = !isNaN(quoteStyle) ? constMappingQuoteStyle[quoteStyle] : quoteStyle ? quoteStyle.toUpperCase() : 'ENT_COMPAT' if (useTable !== 'HTML_SPECIALCHARS' &amp;&amp; useTable !== 'HTML_ENTITIES') &#123; throw new Error('Table: ' + useTable + ' not supported') &#125; entities['38'] = '&amp;amp;' if (useTable === 'HTML_ENTITIES') &#123; entities['160'] = '&amp;nbsp;' entities['161'] = '&amp;iexcl;' entities['162'] = '&amp;cent;' entities['163'] = '&amp;pound;' entities['164'] = '&amp;curren;' entities['165'] = '&amp;yen;' entities['166'] = '&amp;brvbar;' entities['167'] = '&amp;sect;' entities['168'] = '&amp;uml;' entities['169'] = '&amp;copy;' entities['170'] = '&amp;ordf;' entities['171'] = '&amp;laquo;' entities['172'] = '&amp;not;' entities['173'] = '&amp;shy;' entities['174'] = '&amp;reg;' entities['175'] = '&amp;macr;' entities['176'] = '&amp;deg;' entities['177'] = '&amp;plusmn;' entities['178'] = '&amp;sup2;' entities['179'] = '&amp;sup3;' entities['180'] = '&amp;acute;' entities['181'] = '&amp;micro;' entities['182'] = '&amp;para;' entities['183'] = '&amp;middot;' entities['184'] = '&amp;cedil;' entities['185'] = '&amp;sup1;' entities['186'] = '&amp;ordm;' entities['187'] = '&amp;raquo;' entities['188'] = '&amp;frac14;' entities['189'] = '&amp;frac12;' entities['190'] = '&amp;frac34;' entities['191'] = '&amp;iquest;' entities['192'] = '&amp;Agrave;' entities['193'] = '&amp;Aacute;' entities['194'] = '&amp;Acirc;' entities['195'] = '&amp;Atilde;' entities['196'] = '&amp;Auml;' entities['197'] = '&amp;Aring;' entities['198'] = '&amp;AElig;' entities['199'] = '&amp;Ccedil;' entities['200'] = '&amp;Egrave;' entities['201'] = '&amp;Eacute;' entities['202'] = '&amp;Ecirc;' entities['203'] = '&amp;Euml;' entities['204'] = '&amp;Igrave;' entities['205'] = '&amp;Iacute;' entities['206'] = '&amp;Icirc;' entities['207'] = '&amp;Iuml;' entities['208'] = '&amp;ETH;' entities['209'] = '&amp;Ntilde;' entities['210'] = '&amp;Ograve;' entities['211'] = '&amp;Oacute;' entities['212'] = '&amp;Ocirc;' entities['213'] = '&amp;Otilde;' entities['214'] = '&amp;Ouml;' entities['215'] = '&amp;times;' entities['216'] = '&amp;Oslash;' entities['217'] = '&amp;Ugrave;' entities['218'] = '&amp;Uacute;' entities['219'] = '&amp;Ucirc;' entities['220'] = '&amp;Uuml;' entities['221'] = '&amp;Yacute;' entities['222'] = '&amp;THORN;' entities['223'] = '&amp;szlig;' entities['224'] = '&amp;agrave;' entities['225'] = '&amp;aacute;' entities['226'] = '&amp;acirc;' entities['227'] = '&amp;atilde;' entities['228'] = '&amp;auml;' entities['229'] = '&amp;aring;' entities['230'] = '&amp;aelig;' entities['231'] = '&amp;ccedil;' entities['232'] = '&amp;egrave;' entities['233'] = '&amp;eacute;' entities['234'] = '&amp;ecirc;' entities['235'] = '&amp;euml;' entities['236'] = '&amp;igrave;' entities['237'] = '&amp;iacute;' entities['238'] = '&amp;icirc;' entities['239'] = '&amp;iuml;' entities['240'] = '&amp;eth;' entities['241'] = '&amp;ntilde;' entities['242'] = '&amp;ograve;' entities['243'] = '&amp;oacute;' entities['244'] = '&amp;ocirc;' entities['245'] = '&amp;otilde;' entities['246'] = '&amp;ouml;' entities['247'] = '&amp;divide;' entities['248'] = '&amp;oslash;' entities['249'] = '&amp;ugrave;' entities['250'] = '&amp;uacute;' entities['251'] = '&amp;ucirc;' entities['252'] = '&amp;uuml;' entities['253'] = '&amp;yacute;' entities['254'] = '&amp;thorn;' entities['255'] = '&amp;yuml;' &#125; if (useQuoteStyle !== 'ENT_NOQUOTES') &#123; entities['34'] = '&amp;quot;' &#125; if (useQuoteStyle === 'ENT_QUOTES') &#123; entities['39'] = '&amp;#39;' &#125; entities['60'] = '&amp;lt;' entities['62'] = '&amp;gt;' // ascii decimals to real symbols for (decimal in entities) &#123; if (entities.hasOwnProperty(decimal)) &#123; hashMap[String.fromCharCode(decimal)] = entities[decimal] &#125; &#125; return hashMap&#125;","raw":null,"content":null},{"title":"PHP's explode in JavaScript","date":"2016-05-11T20:27:49.978Z","updated":"2016-05-11T20:27:49.978Z","comments":true,"path":"php/strings/explode/index.html","permalink":"http://locutus.io/php/strings/explode/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859module.exports = function explode (delimiter, string, limit) &#123; // discuss at: http://locutus.io/php/explode/ // original by: Kevin van Zonneveld (http://kvz.io) // example 1: explode(' ', 'Kevin van Zonneveld') // returns 1: [ 'Kevin', 'van', 'Zonneveld' ] if (arguments.length &lt; 2 || typeof delimiter === 'undefined' || typeof string === 'undefined') &#123; return null &#125; if (delimiter === '' || delimiter === false || delimiter === null) &#123; return false &#125; if (typeof delimiter === 'function' || typeof delimiter === 'object' || typeof string === 'function' || typeof string === 'object') &#123; return &#123; 0: '' &#125; &#125; if (delimiter === true) &#123; delimiter = '1' &#125; // Here we go... delimiter += '' string += '' var s = string.split(delimiter) if (typeof limit === 'undefined') return s // Support for limit if (limit === 0) limit = 1 // Positive limit if (limit &gt; 0) &#123; if (limit &gt;= s.length) &#123; return s &#125; return s .slice(0, limit - 1) .concat([s.slice(limit - 1) .join(delimiter) ]) &#125; // Negative limit if (-limit &gt;= s.length) &#123; return [] &#125; s.splice(s.length + limit) return s&#125;","raw":null,"content":null},{"title":"PHP's echo in JavaScript","date":"2016-05-11T20:27:49.978Z","updated":"2016-05-11T20:27:49.978Z","comments":true,"path":"php/strings/echo/index.html","permalink":"http://locutus.io/php/strings/echo/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829module.exports = function echo () &#123; // discuss at: http://locutus.io/php/echo/ // original by: Philip Peterson // improved by: echo is bad // improved by: Nate // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // revised by: Der Simon (http://innerdom.sourceforge.net/) // bugfixed by: Eugene Bulkin (http://doubleaw.com/) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: EdorFaus // note 1: In 1.3.2 and earlier, this function wrote to the body of the document when it // note 1: was called in webbrowsers, in addition to supporting XUL. // note 1: This involved &gt;100 lines of boilerplate to do this in a safe way. // note 1: Since I can't imageine a complelling use-case for this, and XUL is deprecated // note 1: I have removed this behavior in favor of just calling `console.log` // note 2: You'll see functions depends on `echo` instead of `console.log` as we'll want // note 2: to have 1 contact point to interface with the outside world, so that it's easy // note 2: to support other ways of printing output. // revised by: Kevin van Zonneveld (http://kvz.io) // input by: JB // example 1: echo('Hello world') // returns 1: undefined var args = Array.prototype.slice.call(arguments) return console.log(args.join(' '))&#125;","raw":null,"content":null},{"title":"PHP's crc32 in JavaScript","date":"2016-05-11T20:27:49.978Z","updated":"2016-05-11T20:27:49.978Z","comments":true,"path":"php/strings/crc32/index.html","permalink":"http://locutus.io/php/strings/crc32/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283module.exports = function crc32 (str) &#123; // discuss at: http://locutus.io/php/crc32/ // original by: Webtoolkit.info (http://www.webtoolkit.info/) // improved by: T0bsn // example 1: crc32('Kevin van Zonneveld') // returns 1: 1249991249 var utf8Encode = require('../xml/utf8_encode') str = utf8Encode(str) var table = [ '00000000', '77073096', 'EE0E612C', '990951BA', '076DC419', '706AF48F', 'E963A535', '9E6495A3', '0EDB8832', '79DCB8A4', 'E0D5E91E', '97D2D988', '09B64C2B', '7EB17CBD', 'E7B82D07', '90BF1D91', '1DB71064', '6AB020F2', 'F3B97148', '84BE41DE', '1ADAD47D', '6DDDE4EB', 'F4D4B551', '83D385C7', '136C9856', '646BA8C0', 'FD62F97A', '8A65C9EC', '14015C4F', '63066CD9', 'FA0F3D63', '8D080DF5', '3B6E20C8', '4C69105E', 'D56041E4', 'A2677172', '3C03E4D1', '4B04D447', 'D20D85FD', 'A50AB56B', '35B5A8FA', '42B2986C', 'DBBBC9D6', 'ACBCF940', '32D86CE3', '45DF5C75', 'DCD60DCF', 'ABD13D59', '26D930AC', '51DE003A', 'C8D75180', 'BFD06116', '21B4F4B5', '56B3C423', 'CFBA9599', 'B8BDA50F', '2802B89E', '5F058808', 'C60CD9B2', 'B10BE924', '2F6F7C87', '58684C11', 'C1611DAB', 'B6662D3D', '76DC4190', '01DB7106', '98D220BC', 'EFD5102A', '71B18589', '06B6B51F', '9FBFE4A5', 'E8B8D433', '7807C9A2', '0F00F934', '9609A88E', 'E10E9818', '7F6A0DBB', '086D3D2D', '91646C97', 'E6635C01', '6B6B51F4', '1C6C6162', '856530D8', 'F262004E', '6C0695ED', '1B01A57B', '8208F4C1', 'F50FC457', '65B0D9C6', '12B7E950', '8BBEB8EA', 'FCB9887C', '62DD1DDF', '15DA2D49', '8CD37CF3', 'FBD44C65', '4DB26158', '3AB551CE', 'A3BC0074', 'D4BB30E2', '4ADFA541', '3DD895D7', 'A4D1C46D', 'D3D6F4FB', '4369E96A', '346ED9FC', 'AD678846', 'DA60B8D0', '44042D73', '33031DE5', 'AA0A4C5F', 'DD0D7CC9', '5005713C', '270241AA', 'BE0B1010', 'C90C2086', '5768B525', '206F85B3', 'B966D409', 'CE61E49F', '5EDEF90E', '29D9C998', 'B0D09822', 'C7D7A8B4', '59B33D17', '2EB40D81', 'B7BD5C3B', 'C0BA6CAD', 'EDB88320', '9ABFB3B6', '03B6E20C', '74B1D29A', 'EAD54739', '9DD277AF', '04DB2615', '73DC1683', 'E3630B12', '94643B84', '0D6D6A3E', '7A6A5AA8', 'E40ECF0B', '9309FF9D', '0A00AE27', '7D079EB1', 'F00F9344', '8708A3D2', '1E01F268', '6906C2FE', 'F762575D', '806567CB', '196C3671', '6E6B06E7', 'FED41B76', '89D32BE0', '10DA7A5A', '67DD4ACC', 'F9B9DF6F', '8EBEEFF9', '17B7BE43', '60B08ED5', 'D6D6A3E8', 'A1D1937E', '38D8C2C4', '4FDFF252', 'D1BB67F1', 'A6BC5767', '3FB506DD', '48B2364B', 'D80D2BDA', 'AF0A1B4C', '36034AF6', '41047A60', 'DF60EFC3', 'A867DF55', '316E8EEF', '4669BE79', 'CB61B38C', 'BC66831A', '256FD2A0', '5268E236', 'CC0C7795', 'BB0B4703', '220216B9', '5505262F', 'C5BA3BBE', 'B2BD0B28', '2BB45A92', '5CB36A04', 'C2D7FFA7', 'B5D0CF31', '2CD99E8B', '5BDEAE1D', '9B64C2B0', 'EC63F226', '756AA39C', '026D930A', '9C0906A9', 'EB0E363F', '72076785', '05005713', '95BF4A82', 'E2B87A14', '7BB12BAE', '0CB61B38', '92D28E9B', 'E5D5BE0D', '7CDCEFB7', '0BDBDF21', '86D3D2D4', 'F1D4E242', '68DDB3F8', '1FDA836E', '81BE16CD', 'F6B9265B', '6FB077E1', '18B74777', '88085AE6', 'FF0F6A70', '66063BCA', '11010B5C', '8F659EFF', 'F862AE69', '616BFFD3', '166CCF45', 'A00AE278', 'D70DD2EE', '4E048354', '3903B3C2', 'A7672661', 'D06016F7', '4969474D', '3E6E77DB', 'AED16A4A', 'D9D65ADC', '40DF0B66', '37D83BF0', 'A9BCAE53', 'DEBB9EC5', '47B2CF7F', '30B5FFE9', 'BDBDF21C', 'CABAC28A', '53B39330', '24B4A3A6', 'BAD03605', 'CDD70693', '54DE5729', '23D967BF', 'B3667A2E', 'C4614AB8', '5D681B02', '2A6F2B94', 'B40BBE37', 'C30C8EA1', '5A05DF1B', '2D02EF8D' ].join(' ') // @todo: ^-- Now that `table` is an array, maybe we can use that directly using slices, // instead of converting it to a string and substringing var crc = 0 var x = 0 var y = 0 crc = crc ^ (-1) for (var i = 0, iTop = str.length; i &lt; iTop; i++) &#123; y = (crc ^ str.charCodeAt(i)) &amp; 0xFF x = '0x' + table.substr(y * 9, 8) crc = (crc &gt;&gt;&gt; 8) ^ x &#125; return crc ^ (-1)&#125;","raw":null,"content":null},{"title":"PHP's count_chars in JavaScript","date":"2016-05-11T20:27:49.974Z","updated":"2016-05-11T20:27:49.974Z","comments":true,"path":"php/strings/count_chars/index.html","permalink":"http://locutus.io/php/strings/count_chars/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455module.exports = function count_chars (str, mode) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/count_chars/ // original by: Ates Goral (http://magnetiq.com) // improved by: Jack // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // revised by: Theriault (https://github.com/Theriault) // example 1: count_chars(\"Hello World!\", 3) // returns 1: \" !HWdelor\" // example 2: count_chars(\"Hello World!\", 1) // returns 2: &#123;32:1,33:1,72:1,87:1,100:1,101:1,108:3,111:2,114:1&#125; var result = &#123;&#125; var resultArr = [] var i str = ('' + str) .split('') .sort() .join('') .match(/(.)\\1*/g) if ((mode &amp; 1) === 0) &#123; for (i = 0; i !== 256; i++) &#123; result[i] = 0 &#125; &#125; if (mode === 2 || mode === 4) &#123; for (i = 0; i !== str.length; i += 1) &#123; delete result[str[i].charCodeAt(0)] &#125; for (i in result) &#123; result[i] = (mode === 4) ? String.fromCharCode(i) : 0 &#125; &#125; else if (mode === 3) &#123; for (i = 0; i !== str.length; i += 1) &#123; result[i] = str[i].slice(0, 1) &#125; &#125; else &#123; for (i = 0; i !== str.length; i += 1) &#123; result[str[i].charCodeAt(0)] = str[i].length &#125; &#125; if (mode &lt; 3) &#123; return result &#125; for (i in result) &#123; resultArr.push(result[i]) &#125; return resultArr.join('')&#125;","raw":null,"content":null},{"title":"PHP's convert_uuencode in JavaScript","date":"2016-05-11T20:27:49.970Z","updated":"2016-05-11T20:27:49.970Z","comments":true,"path":"php/strings/convert_uuencode/index.html","permalink":"http://locutus.io/php/strings/convert_uuencode/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677module.exports = function convert_uuencode (str) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/convert_uuencode/ // original by: Ole Vrijenhoek // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // reimplemented by: Ole Vrijenhoek // example 1: convert_uuencode(\"test\\ntext text\\r\\n\") // returns 1: \"0=&amp;5S=`IT97AT('1E&gt;'0-\\\"@\\n`\\n\" var isScalar = require('../var/is_scalar') var chr = function (c) &#123; return String.fromCharCode(c) &#125; if (!str || str === '') &#123; return chr(0) &#125; else if (!isScalar(str)) &#123; return false &#125; var c = 0 var u = 0 var i = 0 var a = 0 var encoded = '' var tmp1 = '' var tmp2 = '' var bytes = &#123;&#125; // divide string into chunks of 45 characters var chunk = function () &#123; bytes = str.substr(u, 45).split('') for (i in bytes) &#123; bytes[i] = bytes[i].charCodeAt(0) &#125; return bytes.length || 0 &#125; while ((c = chunk()) !== 0) &#123; u += 45 // New line encoded data starts with number of bytes encoded. encoded += chr(c + 32) // Convert each char in bytes[] to a byte for (i in bytes) &#123; tmp1 = bytes[i].toString(2) while (tmp1.length &lt; 8) &#123; tmp1 = '0' + tmp1 &#125; tmp2 += tmp1 &#125; while (tmp2.length % 6) &#123; tmp2 = tmp2 + '0' &#125; for (i = 0; i &lt;= (tmp2.length / 6) - 1; i++) &#123; tmp1 = tmp2.substr(a, 6) if (tmp1 === '000000') &#123; encoded += chr(96) &#125; else &#123; encoded += chr(parseInt(tmp1, 2) + 32) &#125; a += 6 &#125; a = 0 tmp2 = '' encoded += '\\n' &#125; // Add termination characters encoded += chr(96) + '\\n' return encoded&#125;","raw":null,"content":null},{"title":"PHP's convert_cyr_string in JavaScript","date":"2016-05-11T20:27:49.970Z","updated":"2016-05-11T20:27:49.970Z","comments":true,"path":"php/strings/convert_cyr_string/index.html","permalink":"http://locutus.io/php/strings/convert_cyr_string/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939940941942943944945946947948949950951952953954955956957958959960961962963964965966967968969970971972973974975976977978979980981982983984985986987988989990991992993994995996997998999100010011002100310041005100610071008100910101011101210131014101510161017101810191020102110221023102410251026102710281029103010311032103310341035103610371038103910401041104210431044104510461047104810491050105110521053105410551056105710581059106010611062106310641065106610671068106910701071107210731074107510761077107810791080108110821083108410851086108710881089109010911092109310941095109610971098109911001101110211031104110511061107110811091110111111121113111411151116111711181119112011211122112311241125112611271128112911301131113211331134113511361137113811391140114111421143114411451146114711481149115011511152115311541155115611571158115911601161116211631164116511661167116811691170117111721173117411751176117711781179118011811182118311841185118611871188118911901191119211931194119511961197119811991200120112021203120412051206120712081209121012111212121312141215121612171218121912201221122212231224122512261227122812291230123112321233123412351236123712381239124012411242124312441245124612471248124912501251125212531254125512561257125812591260126112621263126412651266126712681269127012711272127312741275127612771278127912801281128212831284128512861287128812891290129112921293129412951296129712981299130013011302130313041305130613071308130913101311131213131314131513161317131813191320132113221323132413251326132713281329133013311332133313341335133613371338133913401341134213431344134513461347134813491350135113521353135413551356135713581359136013611362136313641365136613671368136913701371137213731374137513761377137813791380138113821383138413851386138713881389139013911392139313941395139613971398139914001401140214031404140514061407140814091410141114121413141414151416141714181419142014211422142314241425142614271428142914301431143214331434143514361437143814391440144114421443144414451446144714481449145014511452145314541455145614571458145914601461146214631464146514661467146814691470147114721473147414751476147714781479148014811482148314841485148614871488148914901491149214931494149514961497149814991500150115021503150415051506150715081509151015111512151315141515151615171518151915201521152215231524152515261527152815291530153115321533153415351536153715381539154015411542154315441545154615471548154915501551155215531554155515561557155815591560156115621563156415651566156715681569157015711572157315741575157615771578157915801581158215831584158515861587158815891590159115921593159415951596159715981599160016011602160316041605160616071608160916101611161216131614161516161617161816191620162116221623162416251626162716281629163016311632163316341635163616371638163916401641164216431644164516461647164816491650165116521653165416551656165716581659166016611662166316641665166616671668166916701671167216731674167516761677167816791680168116821683168416851686168716881689169016911692169316941695169616971698169917001701170217031704170517061707170817091710171117121713171417151716171717181719172017211722172317241725172617271728172917301731173217331734173517361737173817391740174117421743174417451746174717481749175017511752175317541755175617571758175917601761176217631764176517661767176817691770177117721773177417751776177717781779178017811782178317841785178617871788178917901791179217931794179517961797179817991800180118021803180418051806180718081809181018111812181318141815181618171818181918201821182218231824182518261827182818291830183118321833183418351836183718381839184018411842184318441845184618471848184918501851185218531854185518561857185818591860186118621863186418651866186718681869187018711872187318741875187618771878187918801881188218831884188518861887188818891890189118921893189418951896189718981899190019011902190319041905190619071908190919101911191219131914191519161917191819191920192119221923192419251926192719281929193019311932193319341935193619371938193919401941194219431944194519461947194819491950195119521953195419551956195719581959196019611962196319641965196619671968196919701971197219731974197519761977197819791980198119821983198419851986198719881989199019911992199319941995199619971998199920002001200220032004200520062007200820092010201120122013201420152016201720182019202020212022202320242025202620272028202920302031203220332034203520362037203820392040204120422043204420452046204720482049205020512052205320542055205620572058205920602061206220632064206520662067206820692070207120722073207420752076207720782079208020812082208320842085208620872088208920902091209220932094209520962097209820992100210121022103210421052106210721082109211021112112211321142115211621172118211921202121212221232124212521262127212821292130213121322133213421352136213721382139module.exports = function convert_cyr_string (str, from, to) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/convert_cyr_string/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: Assumes and converts to Unicode strings with character // note 1: code equivalents of the same numbers as in the from or // note 1: target character set; Note that neither the input or output // note 1: should be treated as actual Unicode, since the PHP function // note 1: this is original by does not either // note 1: One could easily represent (or convert the results) of a // note 1: string form as arrays of code points instead but since JavaScript // note 1: currently has no clear binary data type, we chose to use strings // note 1: as in PHP // example 1: convert_cyr_string(String.fromCharCode(214), 'k', 'w').charCodeAt(0) === 230; // Char. 214 of KOI8-R gives equivalent number value 230 in win1251 // returns 1: true var _cyrWin1251 = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 154, 174, 190, 46, 159, 189, 46, 46, 179, 191, 180, 157, 46, 46, 156, 183, 46, 46, 182, 166, 173, 46, 46, 158, 163, 152, 164, 155, 46, 46, 46, 167, 225, 226, 247, 231, 228, 229, 246, 250, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 230, 232, 227, 254, 251, 253, 255, 249, 248, 252, 224, 241, 193, 194, 215, 199, 196, 197, 214, 218, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 198, 200, 195, 222, 219, 221, 223, 217, 216, 220, 192, 209, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 184, 186, 32, 179, 191, 32, 32, 32, 32, 32, 180, 162, 32, 32, 32, 32, 168, 170, 32, 178, 175, 32, 32, 32, 32, 32, 165, 161, 169, 254, 224, 225, 246, 228, 229, 244, 227, 245, 232, 233, 234, 235, 236, 237, 238, 239, 255, 240, 241, 242, 243, 230, 226, 252, 251, 231, 248, 253, 249, 247, 250, 222, 192, 193, 214, 196, 197, 212, 195, 213, 200, 201, 202, 203, 204, 205, 206, 207, 223, 208, 209, 210, 211, 198, 194, 220, 219, 199, 216, 221, 217, 215, 218 ] var _cyrCp866 = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 225, 226, 247, 231, 228, 229, 246, 250, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 230, 232, 227, 254, 251, 253, 255, 249, 248, 252, 224, 241, 193, 194, 215, 199, 196, 197, 214, 218, 201, 202, 203, 204, 205, 206, 207, 208, 35, 35, 35, 124, 124, 124, 124, 43, 43, 124, 124, 43, 43, 43, 43, 43, 43, 45, 45, 124, 45, 43, 124, 124, 43, 43, 45, 45, 124, 45, 43, 45, 45, 45, 45, 43, 43, 43, 43, 43, 43, 43, 43, 35, 35, 124, 124, 35, 210, 211, 212, 213, 198, 200, 195, 222, 219, 221, 223, 217, 216, 220, 192, 209, 179, 163, 180, 164, 183, 167, 190, 174, 32, 149, 158, 32, 152, 159, 148, 154, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 205, 186, 213, 241, 243, 201, 32, 245, 187, 212, 211, 200, 190, 32, 247, 198, 199, 204, 181, 240, 242, 185, 32, 244, 203, 207, 208, 202, 216, 32, 246, 32, 238, 160, 161, 230, 164, 165, 228, 163, 229, 168, 169, 170, 171, 172, 173, 174, 175, 239, 224, 225, 226, 227, 166, 162, 236, 235, 167, 232, 237, 233, 231, 234, 158, 128, 129, 150, 132, 133, 148, 131, 149, 136, 137, 138, 139, 140, 141, 142, 143, 159, 144, 145, 146, 147, 134, 130, 156, 155, 135, 152, 157, 153, 151, 154 ] var _cyrIso88595 = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 179, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 225, 226, 247, 231, 228, 229, 246, 250, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 230, 232, 227, 254, 251, 253, 255, 249, 248, 252, 224, 241, 193, 194, 215, 199, 196, 197, 214, 218, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 198, 200, 195, 222, 219, 221, 223, 217, 216, 220, 192, 209, 32, 163, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 241, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 161, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 238, 208, 209, 230, 212, 213, 228, 211, 229, 216, 217, 218, 219, 220, 221, 222, 223, 239, 224, 225, 226, 227, 214, 210, 236, 235, 215, 232, 237, 233, 231, 234, 206, 176, 177, 198, 180, 181, 196, 179, 197, 184, 185, 186, 187, 188, 189, 190, 191, 207, 192, 193, 194, 195, 182, 178, 204, 203, 183, 200, 205, 201, 199, 202 ] var _cyrMac = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 225, 226, 247, 231, 228, 229, 246, 250, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 230, 232, 227, 254, 251, 253, 255, 249, 248, 252, 224, 241, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 179, 163, 209, 193, 194, 215, 199, 196, 197, 214, 218, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 198, 200, 195, 222, 219, 221, 223, 217, 216, 220, 192, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 160, 161, 162, 222, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 221, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 254, 224, 225, 246, 228, 229, 244, 227, 245, 232, 233, 234, 235, 236, 237, 238, 239, 223, 240, 241, 242, 243, 230, 226, 252, 251, 231, 248, 253, 249, 247, 250, 158, 128, 129, 150, 132, 133, 148, 131, 149, 136, 137, 138, 139, 140, 141, 142, 143, 159, 144, 145, 146, 147, 134, 130, 156, 155, 135, 152, 157, 153, 151, 154 ] var fromTable = null var toTable = null var tmp var i = 0 var retStr = '' switch (from.toUpperCase()) &#123; case 'W': fromTable = _cyrWin1251 break case 'A': case 'D': fromTable = _cyrCp866 break case 'I': fromTable = _cyrIso88595 break case 'M': fromTable = _cyrMac break case 'K': break default: // Can we throw a warning instead? That would be more in line with PHP throw new Error('Unknown source charset: ' + fromTable) &#125; switch (to.toUpperCase()) &#123; case 'W': toTable = _cyrWin1251 break case 'A': case 'D': toTable = _cyrCp866 break case 'I': toTable = _cyrIso88595 break case 'M': toTable = _cyrMac break case 'K': break default: // Can we throw a warning instead? That would be more in line with PHP throw new Error('Unknown destination charset: ' + toTable) &#125; if (!str) &#123; return str &#125; for (i = 0; i &lt; str.length; i++) &#123; tmp = (fromTable === null) ? str.charAt(i) : String.fromCharCode(fromTable[str.charAt(i).charCodeAt(0)]) retStr += (toTable === null) ? tmp : String.fromCharCode(toTable[tmp.charCodeAt(0) + 256]) &#125; return retStr&#125;","raw":null,"content":null},{"title":"PHP's chunk_split in JavaScript","date":"2016-05-11T20:27:49.970Z","updated":"2016-05-11T20:27:49.970Z","comments":true,"path":"php/strings/chunk_split/index.html","permalink":"http://locutus.io/php/strings/chunk_split/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function chunk_split (body, chunklen, end) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/chunk_split/ // original by: Paulo Freitas // input by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // improved by: Theriault (https://github.com/Theriault) // example 1: chunk_split('Hello world!', 1, '*') // returns 1: 'H*e*l*l*o* *w*o*r*l*d*!*' // example 2: chunk_split('Hello world!', 10, '*') // returns 2: 'Hello worl*d!*' chunklen = parseInt(chunklen, 10) || 76 end = end || '\\r\\n' if (chunklen &lt; 1) &#123; return false &#125; return body.match(new RegExp('.&#123;0,' + chunklen + '&#125;', 'g')) .join(end)&#125;","raw":null,"content":null},{"title":"PHP's chr in JavaScript","date":"2016-05-11T20:27:49.970Z","updated":"2016-05-11T20:27:49.970Z","comments":true,"path":"php/strings/chr/index.html","permalink":"http://locutus.io/php/strings/chr/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718module.exports = function chr (codePt) &#123; // discuss at: http://locutus.io/php/chr/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: chr(75) === 'K' // example 1: chr(65536) === '\\uD800\\uDC00' // returns 1: true // returns 1: true if (codePt &gt; 0xFFFF) &#123; // Create a four-byte string (length 2) since this code point is high // enough for the UTF-16 encoding (JavaScript internal use), to // require representation with two surrogates (reserved non-characters // used for building other characters; the first is \"high\" and the next \"low\") codePt -= 0x10000 return String.fromCharCode(0xD800 + (codePt &gt;&gt; 10), 0xDC00 + (codePt &amp; 0x3FF)) &#125; return String.fromCharCode(codePt)&#125;","raw":null,"content":null},{"title":"PHP's chop in JavaScript","date":"2016-05-11T20:27:49.970Z","updated":"2016-05-11T20:27:49.970Z","comments":true,"path":"php/strings/chop/index.html","permalink":"http://locutus.io/php/strings/chop/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function chop (str, charlist) &#123; // discuss at: http://locutus.io/php/chop/ // original by: Paulo Freitas // example 1: chop(' Kevin van Zonneveld ') // returns 1: ' Kevin van Zonneveld' var rtrim = require('../strings/rtrim') return rtrim(str, charlist)&#125;","raw":null,"content":null},{"title":"PHP's bin2hex in JavaScript","date":"2016-05-11T20:27:49.970Z","updated":"2016-05-11T20:27:49.970Z","comments":true,"path":"php/strings/bin2hex/index.html","permalink":"http://locutus.io/php/strings/bin2hex/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526module.exports = function bin2hex (s) &#123; // discuss at: http://locutus.io/php/bin2hex/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // bugfixed by: Linuxworld // improved by: ntoniazzi (http://locutus.io/php/bin2hex:361#comment_177616) // example 1: bin2hex('Kev') // returns 1: '4b6576' // example 2: bin2hex(String.fromCharCode(0x00)) // returns 2: '00' var i var l var o = '' var n s += '' for (i = 0, l = s.length; i &lt; l; i++) &#123; n = s.charCodeAt(i) .toString(16) o += n.length &lt; 2 ? '0' + n : n &#125; return o&#125;","raw":null,"content":null},{"title":"PHP's addslashes in JavaScript","date":"2016-05-11T20:27:49.970Z","updated":"2016-05-11T20:27:49.970Z","comments":true,"path":"php/strings/addslashes/index.html","permalink":"http://locutus.io/php/strings/addslashes/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function addslashes (str) &#123; // discuss at: http://locutus.io/php/addslashes/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Ates Goral (http://magnetiq.com) // improved by: marrtins // improved by: Nate // improved by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Oskar Larsson H√∂gfeldt (http://oskar-lh.name/) // input by: Denny Wardhana // example 1: addslashes(\"kevin's birthday\") // returns 1: \"kevin\\\\'s birthday\" return (str + '') .replace(/[\\\\\"']/g, '\\\\$&amp;') .replace(/\\u0000/g, '\\\\0')&#125;","raw":null,"content":null},{"title":"PHP's addcslashes in JavaScript","date":"2016-05-11T20:27:49.966Z","updated":"2016-05-11T20:27:49.966Z","comments":true,"path":"php/strings/addcslashes/index.html","permalink":"http://locutus.io/php/strings/addcslashes/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173module.exports = function addcslashes (str, charlist) &#123; // discuss at: http://locutus.io/php/addcslashes/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: We show double backslashes in the return value example // note 1: code below because a JavaScript string will not // note 1: render them as backslashes otherwise // example 1: addcslashes('foo[ ]', 'A..z'); // Escape all ASCII within capital A to lower z range, including square brackets // returns 1: \"\\\\f\\\\o\\\\o\\\\[ \\\\]\" // example 2: addcslashes(\"zoo['.']\", 'z..A'); // Only escape z, period, and A here since not a lower-to-higher range // returns 2: \"\\\\zoo['\\\\.']\" // _example 3: addcslashes(\"@a\\u0000\\u0010\\u00A9\", \"\\0..\\37!@\\177..\\377\"); // Escape as octals those specified and less than 32 (0x20) or greater than 126 (0x7E), but not otherwise // _returns 3: '\\\\@a\\\\000\\\\020\\\\302\\\\251' // _example 4: addcslashes(\"\\u0020\\u007E\", \"\\40..\\175\"); // Those between 32 (0x20 or 040) and 126 (0x7E or 0176) decimal value will be backslashed if specified (not octalized) // _returns 4: '\\\\ ~' // _example 5: addcslashes(\"\\r\\u0007\\n\", '\\0..\\37'); // Recognize C escape sequences if specified // _returns 5: \"\\\\r\\\\a\\\\n\" // _example 6: addcslashes(\"\\r\\u0007\\n\", '\\0'); // Do not recognize C escape sequences if not specified // _returns 6: \"\\r\\u0007\\n\" var target = '' var chrs = [] var i = 0 var j = 0 var c = '' var next = '' var rangeBegin = '' var rangeEnd = '' var chr = '' var begin = 0 var end = 0 var octalLength = 0 var postOctalPos = 0 var cca = 0 var escHexGrp = [] var encoded = '' var percentHex = /%([\\dA-Fa-f]+)/g var _pad = function (n, c) &#123; if ((n = n + '').length &lt; c) &#123; return new Array(++c - n.length).join('0') + n &#125; return n &#125; for (i = 0; i &lt; charlist.length; i++) &#123; c = charlist.charAt(i) next = charlist.charAt(i + 1) if (c === '\\\\' &amp;&amp; next &amp;&amp; (/\\d/).test(next)) &#123; // Octal rangeBegin = charlist.slice(i + 1).match(/^\\d+/)[0] octalLength = rangeBegin.length postOctalPos = i + octalLength + 1 if (charlist.charAt(postOctalPos) + charlist.charAt(postOctalPos + 1) === '..') &#123; // Octal begins range begin = rangeBegin.charCodeAt(0) if ((/\\\\\\d/).test(charlist.charAt(postOctalPos + 2) + charlist.charAt(postOctalPos + 3))) &#123; // Range ends with octal rangeEnd = charlist.slice(postOctalPos + 3).match(/^\\d+/)[0] // Skip range end backslash i += 1 &#125; else if (charlist.charAt(postOctalPos + 2)) &#123; // Range ends with character rangeEnd = charlist.charAt(postOctalPos + 2) &#125; else &#123; throw new Error('Range with no end point') &#125; end = rangeEnd.charCodeAt(0) if (end &gt; begin) &#123; // Treat as a range for (j = begin; j &lt;= end; j++) &#123; chrs.push(String.fromCharCode(j)) &#125; &#125; else &#123; // Supposed to treat period, begin and end as individual characters only, not a range chrs.push('.', rangeBegin, rangeEnd) &#125; // Skip dots and range end (already skipped range end backslash if present) i += rangeEnd.length + 2 &#125; else &#123; // Octal is by itself chr = String.fromCharCode(parseInt(rangeBegin, 8)) chrs.push(chr) &#125; // Skip range begin i += octalLength &#125; else if (next + charlist.charAt(i + 2) === '..') &#123; // Character begins range rangeBegin = c begin = rangeBegin.charCodeAt(0) if ((/\\\\\\d/).test(charlist.charAt(i + 3) + charlist.charAt(i + 4))) &#123; // Range ends with octal rangeEnd = charlist.slice(i + 4).match(/^\\d+/)[0] // Skip range end backslash i += 1 &#125; else if (charlist.charAt(i + 3)) &#123; // Range ends with character rangeEnd = charlist.charAt(i + 3) &#125; else &#123; throw new Error('Range with no end point') &#125; end = rangeEnd.charCodeAt(0) if (end &gt; begin) &#123; // Treat as a range for (j = begin; j &lt;= end; j++) &#123; chrs.push(String.fromCharCode(j)) &#125; &#125; else &#123; // Supposed to treat period, begin and end as individual characters only, not a range chrs.push('.', rangeBegin, rangeEnd) &#125; // Skip dots and range end (already skipped range end backslash if present) i += rangeEnd.length + 2 &#125; else &#123; // Character is by itself chrs.push(c) &#125; &#125; for (i = 0; i &lt; str.length; i++) &#123; c = str.charAt(i) if (chrs.indexOf(c) !== -1) &#123; target += '\\\\' cca = c.charCodeAt(0) if (cca &lt; 32 || cca &gt; 126) &#123; // Needs special escaping switch (c) &#123; case '\\n': target += 'n' break case '\\t': target += 't' break case '\\u000D': target += 'r' break case '\\u0007': target += 'a' break case '\\v': target += 'v' break case '\\b': target += 'b' break case '\\f': target += 'f' break default: // target += _pad(cca.toString(8), 3);break; // Sufficient for UTF-16 encoded = encodeURIComponent(c) // 3-length-padded UTF-8 octets if ((escHexGrp = percentHex.exec(encoded)) !== null) &#123; // already added a slash above: target += _pad(parseInt(escHexGrp[1], 16).toString(8), 3) &#125; while ((escHexGrp = percentHex.exec(encoded)) !== null) &#123; target += '\\\\' + _pad(parseInt(escHexGrp[1], 16).toString(8), 3) &#125; break &#125; &#125; else &#123; // Perform regular backslashed escaping target += c &#125; &#125; else &#123; // Just add the character unescaped target += c &#125; &#125; return target&#125;","raw":null,"content":null},{"title":"PHP's sql_regcase in JavaScript","date":"2016-05-11T20:27:49.962Z","updated":"2016-05-11T20:27:49.962Z","comments":true,"path":"php/pcre/sql_regcase/index.html","permalink":"http://locutus.io/php/pcre/sql_regcase/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435module.exports = function sql_regcase (str) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/sql_regcase/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: sql_regcase('Foo - bar.') // returns 1: '[Ff][Oo][Oo] - [Bb][Aa][Rr].' var setlocale = require('../strings/setlocale') var i = 0 var upper = '' var lower = '' var pos = 0 var retStr = '' setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; upper = $locutus.php.locales[$locutus.php.localeCategories.LC_CTYPE].LC_CTYPE.upper lower = $locutus.php.locales[$locutus.php.localeCategories.LC_CTYPE].LC_CTYPE.lower // @todo: Make this more readable for (i = 0; i &lt; str.length; i++) &#123; if (((pos = upper.indexOf(str.charAt(i))) !== -1) || ((pos = lower.indexOf(str.charAt(i))) !== -1)) &#123; retStr += '[' + upper.charAt(pos) + lower.charAt(pos) + ']' &#125; else &#123; retStr += str.charAt(i) &#125; &#125; return retStr&#125;","raw":null,"content":null},{"title":"PHP's preg_quote in JavaScript","date":"2016-05-11T20:27:49.958Z","updated":"2016-05-11T20:27:49.958Z","comments":true,"path":"php/pcre/preg_quote/index.html","permalink":"http://locutus.io/php/pcre/preg_quote/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function preg_quote (str, delimiter) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/preg_quote/ // original by: booeyOH // improved by: Ates Goral (http://magnetiq.com) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: preg_quote(\"$40\") // returns 1: '\\\\$40' // example 2: preg_quote(\"*RRRING* Hello?\") // returns 2: '\\\\*RRRING\\\\* Hello\\\\?' // example 3: preg_quote(\"\\\\.+*?[^]$()&#123;&#125;=!&lt;&gt;|:\") // returns 3: '\\\\\\\\\\\\.\\\\+\\\\*\\\\?\\\\[\\\\^\\\\]\\\\$\\\\(\\\\)\\\\&#123;\\\\&#125;\\\\=\\\\!\\\\&lt;\\\\&gt;\\\\|\\\\:' return (str + '') .replace(new RegExp('[.\\\\\\\\+*?\\\\[\\\\^\\\\]$()&#123;&#125;=!&lt;&gt;|:\\\\' + (delimiter || '') + '-]', 'g'), '\\\\$&amp;')&#125;","raw":null,"content":null},{"title":"PHP's pcre extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/pcre/index.html","permalink":"http://locutus.io/php/pcre/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's setrawcookie in JavaScript","date":"2016-05-11T20:27:49.962Z","updated":"2016-05-11T20:27:49.962Z","comments":true,"path":"php/network/setrawcookie/index.html","permalink":"http://locutus.io/php/network/setrawcookie/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647module.exports = function setrawcookie (name, value, expires, path, domain, secure) &#123; // discuss at: http://locutus.io/php/setrawcookie/ // original by: Brett Zamir (http://brett-zamir.me) // original by: setcookie // improved by: Kevin van Zonneveld (http://kvz.io) // input by: Michael // note 1: This function requires access to the `window` global and is Browser-only // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: setrawcookie('author_name', 'Kevin van Zonneveld') // returns 1: true if (typeof window === 'undefined') &#123; return true &#125; if (typeof expires === 'string' &amp;&amp; (/^\\d+$/).test(expires)) &#123; expires = parseInt(expires, 10) &#125; if (expires instanceof Date) &#123; expires = expires.toUTCString() &#125; else if (typeof expires === 'number') &#123; expires = (new Date(expires * 1e3)).toUTCString() &#125; var r = [name + '=' + value] var i = '' var s = &#123; expires: expires, path: path, domain: domain &#125; for (i in s) &#123; if (s.hasOwnProperty(i)) &#123; // Exclude items on Object.prototype s[i] &amp;&amp; r.push(i + '=' + s[i]) &#125; &#125; if (secure) &#123; r.push('secure') &#125; window.document.cookie = r.join(';') return true&#125;","raw":null,"content":null},{"title":"PHP's setcookie in JavaScript","date":"2016-05-11T20:27:49.962Z","updated":"2016-05-11T20:27:49.962Z","comments":true,"path":"php/network/setcookie/index.html","permalink":"http://locutus.io/php/network/setcookie/index.html","excerpt":"","keywords":null,"text":"123456789101112module.exports = function setcookie (name, value, expires, path, domain, secure) &#123; // discuss at: http://locutus.io/php/setcookie/ // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // bugfixed by: Andreas // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Kevin van Zonneveld (http://kvz.io) // example 1: setcookie('author_name', 'Kevin van Zonneveld') // returns 1: true var setrawcookie = require('../network/setrawcookie') return setrawcookie(name, encodeURIComponent(value), expires, path, domain, secure)&#125;","raw":null,"content":null},{"title":"PHP's long2ip in JavaScript","date":"2016-05-11T20:27:49.958Z","updated":"2016-05-11T20:27:49.958Z","comments":true,"path":"php/network/long2ip/index.html","permalink":"http://locutus.io/php/network/long2ip/index.html","excerpt":"","keywords":null,"text":"123456789101112module.exports = function long2ip (ip) &#123; // discuss at: http://locutus.io/php/long2ip/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // example 1: long2ip( 3221234342 ) // returns 1: '192.0.34.166' if (!isFinite(ip)) &#123; return false &#125; return [ip &gt;&gt;&gt; 24, ip &gt;&gt;&gt; 16 &amp; 0xFF, ip &gt;&gt;&gt; 8 &amp; 0xFF, ip &amp; 0xFF].join('.')&#125;","raw":null,"content":null},{"title":"PHP's ip2long in JavaScript","date":"2016-05-11T20:27:49.958Z","updated":"2016-05-11T20:27:49.958Z","comments":true,"path":"php/network/ip2long/index.html","permalink":"http://locutus.io/php/network/ip2long/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253module.exports = function ip2long (argIP) &#123; // discuss at: http://locutus.io/php/ip2long/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // improved by: Victor // revised by: fearphage (http://http/my.opera.com/fearphage/) // revised by: Theriault (https://github.com/Theriault) // estarget: es2015 // example 1: ip2long('192.0.34.166') // returns 1: 3221234342 // example 2: ip2long('0.0xABCDEF') // returns 2: 11259375 // example 3: ip2long('255.255.255.256') // returns 3: false let i = 0 // PHP allows decimal, octal, and hexadecimal IP components. // PHP allows between 1 (e.g. 127) to 4 (e.g 127.0.0.1) components. const pattern = new RegExp([ '^([1-9]\\\\d*|0[0-7]*|0x[\\\\da-f]+)', '(?:\\\\.([1-9]\\\\d*|0[0-7]*|0x[\\\\da-f]+))?', '(?:\\\\.([1-9]\\\\d*|0[0-7]*|0x[\\\\da-f]+))?', '(?:\\\\.([1-9]\\\\d*|0[0-7]*|0x[\\\\da-f]+))?$' ].join(''), 'i') argIP = argIP.match(pattern) // Verify argIP format. if (!argIP) &#123; // Invalid format. return false &#125; // Reuse argIP variable for component counter. argIP[0] = 0 for (i = 1; i &lt; 5; i += 1) &#123; argIP[0] += !!((argIP[i] || '').length) argIP[i] = parseInt(argIP[i]) || 0 &#125; // Continue to use argIP for overflow values. // PHP does not allow any component to overflow. argIP.push(256, 256, 256, 256) // Recalculate overflow of last component supplied to make up for missing components. argIP[4 + argIP[0]] *= Math.pow(256, 4 - argIP[0]) if (argIP[1] &gt;= argIP[5] || argIP[2] &gt;= argIP[6] || argIP[3] &gt;= argIP[7] || argIP[4] &gt;= argIP[8]) &#123; return false &#125; return argIP[1] * (argIP[0] === 1 || 16777216) + argIP[2] * (argIP[0] &lt;= 2 || 65536) + argIP[3] * (argIP[0] &lt;= 3 || 256) + argIP[4] * 1&#125;","raw":null,"content":null},{"title":"PHP's inet_pton in JavaScript","date":"2016-05-11T20:27:49.958Z","updated":"2016-05-11T20:27:49.958Z","comments":true,"path":"php/network/inet_pton/index.html","permalink":"http://locutus.io/php/network/inet_pton/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758module.exports = function inet_pton (a) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/inet_pton/ // original by: Theriault (https://github.com/Theriault) // example 1: inet_pton('::') // returns 1: '\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0' // example 2: inet_pton('127.0.0.1') // returns 2: '\\x7F\\x00\\x00\\x01' var r var m var x var i var j var f = String.fromCharCode // IPv4 m = a.match(/^(?:\\d&#123;1,3&#125;(?:\\.|$))&#123;4&#125;/) if (m) &#123; m = m[0].split('.') m = f(m[0]) + f(m[1]) + f(m[2]) + f(m[3]) // Return if 4 bytes, otherwise false. return m.length === 4 ? m : false &#125; r = /^((?:[\\da-f]&#123;1,4&#125;(?::|))&#123;0,8&#125;)(::)?((?:[\\da-f]&#123;1,4&#125;(?::|))&#123;0,8&#125;)$/ // IPv6 m = a.match(r) if (m) &#123; // Translate each hexadecimal value. for (j = 1; j &lt; 4; j++) &#123; // Indice 2 is :: and if no length, continue. if (j === 2 || m[j].length === 0) &#123; continue &#125; m[j] = m[j].split(':') for (i = 0; i &lt; m[j].length; i++) &#123; m[j][i] = parseInt(m[j][i], 16) // Would be NaN if it was blank, return false. if (isNaN(m[j][i])) &#123; // Invalid IP. return false &#125; m[j][i] = f(m[j][i] &gt;&gt; 8) + f(m[j][i] &amp; 0xFF) &#125; m[j] = m[j].join('') &#125; x = m[1].length + m[3].length if (x === 16) &#123; return m[1] + m[3] &#125; else if (x &lt; 16 &amp;&amp; m[2].length &gt; 0) &#123; return m[1] + (new Array(16 - x + 1)) .join('\\x00') + m[3] &#125; &#125; // Invalid IP return false&#125;","raw":null,"content":null},{"title":"PHP's inet_ntop in JavaScript","date":"2016-05-11T20:27:49.958Z","updated":"2016-05-11T20:27:49.958Z","comments":true,"path":"php/network/inet_ntop/index.html","permalink":"http://locutus.io/php/network/inet_ntop/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637module.exports = function inet_ntop (a) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/inet_ntop/ // original by: Theriault (https://github.com/Theriault) // example 1: inet_ntop('\\x7F\\x00\\x00\\x01') // returns 1: '127.0.0.1' // _example 2: inet_ntop('\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1') // _returns 2: '::1' var i = 0 var m = '' var c = [] a += '' if (a.length === 4) &#123; // IPv4 return [ a.charCodeAt(0), a.charCodeAt(1), a.charCodeAt(2), a.charCodeAt(3) ].join('.') &#125; else if (a.length === 16) &#123; // IPv6 for (i = 0; i &lt; 16; i++) &#123; c.push(((a.charCodeAt(i++) &lt;&lt; 8) + a.charCodeAt(i)).toString(16)) &#125; return c.join(':') .replace(/((^|:)0(?=:|$))+:?/g, function (t) &#123; m = (t.length &gt; m.length) ? t : m return t &#125;) .replace(m || ' ', '::') &#125; else &#123; // Invalid length return false &#125;&#125;","raw":null,"content":null},{"title":"PHP's network extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/network/index.html","permalink":"http://locutus.io/php/network/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's net-gopher extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/net-gopher/index.html","permalink":"http://locutus.io/php/net-gopher/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's gopher_parsedir in JavaScript","date":"2016-05-11T20:27:49.950Z","updated":"2016-05-11T20:27:49.950Z","comments":true,"path":"php/net-gopher/gopher_parsedir/index.html","permalink":"http://locutus.io/php/net-gopher/gopher_parsedir/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980module.exports = function gopher_parsedir (dirent) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/gopher_parsedir/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: var entry = gopher_parsedir('0All about my gopher site.\\t/allabout.txt\\tgopher.example.com\\t70\\u000d\\u000a') // example 1: entry.title // returns 1: 'All about my gopher site.' /* Types * 0 = plain text file * 1 = directory menu listing * 2 = CSO search query * 3 = error message * 4 = BinHex encoded text file * 5 = binary archive file * 6 = UUEncoded text file * 7 = search engine query * 8 = telnet session pointer * 9 = binary file * g = Graphics file format, primarily a GIF file * h = HTML file * i = informational message * s = Audio file format, primarily a WAV file */ var entryPattern = /^(.)(.*?)\\t(.*?)\\t(.*?)\\t(.*?)\\u000d\\u000a$/ var entry = dirent.match(entryPattern) if (entry === null) &#123; throw new Error('Could not parse the directory entry') // return false; &#125; var type = entry[1] switch (type) &#123; case 'i': // GOPHER_INFO type = 255 break case '1': // GOPHER_DIRECTORY type = 1 break case '0': // GOPHER_DOCUMENT type = 0 break case '4': // GOPHER_BINHEX type = 4 break case '5': // GOPHER_DOSBINARY type = 5 break case '6': // GOPHER_UUENCODED type = 6 break case '9': // GOPHER_BINARY type = 9 break case 'h': // GOPHER_HTTP type = 254 break default: return &#123; type: -1, data: dirent &#125; // GOPHER_UNKNOWN &#125; return &#123; type: type, title: entry[2], path: entry[3], host: entry[4], port: entry[5] &#125;&#125;","raw":null,"content":null},{"title":"PHP's uniqid in JavaScript","date":"2016-05-11T20:27:49.954Z","updated":"2016-05-11T20:27:49.954Z","comments":true,"path":"php/misc/uniqid/index.html","permalink":"http://locutus.io/php/misc/uniqid/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556module.exports = function uniqid (prefix, moreEntropy) &#123; // discuss at: http://locutus.io/php/uniqid/ // original by: Kevin van Zonneveld (http://kvz.io) // revised by: Kankrelune (http://www.webfaktory.info/) // note 1: Uses an internal counter (in locutus global) to avoid collision // example 1: var $id = uniqid() // example 1: var $result = $id.length === 13 // returns 1: true // example 2: var $id = uniqid('foo') // example 2: var $result = $id.length === (13 + 'foo'.length) // returns 2: true // example 3: var $id = uniqid('bar', true) // example 3: var $result = $id.length === (23 + 'bar'.length) // returns 3: true if (typeof prefix === 'undefined') &#123; prefix = '' &#125; var retId var _formatSeed = function (seed, reqWidth) &#123; seed = parseInt(seed, 10).toString(16) // to hex str if (reqWidth &lt; seed.length) &#123; // so long we split return seed.slice(seed.length - reqWidth) &#125; if (reqWidth &gt; seed.length) &#123; // so short we pad return Array(1 + (reqWidth - seed.length)).join('0') + seed &#125; return seed &#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; if (!$locutus.php.uniqidSeed) &#123; // init seed with big random int $locutus.php.uniqidSeed = Math.floor(Math.random() * 0x75bcd15) &#125; $locutus.php.uniqidSeed++ // start with prefix, add current milliseconds hex string retId = prefix retId += _formatSeed(parseInt(new Date().getTime() / 1000, 10), 8) // add seed hex string retId += _formatSeed($locutus.php.uniqidSeed, 5) if (moreEntropy) &#123; // for more entropy we add a float lower to 10 retId += (Math.random() * 10).toFixed(8).toString() &#125; return retId&#125;","raw":null,"content":null},{"title":"PHP's pack in JavaScript","date":"2016-05-11T20:27:49.950Z","updated":"2016-05-11T20:27:49.950Z","comments":true,"path":"php/misc/pack/index.html","permalink":"http://locutus.io/php/misc/pack/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384module.exports = function pack (format) &#123; // discuss at: http://locutus.io/php/pack/ // original by: Tim de Koning (http://www.kingsquare.nl) // parts by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // bugfixed by: Tim de Koning (http://www.kingsquare.nl) // note 1: Float encoding by: Jonas Raoni Soares Silva // note 1: Home: http://www.kingsquare.nl/blog/12-12-2009/13507444 // note 1: Feedback: phpjs-pack@kingsquare.nl // note 1: \"machine dependent byte order and size\" aren't // note 1: applicable for JavaScript; pack works as on a 32bit, // note 1: little endian machine. // example 1: pack('nvc*', 0x1234, 0x5678, 65, 66) // returns 1: '\\u00124xVAB' // example 2: pack('H4', '2345') // returns 2: '#E' // example 3: pack('H*', 'D5') // returns 3: '√ï' // example 4: pack('d', -100.876) // returns 4: \"\\u0000\\u0000\\u0000\\u0000\\u00008Y√Ä\" // test: skip-1 var formatPointer = 0 var argumentPointer = 1 var result = '' var argument = '' var i = 0 var r = [] var instruction, quantifier, word, precisionBits, exponentBits, extraNullCount // vars used by float encoding var bias var minExp var maxExp var minUnnormExp var status var exp var len var bin var signal var n var intPart var floatPart var lastBit var rounded var j var k var tmpResult while (formatPointer &lt; format.length) &#123; instruction = format.charAt(formatPointer) quantifier = '' formatPointer++ while ((formatPointer &lt; format.length) &amp;&amp; (format.charAt(formatPointer) .match(/[\\d\\*]/) !== null)) &#123; quantifier += format.charAt(formatPointer) formatPointer++ &#125; if (quantifier === '') &#123; quantifier = '1' &#125; // Now pack variables: 'quantifier' times 'instruction' switch (instruction) &#123; case 'a': case 'A': // NUL-padded string // SPACE-padded string if (typeof arguments[argumentPointer] === 'undefined') &#123; throw new Error('Warning: pack() Type ' + instruction + ': not enough arguments') &#125; else &#123; argument = String(arguments[argumentPointer]) &#125; if (quantifier === '*') &#123; quantifier = argument.length &#125; for (i = 0; i &lt; quantifier; i++) &#123; if (typeof argument[i] === 'undefined') &#123; if (instruction === 'a') &#123; result += String.fromCharCode(0) &#125; else &#123; result += ' ' &#125; &#125; else &#123; result += argument[i] &#125; &#125; argumentPointer++ break case 'h': case 'H': // Hex string, low nibble first // Hex string, high nibble first if (typeof arguments[argumentPointer] === 'undefined') &#123; throw new Error('Warning: pack() Type ' + instruction + ': not enough arguments') &#125; else &#123; argument = arguments[argumentPointer] &#125; if (quantifier === '*') &#123; quantifier = argument.length &#125; if (quantifier &gt; argument.length) &#123; var msg = 'Warning: pack() Type ' + instruction + ': not enough characters in string' throw new Error(msg) &#125; for (i = 0; i &lt; quantifier; i += 2) &#123; // Always get per 2 bytes... word = argument[i] if (((i + 1) &gt;= quantifier) || typeof argument[i + 1] === 'undefined') &#123; word += '0' &#125; else &#123; word += argument[i + 1] &#125; // The fastest way to reverse? if (instruction === 'h') &#123; word = word[1] + word[0] &#125; result += String.fromCharCode(parseInt(word, 16)) &#125; argumentPointer++ break case 'c': case 'C': // signed char // unsigned char // c and C is the same in pack if (quantifier === '*') &#123; quantifier = arguments.length - argumentPointer &#125; if (quantifier &gt; (arguments.length - argumentPointer)) &#123; throw new Error('Warning: pack() Type ' + instruction + ': too few arguments') &#125; for (i = 0; i &lt; quantifier; i++) &#123; result += String.fromCharCode(arguments[argumentPointer]) argumentPointer++ &#125; break case 's': case 'S': case 'v': // signed short (always 16 bit, machine byte order) // unsigned short (always 16 bit, machine byte order) // s and S is the same in pack if (quantifier === '*') &#123; quantifier = arguments.length - argumentPointer &#125; if (quantifier &gt; (arguments.length - argumentPointer)) &#123; throw new Error('Warning: pack() Type ' + instruction + ': too few arguments') &#125; for (i = 0; i &lt; quantifier; i++) &#123; result += String.fromCharCode(arguments[argumentPointer] &amp; 0xFF) result += String.fromCharCode(arguments[argumentPointer] &gt;&gt; 8 &amp; 0xFF) argumentPointer++ &#125; break case 'n': // unsigned short (always 16 bit, big endian byte order) if (quantifier === '*') &#123; quantifier = arguments.length - argumentPointer &#125; if (quantifier &gt; (arguments.length - argumentPointer)) &#123; throw new Error('Warning: pack() Type ' + instruction + ': too few arguments') &#125; for (i = 0; i &lt; quantifier; i++) &#123; result += String.fromCharCode(arguments[argumentPointer] &gt;&gt; 8 &amp; 0xFF) result += String.fromCharCode(arguments[argumentPointer] &amp; 0xFF) argumentPointer++ &#125; break case 'i': case 'I': case 'l': case 'L': case 'V': // signed integer (machine dependent size and byte order) // unsigned integer (machine dependent size and byte order) // signed long (always 32 bit, machine byte order) // unsigned long (always 32 bit, machine byte order) // unsigned long (always 32 bit, little endian byte order) if (quantifier === '*') &#123; quantifier = arguments.length - argumentPointer &#125; if (quantifier &gt; (arguments.length - argumentPointer)) &#123; throw new Error('Warning: pack() Type ' + instruction + ': too few arguments') &#125; for (i = 0; i &lt; quantifier; i++) &#123; result += String.fromCharCode(arguments[argumentPointer] &amp; 0xFF) result += String.fromCharCode(arguments[argumentPointer] &gt;&gt; 8 &amp; 0xFF) result += String.fromCharCode(arguments[argumentPointer] &gt;&gt; 16 &amp; 0xFF) result += String.fromCharCode(arguments[argumentPointer] &gt;&gt; 24 &amp; 0xFF) argumentPointer++ &#125; break case 'N': // unsigned long (always 32 bit, big endian byte order) if (quantifier === '*') &#123; quantifier = arguments.length - argumentPointer &#125; if (quantifier &gt; (arguments.length - argumentPointer)) &#123; throw new Error('Warning: pack() Type ' + instruction + ': too few arguments') &#125; for (i = 0; i &lt; quantifier; i++) &#123; result += String.fromCharCode(arguments[argumentPointer] &gt;&gt; 24 &amp; 0xFF) result += String.fromCharCode(arguments[argumentPointer] &gt;&gt; 16 &amp; 0xFF) result += String.fromCharCode(arguments[argumentPointer] &gt;&gt; 8 &amp; 0xFF) result += String.fromCharCode(arguments[argumentPointer] &amp; 0xFF) argumentPointer++ &#125; break case 'f': case 'd': // float (machine dependent size and representation) // double (machine dependent size and representation) // version based on IEEE754 precisionBits = 23 exponentBits = 8 if (instruction === 'd') &#123; precisionBits = 52 exponentBits = 11 &#125; if (quantifier === '*') &#123; quantifier = arguments.length - argumentPointer &#125; if (quantifier &gt; (arguments.length - argumentPointer)) &#123; throw new Error('Warning: pack() Type ' + instruction + ': too few arguments') &#125; for (i = 0; i &lt; quantifier; i++) &#123; argument = arguments[argumentPointer] bias = Math.pow(2, exponentBits - 1) - 1 minExp = -bias + 1 maxExp = bias minUnnormExp = minExp - precisionBits status = isNaN(n = parseFloat(argument)) || n === -Infinity || n === +Infinity ? n : 0 exp = 0 len = 2 * bias + 1 + precisionBits + 3 bin = new Array(len) signal = (n = status !== 0 ? 0 : n) &lt; 0 n = Math.abs(n) intPart = Math.floor(n) floatPart = n - intPart for (k = len; k;) &#123; bin[--k] = 0 &#125; for (k = bias + 2; intPart &amp;&amp; k;) &#123; bin[--k] = intPart % 2 intPart = Math.floor(intPart / 2) &#125; for (k = bias + 1; floatPart &gt; 0 &amp;&amp; k; --floatPart) &#123; (bin[++k] = ((floatPart *= 2) &gt;= 1) - 0) &#125; for (k = -1; ++k &lt; len &amp;&amp; !bin[k];) &#123;&#125; // @todo: Make this more readable: var key = (lastBit = precisionBits - 1 + (k = (exp = bias + 1 - k) &gt;= minExp &amp;&amp; exp &lt;= maxExp ? k + 1 : bias + 1 - (exp = minExp - 1))) + 1 if (bin[key]) &#123; if (!(rounded = bin[lastBit])) &#123; for (j = lastBit + 2; !rounded &amp;&amp; j &lt; len; rounded = bin[j++]) &#123;&#125; &#125; for (j = lastBit + 1; rounded &amp;&amp; --j &gt;= 0; (bin[j] = !bin[j] - 0) &amp;&amp; (rounded = 0)) &#123;&#125; &#125; for (k = k - 2 &lt; 0 ? -1 : k - 3; ++k &lt; len &amp;&amp; !bin[k];) &#123;&#125; if ((exp = bias + 1 - k) &gt;= minExp &amp;&amp; exp &lt;= maxExp) &#123; ++k &#125; else &#123; if (exp &lt; minExp) &#123; if (exp !== bias + 1 - len &amp;&amp; exp &lt; minUnnormExp) &#123; // \"encodeFloat::float underflow\" &#125; k = bias + 1 - (exp = minExp - 1) &#125; &#125; if (intPart || status !== 0) &#123; exp = maxExp + 1 k = bias + 2 if (status === -Infinity) &#123; signal = 1 &#125; else if (isNaN(status)) &#123; bin[k] = 1 &#125; &#125; n = Math.abs(exp + bias) tmpResult = '' for (j = exponentBits + 1; --j;) &#123; tmpResult = (n % 2) + tmpResult n = n &gt;&gt;= 1 &#125; n = 0 j = 0 k = (tmpResult = (signal ? '1' : '0') + tmpResult + (bin .slice(k, k + precisionBits) .join('')) ).length r = [] for (; k;) &#123; n += (1 &lt;&lt; j) * tmpResult.charAt(--k) if (j === 7) &#123; r[r.length] = String.fromCharCode(n) n = 0 &#125; j = (j + 1) % 8 &#125; r[r.length] = n ? String.fromCharCode(n) : '' result += r.join('') argumentPointer++ &#125; break case 'x': // NUL byte if (quantifier === '*') &#123; throw new Error('Warning: pack(): Type x: \\'*\\' ignored') &#125; for (i = 0; i &lt; quantifier; i++) &#123; result += String.fromCharCode(0) &#125; break case 'X': // Back up one byte if (quantifier === '*') &#123; throw new Error('Warning: pack(): Type X: \\'*\\' ignored') &#125; for (i = 0; i &lt; quantifier; i++) &#123; if (result.length === 0) &#123; throw new Error('Warning: pack(): Type X:' + ' outside of string') &#125; else &#123; result = result.substring(0, result.length - 1) &#125; &#125; break case '@': // NUL-fill to absolute position if (quantifier === '*') &#123; throw new Error('Warning: pack(): Type X: \\'*\\' ignored') &#125; if (quantifier &gt; result.length) &#123; extraNullCount = quantifier - result.length for (i = 0; i &lt; extraNullCount; i++) &#123; result += String.fromCharCode(0) &#125; &#125; if (quantifier &lt; result.length) &#123; result = result.substring(0, quantifier) &#125; break default: throw new Error('Warning: pack() Type ' + instruction + ': unknown format code') &#125; &#125; if (argumentPointer &lt; arguments.length) &#123; var msg2 = 'Warning: pack(): ' + (arguments.length - argumentPointer) + ' arguments unused' throw new Error(msg2) &#125; return result&#125;","raw":null,"content":null},{"title":"PHP's misc extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/misc/index.html","permalink":"http://locutus.io/php/misc/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's tanh in JavaScript","date":"2016-05-11T20:27:49.950Z","updated":"2016-05-11T20:27:49.950Z","comments":true,"path":"php/math/tanh/index.html","permalink":"http://locutus.io/php/math/tanh/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function tanh (arg) &#123; // discuss at: http://locutus.io/php/tanh/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // imprived by: Robert Eisele (http://www.xarg.org/) // example 1: tanh(5.4251848798444815) // returns 1: 0.9999612058841574 return 1 - 2 / (Math.exp(2 * arg) + 1)&#125;","raw":null,"content":null},{"title":"PHP's tan in JavaScript","date":"2016-05-11T20:27:49.950Z","updated":"2016-05-11T20:27:49.950Z","comments":true,"path":"php/math/tan/index.html","permalink":"http://locutus.io/php/math/tan/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function tan (arg) &#123; // discuss at: http://locutus.io/php/tan/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: Math.ceil(tan(8723321.4) * 10000000) // returns 1: 54251849 return Math.tan(arg)&#125;","raw":null,"content":null},{"title":"PHP's sqrt in JavaScript","date":"2016-05-11T20:27:49.950Z","updated":"2016-05-11T20:27:49.950Z","comments":true,"path":"php/math/sqrt/index.html","permalink":"http://locutus.io/php/math/sqrt/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function sqrt (arg) &#123; // discuss at: http://locutus.io/php/sqrt/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: sqrt(8723321.4) // returns 1: 2953.5269424875746 return Math.sqrt(arg)&#125;","raw":null,"content":null},{"title":"PHP's sinh in JavaScript","date":"2016-05-11T20:27:49.950Z","updated":"2016-05-11T20:27:49.950Z","comments":true,"path":"php/math/sinh/index.html","permalink":"http://locutus.io/php/math/sinh/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function sinh (arg) &#123; // discuss at: http://locutus.io/php/sinh/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: sinh(-0.9834330348825909) // returns 1: -1.1497971402636502 return (Math.exp(arg) - Math.exp(-arg)) / 2&#125;","raw":null,"content":null},{"title":"PHP's sin in JavaScript","date":"2016-05-11T20:27:49.950Z","updated":"2016-05-11T20:27:49.950Z","comments":true,"path":"php/math/sin/index.html","permalink":"http://locutus.io/php/math/sin/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function sin (arg) &#123; // discuss at: http://locutus.io/php/sin/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: Math.ceil(sin(8723321.4) * 10000000) // returns 1: -9834330 return Math.sin(arg)&#125;","raw":null,"content":null},{"title":"PHP's round in JavaScript","date":"2016-05-11T20:27:49.942Z","updated":"2016-05-11T20:27:49.942Z","comments":true,"path":"php/math/round/index.html","permalink":"http://locutus.io/php/math/round/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859module.exports = function round (value, precision, mode) &#123; // discuss at: http://locutus.io/php/round/ // original by: Philip Peterson // revised by: Onno Marsman (https://twitter.com/onnomarsman) // revised by: T.Wild // revised by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // input by: Greenseed // input by: meo // input by: William // input by: Josep Sanz (http://www.ws3.es/) // bugfixed by: Brett Zamir (http://brett-zamir.me) // note 1: Great work. Ideas for improvement: // note 1: - code more compliant with developer guidelines // note 1: - for implementing PHP constant arguments look at // note 1: the pathinfo() function, it offers the greatest // note 1: flexibility &amp; compatibility possible // example 1: round(1241757, -3) // returns 1: 1242000 // example 2: round(3.6) // returns 2: 4 // example 3: round(2.835, 2) // returns 3: 2.84 // example 4: round(1.1749999999999, 2) // returns 4: 1.17 // example 5: round(58551.799999999996, 2) // returns 5: 58551.8 var m, f, isHalf, sgn // helper variables // making sure precision is integer precision |= 0 m = Math.pow(10, precision) value *= m // sign of the number sgn = (value &gt; 0) | -(value &lt; 0) isHalf = value % 1 === 0.5 * sgn f = Math.floor(value) if (isHalf) &#123; switch (mode) &#123; case 'PHP_ROUND_HALF_DOWN': // rounds .5 toward zero value = f + (sgn &lt; 0) break case 'PHP_ROUND_HALF_EVEN': // rouds .5 towards the next even integer value = f + (f % 2 * sgn) break case 'PHP_ROUND_HALF_ODD': // rounds .5 towards the next odd integer value = f + !(f % 2) break default: // rounds .5 away from zero value = f + (sgn &gt; 0) &#125; &#125; return (isHalf ? value : Math.round(value)) / m&#125;","raw":null,"content":null},{"title":"PHP's rand in JavaScript","date":"2016-05-11T20:27:49.942Z","updated":"2016-05-11T20:27:49.942Z","comments":true,"path":"php/math/rand/index.html","permalink":"http://locutus.io/php/math/rand/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819module.exports = function rand (min, max) &#123; // discuss at: http://locutus.io/php/rand/ // original by: Leslie Hoare // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // note 1: See the commented out code below for a version which // note 1: will work with our experimental (though probably unnecessary) // note 1: srand() function) // example 1: rand(1, 1) // returns 1: 1 var argc = arguments.length if (argc === 0) &#123; min = 0 max = 2147483647 &#125; else if (argc === 1) &#123; throw new Error('Warning: rand() expects exactly 2 parameters, 1 given') &#125; return Math.floor(Math.random() * (max - min + 1)) + min&#125;","raw":null,"content":null},{"title":"PHP's rad2deg in JavaScript","date":"2016-05-11T20:27:49.942Z","updated":"2016-05-11T20:27:49.942Z","comments":true,"path":"php/math/rad2deg/index.html","permalink":"http://locutus.io/php/math/rad2deg/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function rad2deg (angle) &#123; // discuss at: http://locutus.io/php/rad2deg/ // original by: Enrique Gonzalez // improved by: Brett Zamir (http://brett-zamir.me) // example 1: rad2deg(3.141592653589793) // returns 1: 180 return angle * 57.29577951308232 // angle / Math.PI * 180&#125;","raw":null,"content":null},{"title":"PHP's pow in JavaScript","date":"2016-05-11T20:27:49.942Z","updated":"2016-05-11T20:27:49.942Z","comments":true,"path":"php/math/pow/index.html","permalink":"http://locutus.io/php/math/pow/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function pow (base, exp) &#123; // discuss at: http://locutus.io/php/pow/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: pow(8723321.4, 7) // returns 1: 3.8439091680778995e+48 return Math.pow(base, exp)&#125;","raw":null,"content":null},{"title":"PHP's pi in JavaScript","date":"2016-05-11T20:27:49.942Z","updated":"2016-05-11T20:27:49.942Z","comments":true,"path":"php/math/pi/index.html","permalink":"http://locutus.io/php/math/pi/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function pi () &#123; // discuss at: http://locutus.io/php/pi/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: dude // example 1: pi(8723321.4) // returns 1: 3.141592653589793 return 3.141592653589793 // Math.PI&#125;","raw":null,"content":null},{"title":"PHP's octdec in JavaScript","date":"2016-05-11T20:27:49.942Z","updated":"2016-05-11T20:27:49.942Z","comments":true,"path":"php/math/octdec/index.html","permalink":"http://locutus.io/php/math/octdec/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function octdec (octString) &#123; // discuss at: http://locutus.io/php/octdec/ // original by: Philippe Baumann // example 1: octdec('77') // returns 1: 63 octString = (octString + '').replace(/[^0-7]/gi, '') return parseInt(octString, 8)&#125;","raw":null,"content":null},{"title":"PHP's mt_rand in JavaScript","date":"2016-05-11T20:27:49.942Z","updated":"2016-05-11T20:27:49.942Z","comments":true,"path":"php/math/mt_rand/index.html","permalink":"http://locutus.io/php/math/mt_rand/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function mt_rand (min, max) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/mt_rand/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // input by: Kongo // example 1: mt_rand(1, 1) // returns 1: 1 var argc = arguments.length if (argc === 0) &#123; min = 0 max = 2147483647 &#125; else if (argc === 1) &#123; throw new Error('Warning: mt_rand() expects exactly 2 parameters, 1 given') &#125; else &#123; min = parseInt(min, 10) max = parseInt(max, 10) &#125; return Math.floor(Math.random() * (max - min + 1)) + min&#125;","raw":null,"content":null},{"title":"PHP's mt_getrandmax in JavaScript","date":"2016-05-11T20:27:49.942Z","updated":"2016-05-11T20:27:49.942Z","comments":true,"path":"php/math/mt_getrandmax/index.html","permalink":"http://locutus.io/php/math/mt_getrandmax/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function mt_getrandmax () &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/mt_getrandmax/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: mt_getrandmax() // returns 1: 2147483647 return 2147483647&#125;","raw":null,"content":null},{"title":"PHP's min in JavaScript","date":"2016-05-11T20:27:49.934Z","updated":"2016-05-11T20:27:49.934Z","comments":true,"path":"php/math/min/index.html","permalink":"http://locutus.io/php/math/min/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116module.exports = function min () &#123; // discuss at: http://locutus.io/php/min/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // revised by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Jack // note 1: Long code cause we're aiming for maximum PHP compatibility // example 1: min(1, 3, 5, 6, 7) // returns 1: 1 // example 2: min([2, 4, 5]) // returns 2: 2 // example 3: min(0, 'hello') // returns 3: 0 // example 4: min('hello', 0) // returns 4: 'hello' // example 5: min(-1, 'hello') // returns 5: -1 // example 6: min([2, 4, 8], [2, 5, 7]) // returns 6: [2, 4, 8] var ar var retVal var i = 0 var n = 0 var argv = arguments var argc = argv.length var _obj2Array = function (obj) &#123; if (Object.prototype.toString.call(obj) === '[object Array]') &#123; return obj &#125; var ar = [] for (var i in obj) &#123; if (obj.hasOwnProperty(i)) &#123; ar.push(obj[i]) &#125; &#125; return ar &#125; var _compare = function (current, next) &#123; var i = 0 var n = 0 var tmp = 0 var nl = 0 var cl = 0 if (current === next) &#123; return 0 &#125; else if (typeof current === 'object') &#123; if (typeof next === 'object') &#123; current = _obj2Array(current) next = _obj2Array(next) cl = current.length nl = next.length if (nl &gt; cl) &#123; return 1 &#125; else if (nl &lt; cl) &#123; return -1 &#125; for (i = 0, n = cl; i &lt; n; ++i) &#123; tmp = _compare(current[i], next[i]) if (tmp === 1) &#123; return 1 &#125; else if (tmp === -1) &#123; return -1 &#125; &#125; return 0 &#125; return -1 &#125; else if (typeof next === 'object') &#123; return 1 &#125; else if (isNaN(next) &amp;&amp; !isNaN(current)) &#123; if (current === 0) &#123; return 0 &#125; return (current &lt; 0 ? 1 : -1) &#125; else if (isNaN(current) &amp;&amp; !isNaN(next)) &#123; if (next === 0) &#123; return 0 &#125; return (next &gt; 0 ? 1 : -1) &#125; if (next === current) &#123; return 0 &#125; return (next &gt; current ? 1 : -1) &#125; if (argc === 0) &#123; throw new Error('At least one value should be passed to min()') &#125; else if (argc === 1) &#123; if (typeof argv[0] === 'object') &#123; ar = _obj2Array(argv[0]) &#125; else &#123; throw new Error('Wrong parameter count for min()') &#125; if (ar.length === 0) &#123; throw new Error('Array must contain at least one element for min()') &#125; &#125; else &#123; ar = argv &#125; retVal = ar[0] for (i = 1, n = ar.length; i &lt; n; ++i) &#123; if (_compare(retVal, ar[i]) === -1) &#123; retVal = ar[i] &#125; &#125; return retVal&#125;","raw":null,"content":null},{"title":"PHP's max in JavaScript","date":"2016-05-11T20:27:49.930Z","updated":"2016-05-11T20:27:49.930Z","comments":true,"path":"php/math/max/index.html","permalink":"http://locutus.io/php/math/max/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114module.exports = function max () &#123; // discuss at: http://locutus.io/php/max/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // revised by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Jack // note 1: Long code cause we're aiming for maximum PHP compatibility // example 1: max(1, 3, 5, 6, 7) // returns 1: 7 // example 2: max([2, 4, 5]) // returns 2: 5 // example 3: max(0, 'hello') // returns 3: 0 // example 4: max('hello', 0) // returns 4: 'hello' // example 5: max(-1, 'hello') // returns 5: 'hello' // example 6: max([2, 4, 8], [2, 5, 7]) // returns 6: [2, 5, 7] var ar var retVal var i = 0 var n = 0 var argv = arguments var argc = argv.length var _obj2Array = function (obj) &#123; if (Object.prototype.toString.call(obj) === '[object Array]') &#123; return obj &#125; else &#123; var ar = [] for (var i in obj) &#123; if (obj.hasOwnProperty(i)) &#123; ar.push(obj[i]) &#125; &#125; return ar &#125; &#125; var _compare = function (current, next) &#123; var i = 0 var n = 0 var tmp = 0 var nl = 0 var cl = 0 if (current === next) &#123; return 0 &#125; else if (typeof current === 'object') &#123; if (typeof next === 'object') &#123; current = _obj2Array(current) next = _obj2Array(next) cl = current.length nl = next.length if (nl &gt; cl) &#123; return 1 &#125; else if (nl &lt; cl) &#123; return -1 &#125; for (i = 0, n = cl; i &lt; n; ++i) &#123; tmp = _compare(current[i], next[i]) if (tmp === 1) &#123; return 1 &#125; else if (tmp === -1) &#123; return -1 &#125; &#125; return 0 &#125; return -1 &#125; else if (typeof next === 'object') &#123; return 1 &#125; else if (isNaN(next) &amp;&amp; !isNaN(current)) &#123; if (current === 0) &#123; return 0 &#125; return (current &lt; 0 ? 1 : -1) &#125; else if (isNaN(current) &amp;&amp; !isNaN(next)) &#123; if (next === 0) &#123; return 0 &#125; return (next &gt; 0 ? 1 : -1) &#125; if (next === current) &#123; return 0 &#125; return (next &gt; current ? 1 : -1) &#125; if (argc === 0) &#123; throw new Error('At least one value should be passed to max()') &#125; else if (argc === 1) &#123; if (typeof argv[0] === 'object') &#123; ar = _obj2Array(argv[0]) &#125; else &#123; throw new Error('Wrong parameter count for max()') &#125; if (ar.length === 0) &#123; throw new Error('Array must contain at least one element for max()') &#125; &#125; else &#123; ar = argv &#125; retVal = ar[0] for (i = 1, n = ar.length; i &lt; n; ++i) &#123; if (_compare(retVal, ar[i]) === 1) &#123; retVal = ar[i] &#125; &#125; return retVal&#125;","raw":null,"content":null},{"title":"PHP's log1p in JavaScript","date":"2016-05-11T20:27:49.930Z","updated":"2016-05-11T20:27:49.930Z","comments":true,"path":"php/math/log1p/index.html","permalink":"http://locutus.io/php/math/log1p/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425module.exports = function log1p (x) &#123; // discuss at: http://locutus.io/php/log1p/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Robert Eisele (http://www.xarg.org/) // note 1: Precision 'n' can be adjusted as desired // example 1: log1p(1e-15) // returns 1: 9.999999999999995e-16 var ret = 0 // degree of precision var n = 50 if (x &lt;= -1) &#123; // JavaScript style would be to return Number.NEGATIVE_INFINITY return '-INF' &#125; if (x &lt; 0 || x &gt; 1) &#123; return Math.log(1 + x) &#125; for (var i = 1; i &lt; n; i++) &#123; ret += Math.pow(-x, i) / i &#125; return -ret&#125;","raw":null,"content":null},{"title":"PHP's log10 in JavaScript","date":"2016-05-11T20:27:49.930Z","updated":"2016-05-11T20:27:49.930Z","comments":true,"path":"php/math/log10/index.html","permalink":"http://locutus.io/php/math/log10/index.html","excerpt":"","keywords":null,"text":"12345678910111213module.exports = function log10 (arg) &#123; // discuss at: http://locutus.io/php/log10/ // original by: Philip Peterson // improved by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Tod Gentille // improved by: Brett Zamir (http://brett-zamir.me) // example 1: log10(10) // returns 1: 1 // example 2: log10(1) // returns 2: 0 return Math.log(arg) / 2.302585092994046 // Math.LN10&#125;","raw":null,"content":null},{"title":"PHP's log in JavaScript","date":"2016-05-11T20:27:49.930Z","updated":"2016-05-11T20:27:49.930Z","comments":true,"path":"php/math/log/index.html","permalink":"http://locutus.io/php/math/log/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function log (arg, base) &#123; // discuss at: http://locutus.io/php/log/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: log(8723321.4, 7) // returns 1: 8.212871815082147 return (typeof base === 'undefined') ? Math.log(arg) : Math.log(arg) / Math.log(base)&#125;","raw":null,"content":null},{"title":"PHP's lcg_value in JavaScript","date":"2016-05-11T20:27:49.930Z","updated":"2016-05-11T20:27:49.930Z","comments":true,"path":"php/math/lcg_value/index.html","permalink":"http://locutus.io/php/math/lcg_value/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function lcg_value () &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/lcg_value/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: var $rnd = lcg_value() // example 1: var $result = $rnd &gt;= 0 &amp;&amp; $rnd &lt;= 1 // returns 1: true return Math.random()&#125;","raw":null,"content":null},{"title":"PHP's is_nan in JavaScript","date":"2016-05-11T20:27:49.930Z","updated":"2016-05-11T20:27:49.930Z","comments":true,"path":"php/math/is_nan/index.html","permalink":"http://locutus.io/php/math/is_nan/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728module.exports = function is_nan (val) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_nan/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // input by: Robin // example 1: is_nan(NaN) // returns 1: true // example 2: is_nan(0) // returns 2: false var warningType = '' if (typeof val === 'number' &amp;&amp; isNaN(val)) &#123; return true &#125; // Some errors for maximum PHP compatibility if (typeof val === 'object') &#123; warningType = (Object.prototype.toString.call(val) === '[object Array]' ? 'array' : 'object') &#125; else if (typeof val === 'string' &amp;&amp; !val.match(/^[\\+\\-]?\\d/)) &#123; // simulate PHP's behaviour: '-9a' doesn't give a warning, but 'a9' does. warningType = 'string' &#125; if (warningType) &#123; throw new Error('Warning: is_nan() expects parameter 1 to be double, ' + warningType + ' given') &#125; return false&#125;","raw":null,"content":null},{"title":"PHP's is_infinite in JavaScript","date":"2016-05-11T20:27:49.930Z","updated":"2016-05-11T20:27:49.930Z","comments":true,"path":"php/math/is_infinite/index.html","permalink":"http://locutus.io/php/math/is_infinite/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function is_infinite (val) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_infinite/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: is_infinite(Infinity) // returns 1: true // example 2: is_infinite(-Infinity) // returns 2: true // example 3: is_infinite(0) // returns 3: false var warningType = '' if (val === Infinity || val === -Infinity) &#123; return true &#125; // Some warnings for maximum PHP compatibility if (typeof val === 'object') &#123; warningType = (Object.prototype.toString.call(val) === '[object Array]' ? 'array' : 'object') &#125; else if (typeof val === 'string' &amp;&amp; !val.match(/^[\\+\\-]?\\d/)) &#123; // simulate PHP's behaviour: '-9a' doesn't give a warning, but 'a9' does. warningType = 'string' &#125; if (warningType) &#123; var msg = 'Warning: is_infinite() expects parameter 1 to be double, ' + warningType + ' given' throw new Error(msg) &#125; return false&#125;","raw":null,"content":null},{"title":"PHP's is_finite in JavaScript","date":"2016-05-11T20:27:49.922Z","updated":"2016-05-11T20:27:49.922Z","comments":true,"path":"php/math/is_finite/index.html","permalink":"http://locutus.io/php/math/is_finite/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function is_finite (val) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/is_finite/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: is_finite(Infinity) // returns 1: false // example 2: is_finite(-Infinity) // returns 2: false // example 3: is_finite(0) // returns 3: true var warningType = '' if (val === Infinity || val === -Infinity) &#123; return false &#125; // Some warnings for maximum PHP compatibility if (typeof val === 'object') &#123; warningType = (Object.prototype.toString.call(val) === '[object Array]' ? 'array' : 'object') &#125; else if (typeof val === 'string' &amp;&amp; !val.match(/^[\\+\\-]?\\d/)) &#123; // simulate PHP's behaviour: '-9a' doesn't give a warning, but 'a9' does. warningType = 'string' &#125; if (warningType) &#123; var msg = 'Warning: is_finite() expects parameter 1 to be double, ' + warningType + ' given' throw new Error(msg) &#125; return true&#125;","raw":null,"content":null},{"title":"PHP's math extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/math/index.html","permalink":"http://locutus.io/php/math/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's hypot in JavaScript","date":"2016-05-11T20:27:49.922Z","updated":"2016-05-11T20:27:49.922Z","comments":true,"path":"php/math/hypot/index.html","permalink":"http://locutus.io/php/math/hypot/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718module.exports = function hypot (x, y) &#123; // discuss at: http://locutus.io/php/hypot/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // imprived by: Robert Eisele (http://www.xarg.org/) // example 1: hypot(3, 4) // returns 1: 5 // example 2: hypot([], 'a') // returns 2: null x = Math.abs(x) y = Math.abs(y) var t = Math.min(x, y) x = Math.max(x, y) t = t / x return x * Math.sqrt(1 + t * t) || null&#125;","raw":null,"content":null},{"title":"PHP's hexdec in JavaScript","date":"2016-05-11T20:27:49.922Z","updated":"2016-05-11T20:27:49.922Z","comments":true,"path":"php/math/hexdec/index.html","permalink":"http://locutus.io/php/math/hexdec/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function hexdec (hexString) &#123; // discuss at: http://locutus.io/php/hexdec/ // original by: Philippe Baumann // example 1: hexdec('that') // returns 1: 10 // example 2: hexdec('a0') // returns 2: 160 hexString = (hexString + '').replace(/[^a-f0-9]/gi, '') return parseInt(hexString, 16)&#125;","raw":null,"content":null},{"title":"PHP's getrandmax in JavaScript","date":"2016-05-11T20:27:49.922Z","updated":"2016-05-11T20:27:49.922Z","comments":true,"path":"php/math/getrandmax/index.html","permalink":"http://locutus.io/php/math/getrandmax/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function getrandmax () &#123; // discuss at: http://locutus.io/php/getrandmax/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: getrandmax() // returns 1: 2147483647 return 2147483647&#125;","raw":null,"content":null},{"title":"PHP's fmod in JavaScript","date":"2016-05-11T20:27:49.922Z","updated":"2016-05-11T20:27:49.922Z","comments":true,"path":"php/math/fmod/index.html","permalink":"http://locutus.io/php/math/fmod/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536module.exports = function fmod (x, y) &#123; // discuss at: http://locutus.io/php/fmod/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // input by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // example 1: fmod(5.7, 1.3) // returns 1: 0.5 var tmp var tmp2 var p = 0 var pY = 0 var l = 0.0 var l2 = 0.0 tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/) p = parseInt(tmp[2], 10) - (tmp[1] + '').length tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/) pY = parseInt(tmp[2], 10) - (tmp[1] + '').length if (pY &gt; p) &#123; p = pY &#125; tmp2 = (x % y) if (p &lt; -100 || p &gt; 20) &#123; // toFixed will give an out of bound error so we fix it like this: l = Math.round(Math.log(tmp2) / Math.log(10)) l2 = Math.pow(10, l) return (tmp2 / l2).toFixed(l - p) * l2 &#125; else &#123; return parseFloat(tmp2.toFixed(-p)) &#125;&#125;","raw":null,"content":null},{"title":"PHP's floor in JavaScript","date":"2016-05-11T20:27:49.922Z","updated":"2016-05-11T20:27:49.922Z","comments":true,"path":"php/math/floor/index.html","permalink":"http://locutus.io/php/math/floor/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function floor (value) &#123; // discuss at: http://locutus.io/php/floor/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: floor(8723321.4) // returns 1: 8723321 return Math.floor(value)&#125;","raw":null,"content":null},{"title":"PHP's expm1 in JavaScript","date":"2016-05-11T20:27:49.922Z","updated":"2016-05-11T20:27:49.922Z","comments":true,"path":"php/math/expm1/index.html","permalink":"http://locutus.io/php/math/expm1/index.html","excerpt":"","keywords":null,"text":"123456789101112module.exports = function expm1 (x) &#123; // discuss at: http://locutus.io/php/expm1/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Robert Eisele (http://www.xarg.org/) // note 1: Precision 'n' can be adjusted as desired // example 1: expm1(1e-15) // returns 1: 1.0000000000000007e-15 return (x &lt; 1e-5 &amp;&amp; x &gt; -1e-5) ? x + 0.5 * x * x : Math.exp(x) - 1&#125;","raw":null,"content":null},{"title":"PHP's exp in JavaScript","date":"2016-05-11T20:27:49.922Z","updated":"2016-05-11T20:27:49.922Z","comments":true,"path":"php/math/exp/index.html","permalink":"http://locutus.io/php/math/exp/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function exp (arg) &#123; // discuss at: http://locutus.io/php/exp/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: exp(0.3) // returns 1: 1.3498588075760032 return Math.exp(arg)&#125;","raw":null,"content":null},{"title":"PHP's deg2rad in JavaScript","date":"2016-05-11T20:27:49.914Z","updated":"2016-05-11T20:27:49.914Z","comments":true,"path":"php/math/deg2rad/index.html","permalink":"http://locutus.io/php/math/deg2rad/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function deg2rad (angle) &#123; // discuss at: http://locutus.io/php/deg2rad/ // original by: Enrique Gonzalez // improved by: Thomas Grainger (http://graingert.co.uk) // example 1: deg2rad(45) // returns 1: 0.7853981633974483 return angle * 0.017453292519943295 // (angle / 180) * Math.PI;&#125;","raw":null,"content":null},{"title":"PHP's decoct in JavaScript","date":"2016-05-11T20:27:49.914Z","updated":"2016-05-11T20:27:49.914Z","comments":true,"path":"php/math/decoct/index.html","permalink":"http://locutus.io/php/math/decoct/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function decoct (number) &#123; // discuss at: http://locutus.io/php/decoct/ // original by: Enrique Gonzalez // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: http://stackoverflow.com/questions/57803/how-to-convert-decimal-to-hex-in-javascript // input by: pilus // example 1: decoct(15) // returns 1: '17' // example 2: decoct(264) // returns 2: '410' if (number &lt; 0) &#123; number = 0xFFFFFFFF + number + 1 &#125; return parseInt(number, 10) .toString(8)&#125;","raw":null,"content":null},{"title":"PHP's dechex in JavaScript","date":"2016-05-11T20:27:49.914Z","updated":"2016-05-11T20:27:49.914Z","comments":true,"path":"php/math/dechex/index.html","permalink":"http://locutus.io/php/math/dechex/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819module.exports = function dechex (number) &#123; // discuss at: http://locutus.io/php/dechex/ // original by: Philippe Baumann // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: http://stackoverflow.com/questions/57803/how-to-convert-decimal-to-hex-in-javascript // input by: pilus // example 1: dechex(10) // returns 1: 'a' // example 2: dechex(47) // returns 2: '2f' // example 3: dechex(-1415723993) // returns 3: 'ab9dc427' if (number &lt; 0) &#123; number = 0xFFFFFFFF + number + 1 &#125; return parseInt(number, 10) .toString(16)&#125;","raw":null,"content":null},{"title":"PHP's decbin in JavaScript","date":"2016-05-11T20:27:49.914Z","updated":"2016-05-11T20:27:49.914Z","comments":true,"path":"php/math/decbin/index.html","permalink":"http://locutus.io/php/math/decbin/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function decbin (number) &#123; // discuss at: http://locutus.io/php/decbin/ // original by: Enrique Gonzalez // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman) // improved by: http://stackoverflow.com/questions/57803/how-to-convert-decimal-to-hex-in-javascript // input by: pilus // input by: nord_ua // example 1: decbin(12) // returns 1: '1100' // example 2: decbin(26) // returns 2: '11010' // example 3: decbin('26') // returns 3: '11010' if (number &lt; 0) &#123; number = 0xFFFFFFFF + number + 1 &#125; return parseInt(number, 10) .toString(2)&#125;","raw":null,"content":null},{"title":"PHP's cosh in JavaScript","date":"2016-05-11T20:27:49.914Z","updated":"2016-05-11T20:27:49.914Z","comments":true,"path":"php/math/cosh/index.html","permalink":"http://locutus.io/php/math/cosh/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function cosh (arg) &#123; // discuss at: http://locutus.io/php/cosh/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: cosh(-0.18127180117607017) // returns 1: 1.0164747716114113 return (Math.exp(arg) + Math.exp(-arg)) / 2&#125;","raw":null,"content":null},{"title":"PHP's cos in JavaScript","date":"2016-05-11T20:27:49.914Z","updated":"2016-05-11T20:27:49.914Z","comments":true,"path":"php/math/cos/index.html","permalink":"http://locutus.io/php/math/cos/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function cos (arg) &#123; // discuss at: http://locutus.io/php/cos/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: Math.ceil(cos(8723321.4) * 10000000) // returns 1: -1812718 return Math.cos(arg)&#125;","raw":null,"content":null},{"title":"PHP's ceil in JavaScript","date":"2016-05-11T20:27:49.914Z","updated":"2016-05-11T20:27:49.914Z","comments":true,"path":"php/math/ceil/index.html","permalink":"http://locutus.io/php/math/ceil/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function ceil (value) &#123; // discuss at: http://locutus.io/php/ceil/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: ceil(8723321.4) // returns 1: 8723322 return Math.ceil(value)&#125;","raw":null,"content":null},{"title":"PHP's bindec in JavaScript","date":"2016-05-11T20:27:49.914Z","updated":"2016-05-11T20:27:49.914Z","comments":true,"path":"php/math/bindec/index.html","permalink":"http://locutus.io/php/math/bindec/index.html","excerpt":"","keywords":null,"text":"1234567891011121314module.exports = function bindec (binaryString) &#123; // discuss at: http://locutus.io/php/bindec/ // original by: Philippe Baumann // example 1: bindec('110011') // returns 1: 51 // example 2: bindec('000110011') // returns 2: 51 // example 3: bindec('111') // returns 3: 7 binaryString = (binaryString + '').replace(/[^01]/gi, '') return parseInt(binaryString, 2)&#125;","raw":null,"content":null},{"title":"PHP's base_convert in JavaScript","date":"2016-05-11T20:27:49.906Z","updated":"2016-05-11T20:27:49.906Z","comments":true,"path":"php/math/base_convert/index.html","permalink":"http://locutus.io/php/math/base_convert/index.html","excerpt":"","keywords":null,"text":"12345678910module.exports = function base_convert (number, frombase, tobase) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/base_convert/ // original by: Philippe Baumann // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // example 1: base_convert('A37334', 16, 2) // returns 1: '101000110111001100110100' return parseInt(number + '', frombase | 0) .toString(tobase | 0)&#125;","raw":null,"content":null},{"title":"PHP's atanh in JavaScript","date":"2016-05-11T20:27:49.906Z","updated":"2016-05-11T20:27:49.906Z","comments":true,"path":"php/math/atanh/index.html","permalink":"http://locutus.io/php/math/atanh/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function atanh (arg) &#123; // discuss at: http://locutus.io/php/atanh/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: atanh(0.3) // returns 1: 0.3095196042031118 return 0.5 * Math.log((1 + arg) / (1 - arg))&#125;","raw":null,"content":null},{"title":"PHP's atan2 in JavaScript","date":"2016-05-11T20:27:49.906Z","updated":"2016-05-11T20:27:49.906Z","comments":true,"path":"php/math/atan2/index.html","permalink":"http://locutus.io/php/math/atan2/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function atan2 (y, x) &#123; // discuss at: http://locutus.io/php/atan2/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: atan2(1, 1) // returns 1: 0.7853981633974483 return Math.atan2(y, x)&#125;","raw":null,"content":null},{"title":"PHP's atan in JavaScript","date":"2016-05-11T20:27:49.906Z","updated":"2016-05-11T20:27:49.906Z","comments":true,"path":"php/math/atan/index.html","permalink":"http://locutus.io/php/math/atan/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function atan (arg) &#123; // discuss at: http://locutus.io/php/atan/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: atan(8723321.4) // returns 1: 1.5707962121596615 return Math.atan(arg)&#125;","raw":null,"content":null},{"title":"PHP's asinh in JavaScript","date":"2016-05-11T20:27:49.906Z","updated":"2016-05-11T20:27:49.906Z","comments":true,"path":"php/math/asinh/index.html","permalink":"http://locutus.io/php/math/asinh/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function asinh (arg) &#123; // discuss at: http://locutus.io/php/asinh/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: asinh(8723321.4) // returns 1: 16.67465779841863 return Math.log(arg + Math.sqrt(arg * arg + 1))&#125;","raw":null,"content":null},{"title":"PHP's asin in JavaScript","date":"2016-05-11T20:27:49.906Z","updated":"2016-05-11T20:27:49.906Z","comments":true,"path":"php/math/asin/index.html","permalink":"http://locutus.io/php/math/asin/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function asin (arg) &#123; // discuss at: http://locutus.io/php/asin/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // note 1: Sorry about the crippled test. Needed because precision differs accross platforms. // example 1: (asin(0.3) + '').substr(0, 17) // returns 1: \"0.304692654015397\" return Math.asin(arg)&#125;","raw":null,"content":null},{"title":"PHP's acosh in JavaScript","date":"2016-05-11T20:27:49.906Z","updated":"2016-05-11T20:27:49.906Z","comments":true,"path":"php/math/acosh/index.html","permalink":"http://locutus.io/php/math/acosh/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function acosh (arg) &#123; // discuss at: http://locutus.io/php/acosh/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // example 1: acosh(8723321.4) // returns 1: 16.674657798418625 return Math.log(arg + Math.sqrt(arg * arg - 1))&#125;","raw":null,"content":null},{"title":"PHP's acos in JavaScript","date":"2016-05-11T20:27:49.906Z","updated":"2016-05-11T20:27:49.906Z","comments":true,"path":"php/math/acos/index.html","permalink":"http://locutus.io/php/math/acos/index.html","excerpt":"","keywords":null,"text":"123456789module.exports = function acos (arg) &#123; // discuss at: http://locutus.io/php/acos/ // original by: Onno Marsman (https://twitter.com/onnomarsman) // note 1: Sorry about the crippled test. Needed because precision differs accross platforms. // example 1: (acos(0.3) + '').substr(0, 17) // returns 1: \"1.266103672779499\" return Math.acos(arg)&#125;","raw":null,"content":null},{"title":"PHP's abs in JavaScript","date":"2016-05-11T20:27:49.898Z","updated":"2016-05-11T20:27:49.898Z","comments":true,"path":"php/math/abs/index.html","permalink":"http://locutus.io/php/math/abs/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function abs (mixedNumber) &#123; // discuss at: http://locutus.io/php/abs/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // improved by: Karol Kowalski // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // example 1: abs(4.2) // returns 1: 4.2 // example 2: abs(-4.2) // returns 2: 4.2 // example 3: abs(-5) // returns 3: 5 // example 4: abs('_argos') // returns 4: 0 return Math.abs(mixedNumber) || 0&#125;","raw":null,"content":null},{"title":"PHP's json_last_error in JavaScript","date":"2016-05-11T20:27:49.898Z","updated":"2016-05-11T20:27:49.898Z","comments":true,"path":"php/json/json_last_error/index.html","permalink":"http://locutus.io/php/json/json_last_error/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223module.exports = function json_last_error () &#123; // eslint-disable-line camelcase // discuss at: http://phpjs.org/functions/json_last_error/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: json_last_error() // returns 1: 0 // JSON_ERROR_NONE = 0 // max depth limit to be removed per PHP comments in json.c (not possible in JS?): // JSON_ERROR_DEPTH = 1 // internal use? also not documented: // JSON_ERROR_STATE_MISMATCH = 2 // [\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F] if used directly within json_decode(): // JSON_ERROR_CTRL_CHAR = 3 // but JSON functions auto-escape these, so error not possible in JavaScript // JSON_ERROR_SYNTAX = 4 var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; return $locutus.php &amp;&amp; $locutus.php.last_error_json ? $locutus.php.last_error_json : 0&#125;","raw":null,"content":null},{"title":"PHP's json_encode in JavaScript","date":"2016-05-11T20:27:49.898Z","updated":"2016-05-11T20:27:49.898Z","comments":true,"path":"php/json/json_encode/index.html","permalink":"http://locutus.io/php/json/json_encode/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179module.exports = function json_encode (mixedVal) &#123; // eslint-disable-line camelcase // discuss at: http://phpjs.org/functions/json_encode/ // original by: Public Domain (http://www.json.org/json2.js) // reimplemented by: Kevin van Zonneveld (http://kevin.vanzonneveld.net) // improved by: Michael White // input by: felix // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: json_encode('Kevin') // returns 1: '\"Kevin\"' /* http://www.JSON.org/json2.js 2008-11-19 Public Domain. NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK. See http://www.JSON.org/js.html */ var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; var json = $global.JSON var retVal try &#123; if (typeof json === 'object' &amp;&amp; typeof json.stringify === 'function') &#123; // Errors will not be caught here if our own equivalent to resource retVal = json.stringify(mixedVal) if (retVal === undefined) &#123; throw new SyntaxError('json_encode') &#125; return retVal &#125; var value = mixedVal var quote = function (string) &#123; var escapeChars = [ '\\u0000-\\u001f', '\\u007f-\\u009f', '\\u00ad', '\\u0600-\\u0604', '\\u070f', '\\u17b4', '\\u17b5', '\\u200c-\\u200f', '\\u2028-\\u202f', '\\u2060-\\u206f', '\\ufeff', '\\ufff0-\\uffff' ].join('') var escapable = new RegExp('[\\\\\"' + escapeChars + ']', 'g') var meta = &#123; // table of character substitutions '\\b': '\\\\b', '\\t': '\\\\t', '\\n': '\\\\n', '\\f': '\\\\f', '\\r': '\\\\r', '\"': '\\\\\"', '\\\\': '\\\\\\\\' &#125; escapable.lastIndex = 0 return escapable.test(string) ? '\"' + string.replace(escapable, function (a) &#123; var c = meta[a] return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0) .toString(16)) .slice(-4) &#125;) + '\"' : '\"' + string + '\"' &#125; var _str = function (key, holder) &#123; var gap = '' var indent = ' ' // The loop counter. var i = 0 // The member key. var k = '' // The member value. var v = '' var length = 0 var mind = gap var partial = [] var value = holder[key] // If the value has a toJSON method, call it to obtain a replacement value. if (value &amp;&amp; typeof value === 'object' &amp;&amp; typeof value.toJSON === 'function') &#123; value = value.toJSON(key) &#125; // What happens next depends on the value's type. switch (typeof value) &#123; case 'string': return quote(value) case 'number': // JSON numbers must be finite. Encode non-finite numbers as null. return isFinite(value) ? String(value) : 'null' case 'boolean': case 'null': // If the value is a boolean or null, convert it to a string. Note: // typeof null does not produce 'null'. The case is included here in // the remote chance that this gets fixed someday. return String(value) case 'object': // If the type is 'object', we might be dealing with an object or an array or // null. // Due to a specification blunder in ECMAScript, typeof null is 'object', // so watch out for that case. if (!value) &#123; return 'null' &#125; // Make an array to hold the partial results of stringifying this object value. gap += indent partial = [] // Is the value an array? if (Object.prototype.toString.apply(value) === '[object Array]') &#123; // The value is an array. Stringify every element. Use null as a placeholder // for non-JSON values. length = value.length for (i = 0; i &lt; length; i += 1) &#123; partial[i] = _str(i, value) || 'null' &#125; // Join all of the elements together, separated with commas, and wrap them in // brackets. v = partial.length === 0 ? '[]' : gap ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' : '[' + partial.join(',') + ']' gap = mind return v &#125; // Iterate through all of the keys in the object. for (k in value) &#123; if (Object.hasOwnProperty.call(value, k)) &#123; v = _str(k, value) if (v) &#123; partial.push(quote(k) + (gap ? ': ' : ':') + v) &#125; &#125; &#125; // Join all of the member texts together, separated with commas, // and wrap them in braces. v = partial.length === 0 ? '&#123;&#125;' : gap ? '&#123;\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '&#125;' : '&#123;' + partial.join(',') + '&#125;' gap = mind return v case 'undefined': case 'function': default: throw new SyntaxError('json_encode') &#125; &#125; // Make a fake root object containing our value under the key of ''. // Return the result of stringifying the value. return _str('', &#123; '': value &#125;) &#125; catch (err) &#123; // @todo: ensure error handling above throws a SyntaxError in all cases where it could // (i.e., when the JSON global is not available and there is an error) if (!(err instanceof SyntaxError)) &#123; throw new Error('Unexpected error type in json_encode()') &#125; // usable by json_last_error() $locutus.php.last_error_json = 4 return null &#125;&#125;","raw":null,"content":null},{"title":"PHP's json_decode in JavaScript","date":"2016-05-11T20:27:49.898Z","updated":"2016-05-11T20:27:49.898Z","comments":true,"path":"php/json/json_decode/index.html","permalink":"http://locutus.io/php/json/json_decode/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899module.exports = function json_decode (strJson) &#123; // eslint-disable-line camelcase // discuss at: http://phpjs.org/functions/json_decode/ // original by: Public Domain (http://www.json.org/json2.js) // reimplemented by: Kevin van Zonneveld (http://kevin.vanzonneveld.net) // improved by: T.J. Leahy // improved by: Michael White // note 1: If node or the browser does not offer JSON.parse, // note 1: this function falls backslash // note 1: to its own implementation using eval, and hence should be considered unsafe // example 1: json_decode('[ 1 ]') // returns 1: [1] /* http://www.JSON.org/json2.js 2008-11-19 Public Domain. NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK. See http://www.JSON.org/js.html */ var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; var json = $global.JSON if (typeof json === 'object' &amp;&amp; typeof json.parse === 'function') &#123; try &#123; return json.parse(strJson) &#125; catch (err) &#123; if (!(err instanceof SyntaxError)) &#123; throw new Error('Unexpected error type in json_decode()') &#125; // usable by json_last_error() $locutus.php.last_error_json = 4 return null &#125; &#125; var chars = [ '\\u0000', '\\u00ad', '\\u0600-\\u0604', '\\u070f', '\\u17b4', '\\u17b5', '\\u200c-\\u200f', '\\u2028-\\u202f', '\\u2060-\\u206f', '\\ufeff', '\\ufff0-\\uffff' ].join('') var cx = new RegExp('[' + chars + ']', 'g') var j var text = strJson // Parsing happens in four stages. In the first stage, we replace certain // Unicode characters with escape sequences. JavaScript handles many characters // incorrectly, either silently deleting them, or treating them as line endings. cx.lastIndex = 0 if (cx.test(text)) &#123; text = text.replace(cx, function (a) &#123; return '\\\\u' + ('0000' + a.charCodeAt(0) .toString(16)) .slice(-4) &#125;) &#125; // In the second stage, we run the text against regular expressions that look // for non-JSON patterns. We are especially concerned with '()' and 'new' // because they can cause invocation, and '=' because it can cause mutation. // But just to be safe, we want to reject all unexpected forms. // We split the second stage into 4 regexp operations in order to work around // crippling inefficiencies in IE's and Safari's regexp engines. First we // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we // replace all simple value tokens with ']' characters. Third, we delete all // open brackets that follow a colon or comma or that begin the text. Finally, // we look to see that the remaining characters are only whitespace or ']' or // ',' or ':' or '&#123;' or '&#125;'. If that is so, then the text is safe for eval. var m = (/^[\\],:&#123;&#125;\\s]*$/) .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]&#123;4&#125;)/g, '@') .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']') .replace(/(?:^|:|,)(?:\\s*\\[)+/g, '')) if (m) &#123; // In the third stage we use the eval function to compile the text into a // JavaScript structure. The '&#123;' operator is subject to a syntactic ambiguity // in JavaScript: it can begin a block or an object literal. We wrap the text // in parens to eliminate the ambiguity. j = eval('(' + text + ')') // eslint-disable-line no-eval return j &#125; // usable by json_last_error() $locutus.php.last_error_json = 4 return null&#125;","raw":null,"content":null},{"title":"PHP's json extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/json/index.html","permalink":"http://locutus.io/php/json/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's version_compare in JavaScript","date":"2016-05-11T20:27:49.898Z","updated":"2016-05-11T20:27:49.898Z","comments":true,"path":"php/info/version_compare/index.html","permalink":"http://locutus.io/php/info/version_compare/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114module.exports = function version_compare (v1, v2, operator) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/version_compare/ // original by: Philippe Jausions (http://pear.php.net/user/jausions) // original by: Aidan Lister (http://aidanlister.com/) // reimplemented by: Kankrelune (http://www.webfaktory.info/) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Scott Baker // improved by: Theriault (https://github.com/Theriault) // example 1: version_compare('8.2.5rc', '8.2.5a') // returns 1: 1 // example 2: version_compare('8.2.50', '8.2.52', '&lt;') // returns 2: true // example 3: version_compare('5.3.0-dev', '5.3.0') // returns 3: -1 // example 4: version_compare('4.1.0.52','4.01.0.51') // returns 4: 1 // Important: compare must be initialized at 0. var i var x var compare = 0 // vm maps textual PHP versions to negatives so they're less than 0. // PHP currently defines these as CASE-SENSITIVE. It is important to // leave these as negatives so that they can come before numerical versions // and as if no letters were there to begin with. // (1alpha is &lt; 1 and &lt; 1.1 but &gt; 1dev1) // If a non-numerical value can't be mapped to this table, it receives // -7 as its value. var vm = &#123; 'dev': -6, 'alpha': -5, 'a': -5, 'beta': -4, 'b': -4, 'RC': -3, 'rc': -3, '#': -2, 'p': 1, 'pl': 1 &#125; // This function will be called to prepare each version argument. // It replaces every _, -, and + with a dot. // It surrounds any nonsequence of numbers/dots with dots. // It replaces sequences of dots with a single dot. // version_compare('4..0', '4.0') === 0 // Important: A string of 0 length needs to be converted into a value // even less than an unexisting value in vm (-7), hence [-8]. // It's also important to not strip spaces because of this. // version_compare('', ' ') === 1 var _prepVersion = function (v) &#123; v = ('' + v).replace(/[_\\-+]/g, '.') v = v.replace(/([^.\\d]+)/g, '.$1.').replace(/\\.&#123;2,&#125;/g, '.') return (!v.length ? [-8] : v.split('.')) &#125; // This converts a version component to a number. // Empty component becomes 0. // Non-numerical component becomes a negative number. // Numerical component becomes itself as an integer. var _numVersion = function (v) &#123; return !v ? 0 : (isNaN(v) ? vm[v] || -7 : parseInt(v, 10)) &#125; v1 = _prepVersion(v1) v2 = _prepVersion(v2) x = Math.max(v1.length, v2.length) for (i = 0; i &lt; x; i++) &#123; if (v1[i] === v2[i]) &#123; continue &#125; v1[i] = _numVersion(v1[i]) v2[i] = _numVersion(v2[i]) if (v1[i] &lt; v2[i]) &#123; compare = -1 break &#125; else if (v1[i] &gt; v2[i]) &#123; compare = 1 break &#125; &#125; if (!operator) &#123; return compare &#125; // Important: operator is CASE-SENSITIVE. // \"No operator\" seems to be treated as \"&lt;.\" // Any other values seem to make the function return null. switch (operator) &#123; case '&gt;': case 'gt': return (compare &gt; 0) case '&gt;=': case 'ge': return (compare &gt;= 0) case '&lt;=': case 'le': return (compare &lt;= 0) case '===': case '=': case 'eq': return (compare === 0) case '&lt;&gt;': case '!==': case 'ne': return (compare !== 0) case '': case '&lt;': case 'lt': return (compare &lt; 0) default: return null &#125;&#125;","raw":null,"content":null},{"title":"PHP's set_time_limit in JavaScript","date":"2016-05-11T20:27:49.898Z","updated":"2016-05-11T20:27:49.898Z","comments":true,"path":"php/info/set_time_limit/index.html","permalink":"http://locutus.io/php/info/set_time_limit/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819module.exports = function set_time_limit (seconds) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/set_time_limit/ // original by: Brett Zamir (http://brett-zamir.me) // test: skip-all // example 1: set_time_limit(4) // returns 1: undefined var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; setTimeout(function () &#123; if (!$locutus.php.timeoutStatus) &#123; $locutus.php.timeoutStatus = true &#125; throw new Error('Maximum execution time exceeded') &#125;, seconds * 1000)&#125;","raw":null,"content":null},{"title":"PHP's ini_set in JavaScript","date":"2016-05-11T20:27:49.894Z","updated":"2016-05-11T20:27:49.894Z","comments":true,"path":"php/info/ini_set/index.html","permalink":"http://locutus.io/php/info/ini_set/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546module.exports = function ini_set (varname, newvalue) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ini_set/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: This will not set a global_value or access level for the ini item // example 1: ini_set('date.timezone', 'Asia/Hong_Kong') // example 1: ini_set('date.timezone', 'America/Chicago') // returns 1: 'Asia/Hong_Kong' var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.ini = $locutus.php.ini || &#123;&#125; $locutus.php.ini = $locutus.php.ini || &#123;&#125; $locutus.php.ini[varname] = $locutus.php.ini[varname] || &#123;&#125; var oldval = $locutus.php.ini[varname].local_value var lowerStr = (newvalue + '').toLowerCase().trim() if (newvalue === true || lowerStr === 'on' || lowerStr === '1') &#123; newvalue = 'on' &#125; if (newvalue === false || lowerStr === 'off' || lowerStr === '0') &#123; newvalue = 'off' &#125; var _setArr = function (oldval) &#123; // Although these are set individually, they are all accumulated if (typeof oldval === 'undefined') &#123; $locutus.ini[varname].local_value = [] &#125; $locutus.ini[varname].local_value.push(newvalue) &#125; switch (varname) &#123; case 'extension': _setArr(oldval, newvalue) break default: $locutus.php.ini[varname].local_value = newvalue break &#125; return oldval&#125;","raw":null,"content":null},{"title":"PHP's ini_get in JavaScript","date":"2016-05-11T20:27:49.894Z","updated":"2016-05-11T20:27:49.894Z","comments":true,"path":"php/info/ini_get/index.html","permalink":"http://locutus.io/php/info/ini_get/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223module.exports = function ini_get (varname) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ini_get/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: The ini values must be set by ini_set or manually within an ini file // example 1: ini_set('date.timezone', 'Asia/Hong_Kong') // example 1: ini_get('date.timezone') // returns 1: 'Asia/Hong_Kong' var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.ini = $locutus.php.ini || &#123;&#125; if ($locutus.php.ini[varname] &amp;&amp; $locutus.php.ini[varname].local_value !== undefined) &#123; if ($locutus.php.ini[varname].local_value === null) &#123; return '' &#125; return $locutus.php.ini[varname].local_value &#125; return ''&#125;","raw":null,"content":null},{"title":"PHP's info extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/info/index.html","permalink":"http://locutus.io/php/info/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's getenv in JavaScript","date":"2016-05-11T20:27:49.886Z","updated":"2016-05-11T20:27:49.886Z","comments":true,"path":"php/info/getenv/index.html","permalink":"http://locutus.io/php/info/getenv/index.html","excerpt":"","keywords":null,"text":"123456789101112module.exports = function getenv (varname) &#123; // discuss at: http://locutus.io/php/getenv/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: getenv('LC_ALL') // returns 1: false if (typeof process !== 'undefined' || !process.env || !process.env[varname]) &#123; return false &#125; return process.env[varname]&#125;","raw":null,"content":null},{"title":"PHP's assert_options in JavaScript","date":"2016-05-11T20:27:49.882Z","updated":"2016-05-11T20:27:49.882Z","comments":true,"path":"php/info/assert_options/index.html","permalink":"http://locutus.io/php/info/assert_options/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839module.exports = function assert_options (what, value) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/assert_options/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: assert_options('ASSERT_CALLBACK') // returns 1: null var iniKey, defaultVal switch (what) &#123; case 'ASSERT_ACTIVE': iniKey = 'assert.active' defaultVal = 1 break case 'ASSERT_WARNING': iniKey = 'assert.warning' defaultVal = 1 var msg = 'We have not yet implemented warnings for us to throw ' msg += 'in JavaScript (assert_options())' throw new Error(msg) case 'ASSERT_BAIL': iniKey = 'assert.bail' defaultVal = 0 break case 'ASSERT_QUIET_EVAL': iniKey = 'assert.quiet_eval' defaultVal = 0 break case 'ASSERT_CALLBACK': iniKey = 'assert.callback' defaultVal = null break default: throw new Error('Improper type for assert_options()') &#125; // I presume this is to be the most recent value, instead of the default value var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')(iniKey) : undefined) || defaultVal return iniVal&#125;","raw":null,"content":null},{"title":"PHP extensions  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/index.html","permalink":"http://locutus.io/php/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's i18n extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/i18n/index.html","permalink":"http://locutus.io/php/i18n/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's i18n_loc_set_default in JavaScript","date":"2016-05-11T20:27:49.886Z","updated":"2016-05-11T20:27:49.886Z","comments":true,"path":"php/i18n/i18n_loc_set_default/index.html","permalink":"http://locutus.io/php/i18n/i18n_loc_set_default/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526module.exports = function i18n_loc_set_default (name) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/i18n_loc_set_default/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: Renamed in PHP6 from locale_set_default(). Not listed yet at php.net // note 1: List of locales at http://demo.icu-project.org/icu-bin/locexp (use for implementing other locales here) // note 1: To be usable with sort() if it is passed the SORT_LOCALE_STRING sorting flag: http://php.net/manual/en/function.sort.php // example 1: i18n_loc_set_default('pt_PT') // returns 1: true var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.locales = $locutus.php.locales || &#123;&#125; $locutus.php.locales.en_US_POSIX = &#123; sorting: function (str1, str2) &#123; // @todo: This one taken from strcmp, but need for other locales; // we don't use localeCompare since its locale is not settable return (str1 === str2) ? 0 : ((str1 &gt; str2) ? 1 : -1) &#125; &#125; $locutus.php.locale_default = name return true&#125;","raw":null,"content":null},{"title":"PHP's i18n_loc_get_default in JavaScript","date":"2016-05-11T20:27:49.882Z","updated":"2016-05-11T20:27:49.882Z","comments":true,"path":"php/i18n/i18n_loc_get_default/index.html","permalink":"http://locutus.io/php/i18n/i18n_loc_get_default/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function i18n_loc_get_default () &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/i18n_loc_get_default/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: Renamed in PHP6 from locale_get_default(). Not listed yet at php.net. // note 1: List of locales at &lt;http://demo.icu-project.org/icu-bin/locexp&gt; // note 1: To be usable with sort() if it is passed the `SORT_LOCALE_STRING` // note 1: sorting flag: http://php.net/manual/en/function.sort.php // example 1: i18n_loc_get_default() // returns 1: 'en_US_POSIX' // example 2: i18n_loc_set_default('pt_PT') // example 2: i18n_loc_get_default() // returns 2: 'pt_PT' var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.locales = $locutus.php.locales || &#123;&#125; return $locutus.php.locale_default || 'en_US_POSIX'&#125;","raw":null,"content":null},{"title":"PHP's funchand extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/funchand/index.html","permalink":"http://locutus.io/php/funchand/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's get_defined_functions in JavaScript","date":"2016-05-11T20:27:49.886Z","updated":"2016-05-11T20:27:49.886Z","comments":true,"path":"php/funchand/get_defined_functions/index.html","permalink":"http://locutus.io/php/funchand/get_defined_functions/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445module.exports = function get_defined_functions () &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/get_defined_functions/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: Test case 1: If get_defined_functions can find // note 1: itself in the defined functions, it worked :) // example 1: function test_in_array (array, p_val) &#123;for(var i = 0, l = array.length; i &lt; l; i++) &#123;if (array[i] === p_val) return true&#125; return false&#125; // example 1: var $funcs = get_defined_functions() // example 1: var $found = test_in_array($funcs, 'get_defined_functions') // example 1: var $result = $found // returns 1: true // test: skip-1 var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; var i = '' var arr = [] var already = &#123;&#125; for (i in $global) &#123; try &#123; if (typeof $global[i] === 'function') &#123; if (!already[i]) &#123; already[i] = 1 arr.push(i) &#125; &#125; else if (typeof $global[i] === 'object') &#123; for (var j in $global[i]) &#123; if (typeof $global[j] === 'function' &amp;&amp; $global[j] &amp;&amp; !already[j]) &#123; already[j] = 1 arr.push(j) &#125; &#125; &#125; &#125; catch (e) &#123; // Some objects in Firefox throw exceptions when their // properties are accessed (e.g., sessionStorage) &#125; &#125; return arr&#125;","raw":null,"content":null},{"title":"PHP's function_exists in JavaScript","date":"2016-05-11T20:27:49.882Z","updated":"2016-05-11T20:27:49.882Z","comments":true,"path":"php/funchand/function_exists/index.html","permalink":"http://locutus.io/php/funchand/function_exists/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718module.exports = function function_exists (funcName) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/function_exists/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Steve Clay // improved by: Legaev Andrey // improved by: Brett Zamir (http://brett-zamir.me) // example 1: function_exists('isFinite') // returns 1: true // test: skip-1 var $global = (typeof window !== 'undefined' ? window : GLOBAL) if (typeof funcName === 'string') &#123; funcName = $global[funcName] &#125; return typeof funcName === 'function'&#125;","raw":null,"content":null},{"title":"PHP's create_function in JavaScript","date":"2016-05-11T20:27:49.882Z","updated":"2016-05-11T20:27:49.882Z","comments":true,"path":"php/funchand/create_function/index.html","permalink":"http://locutus.io/php/funchand/create_function/index.html","excerpt":"","keywords":null,"text":"1234567891011121314module.exports = function create_function (args, code) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/create_function/ // original by: Johnny Mast (http://www.phpvrouwen.nl) // reimplemented by: Brett Zamir (http://brett-zamir.me) // example 1: var $f = create_function('a, b', 'return (a + b)') // example 1: $f(1, 2) // returns 1: 3 try &#123; return Function.apply(null, args.split(',').concat(code)) &#125; catch (e) &#123; return false &#125;&#125;","raw":null,"content":null},{"title":"PHP's call_user_func_array in JavaScript","date":"2016-05-11T20:27:49.870Z","updated":"2016-05-11T20:27:49.870Z","comments":true,"path":"php/funchand/call_user_func_array/index.html","permalink":"http://locutus.io/php/funchand/call_user_func_array/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657module.exports = function call_user_func_array (cb, parameters) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/call_user_func_array/ // original by: Thiago Mata (http://thiagomata.blog.com) // revised by: Jon Hohle // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Diplom@t (http://difane.com/) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: Depending on the `cb` that is passed, // note 1: this function can use `eval` and/or `new Function`. // note 1: The `eval` input is however checked to only allow valid function names, // note 1: So it should not be unsafer than uses without eval (seeing as you can) // note 1: already pass any function to be executed here. // example 1: call_user_func_array('isNaN', ['a']) // returns 1: true // example 2: call_user_func_array('isNaN', [1]) // returns 2: false var $global = (typeof window !== 'undefined' ? window : GLOBAL) var func var scope = null var validJSFunctionNamePattern = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/ if (typeof cb === 'string') &#123; if (typeof $global[cb] === 'function') &#123; func = $global[cb] &#125; else if (cb.match(validJSFunctionNamePattern)) &#123; func = (new Function(null, 'return ' + cb)()) // eslint-disable-line no-new-func &#125; &#125; else if (Object.prototype.toString.call(cb) === '[object Array]') &#123; if (typeof cb[0] === 'string') &#123; if (cb[0].match(validJSFunctionNamePattern)) &#123; func = eval(cb[0] + \"['\" + cb[1] + \"']\") // eslint-disable-line no-eval &#125; &#125; else &#123; func = cb[0][cb[1]] &#125; if (typeof cb[0] === 'string') &#123; if (typeof $global[cb[0]] === 'function') &#123; scope = $global[cb[0]] &#125; else if (cb[0].match(validJSFunctionNamePattern)) &#123; scope = eval(cb[0]) // eslint-disable-line no-eval &#125; &#125; else if (typeof cb[0] === 'object') &#123; scope = cb[0] &#125; &#125; else if (typeof cb === 'function') &#123; func = cb &#125; if (typeof func !== 'function') &#123; throw new Error(func + ' is not a valid function') &#125; return func.apply(scope, parameters)&#125;","raw":null,"content":null},{"title":"PHP's call_user_func in JavaScript","date":"2016-05-11T20:27:49.882Z","updated":"2016-05-11T20:27:49.882Z","comments":true,"path":"php/funchand/call_user_func/index.html","permalink":"http://locutus.io/php/funchand/call_user_func/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function call_user_func (cb, parameters) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/call_user_func/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Diplom@t (http://difane.com/) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: Depends on call_user_func_array which in turn depends on the `cb` that is passed, // note 1: this function can use `eval`. // note 1: The `eval` input is however checked to only allow valid function names, // note 1: So it should not be unsafer than uses without eval (seeing as you can) // note 1: already pass any function to be executed here. // example 1: call_user_func('isNaN', 'a') // returns 1: true var callUserFuncArray = require('../funchand/call_user_func_array') parameters = Array.prototype.slice.call(arguments, 1) return callUserFuncArray(cb, parameters)&#125;","raw":null,"content":null},{"title":"PHP's realpath in JavaScript","date":"2016-05-11T20:27:49.870Z","updated":"2016-05-11T20:27:49.870Z","comments":true,"path":"php/filesystem/realpath/index.html","permalink":"http://locutus.io/php/filesystem/realpath/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556module.exports = function realpath (path) &#123; // discuss at: http://locutus.io/php/realpath/ // original by: mk.keck // improved by: Kevin van Zonneveld (http://kvz.io) // note 1: Returned path is an url like e.g. 'http://yourhost.tld/path/' // example 1: realpath('some/dir/.././_supporters/pj_test_supportfile_1.htm') // returns 1: 'some/_supporters/pj_test_supportfile_1.htm' if (typeof window === 'undefined') &#123; var nodePath = require('path') return nodePath.normalize(path) &#125; var p = 0 var arr = [] // Save the root, if not given var r = this.window.location.href // Avoid input failures // Check if there's a port in path (like 'http://') path = (path + '').replace('\\\\', '/') if (path.indexOf('://') !== -1) &#123; p = 1 &#125; // Ok, there's not a port in path, so let's take the root if (!p) &#123; path = r.substring(0, r.lastIndexOf('/') + 1) + path &#125; // Explode the given path into it's parts arr = path.split('/') // The path is an array now path = [] // Foreach part make a check for (var k in arr) &#123; // This is'nt really interesting if (arr[k] === '.') &#123; continue &#125; // This reduces the realpath if (arr[k] === '..') &#123; /* But only if there more than 3 parts in the path-array. * The first three parts are for the uri */ if (path.length &gt; 3) &#123; path.pop() &#125; &#125; else &#123; // This adds parts to the realpath // But only if the part is not empty or the uri // (the first three parts ar needed) was not // saved if ((path.length &lt; 2) || (arr[k] !== '')) &#123; path.push(arr[k]) &#125; &#125; &#125; // Returns the absloute path as a string return path.join('/')&#125;","raw":null,"content":null},{"title":"PHP's pathinfo in JavaScript","date":"2016-05-11T20:27:49.870Z","updated":"2016-05-11T20:27:49.870Z","comments":true,"path":"php/filesystem/pathinfo/index.html","permalink":"http://locutus.io/php/filesystem/pathinfo/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151module.exports = function pathinfo (path, options) &#123; // discuss at: http://locutus.io/php/pathinfo/ // original by: Nate // revised by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Dmitry Gorelenkov // input by: Timo // note 1: Inspired by actual PHP source: php5-5.2.6/ext/standard/string.c line #1559 // note 1: The way the bitwise arguments are handled allows for greater flexibility // note 1: &amp; compatability. We might even standardize this // note 1: code and use a similar approach for // note 1: other bitwise PHP functions // note 1: Locutus tries very hard to stay away from a core.js // note 1: file with global dependencies, because we like // note 1: that you can just take a couple of functions and be on your way. // note 1: But by way we implemented this function, // note 1: if you want you can still declare the PATHINFO_* // note 1: yourself, and then you can use: // note 1: pathinfo('/www/index.html', PATHINFO_BASENAME | PATHINFO_EXTENSION); // note 1: which makes it fully compliant with PHP syntax. // example 1: pathinfo('/www/htdocs/index.html', 1) // returns 1: '/www/htdocs' // example 2: pathinfo('/www/htdocs/index.html', 'PATHINFO_BASENAME') // returns 2: 'index.html' // example 3: pathinfo('/www/htdocs/index.html', 'PATHINFO_EXTENSION') // returns 3: 'html' // example 4: pathinfo('/www/htdocs/index.html', 'PATHINFO_FILENAME') // returns 4: 'index' // example 5: pathinfo('/www/htdocs/index.html', 2 | 4) // returns 5: &#123;basename: 'index.html', extension: 'html'&#125; // example 6: pathinfo('/www/htdocs/index.html', 'PATHINFO_ALL') // returns 6: &#123;dirname: '/www/htdocs', basename: 'index.html', extension: 'html', filename: 'index'&#125; // example 7: pathinfo('/www/htdocs/index.html') // returns 7: &#123;dirname: '/www/htdocs', basename: 'index.html', extension: 'html', filename: 'index'&#125; var basename = require('../filesystem/basename') var opt = '' var realOpt = '' var optName = '' var optTemp = 0 var tmpArr = &#123;&#125; var cnt = 0 var i = 0 var haveBasename = false var haveExtension = false var haveFilename = false // Input defaulting &amp; sanitation if (!path) &#123; return false &#125; if (!options) &#123; options = 'PATHINFO_ALL' &#125; // Initialize binary arguments. Both the string &amp; integer (constant) input is // allowed var OPTS = &#123; 'PATHINFO_DIRNAME': 1, 'PATHINFO_BASENAME': 2, 'PATHINFO_EXTENSION': 4, 'PATHINFO_FILENAME': 8, 'PATHINFO_ALL': 0 &#125; // PATHINFO_ALL sums up all previously defined PATHINFOs (could just pre-calculate) for (optName in OPTS) &#123; if (OPTS.hasOwnProperty(optName)) &#123; OPTS.PATHINFO_ALL = OPTS.PATHINFO_ALL | OPTS[optName] &#125; &#125; if (typeof options !== 'number') &#123; // Allow for a single string or an array of string flags options = [].concat(options) for (i = 0; i &lt; options.length; i++) &#123; // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4 if (OPTS[options[i]]) &#123; optTemp = optTemp | OPTS[options[i]] &#125; &#125; options = optTemp &#125; // Internal Functions var _getExt = function (path) &#123; var str = path + '' var dotP = str.lastIndexOf('.') + 1 return !dotP ? false : dotP !== str.length ? str.substr(dotP) : '' &#125; // Gather path infos if (options &amp; OPTS.PATHINFO_DIRNAME) &#123; var dirName = path .replace(/\\\\/g, '/') .replace(/\\/[^\\/]*\\/?$/, '') // dirname tmpArr.dirname = dirName === path ? '.' : dirName &#125; if (options &amp; OPTS.PATHINFO_BASENAME) &#123; if (haveBasename === false) &#123; haveBasename = basename(path) &#125; tmpArr.basename = haveBasename &#125; if (options &amp; OPTS.PATHINFO_EXTENSION) &#123; if (haveBasename === false) &#123; haveBasename = basename(path) &#125; if (haveExtension === false) &#123; haveExtension = _getExt(haveBasename) &#125; if (haveExtension !== false) &#123; tmpArr.extension = haveExtension &#125; &#125; if (options &amp; OPTS.PATHINFO_FILENAME) &#123; if (haveBasename === false) &#123; haveBasename = basename(path) &#125; if (haveExtension === false) &#123; haveExtension = _getExt(haveBasename) &#125; if (haveFilename === false) &#123; haveFilename = haveBasename.slice(0, haveBasename.length - (haveExtension ? haveExtension.length + 1 : haveExtension === false ? 0 : 1 ) ) &#125; tmpArr.filename = haveFilename &#125; // If array contains only 1 element: return string cnt = 0 for (opt in tmpArr) &#123; if (tmpArr.hasOwnProperty(opt)) &#123; cnt++ realOpt = opt &#125; &#125; if (cnt === 1) &#123; return tmpArr[realOpt] &#125; // Return full-blown array return tmpArr&#125;","raw":null,"content":null},{"title":"PHP's filesystem extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/filesystem/index.html","permalink":"http://locutus.io/php/filesystem/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's file_get_contents in JavaScript","date":"2016-05-11T20:27:49.870Z","updated":"2016-05-11T20:27:49.870Z","comments":true,"path":"php/filesystem/file_get_contents/index.html","permalink":"http://locutus.io/php/filesystem/file_get_contents/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122module.exports = function file_get_contents (url, flags, context, offset, maxLen) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/file_get_contents/ // original by: Legaev Andrey // input by: Jani Hartikainen // input by: Raphael (Ao) RUDLER // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Brett Zamir (http://brett-zamir.me) // reimplemented by: Kevin van Zonneveld (http://kvz.io) // note 1: This used to work in the browser via blocking ajax // note 1: requests in 1.3.2 and earlier // note 1: but then people started using that for real app, // note 1: so we deprecated this behavior, // note 1: so this function is now Node-only // example 1: var $buf = file_get_contents('test/never-change.txt') // example 1: var $result = $buf.indexOf('hash') !== -1 // returns 1: true var fs = require('fs') return fs.readFileSync(url, 'utf-8')&#125;","raw":null,"content":null},{"title":"PHP's dirname in JavaScript","date":"2016-05-11T20:27:49.870Z","updated":"2016-05-11T20:27:49.870Z","comments":true,"path":"php/filesystem/dirname/index.html","permalink":"http://locutus.io/php/filesystem/dirname/index.html","excerpt":"","keywords":null,"text":"1234567891011121314module.exports = function dirname (path) &#123; // discuss at: http://locutus.io/php/dirname/ // original by: Ozh // improved by: XoraX (http://www.xorax.info) // example 1: dirname('/etc/passwd') // returns 1: '/etc' // example 2: dirname('c:/Temp/x') // returns 2: 'c:/Temp' // example 3: dirname('/dir/test/') // returns 3: '/dir' return path.replace(/\\\\/g, '/') .replace(/\\/[^\\/]*\\/?$/, '')&#125;","raw":null,"content":null},{"title":"PHP's basename in JavaScript","date":"2016-05-11T20:27:49.866Z","updated":"2016-05-11T20:27:49.866Z","comments":true,"path":"php/filesystem/basename/index.html","permalink":"http://locutus.io/php/filesystem/basename/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031module.exports = function basename (path, suffix) &#123; // discuss at: http://locutus.io/php/basename/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Ash Searle (http://hexmen.com/blog/) // improved by: Lincoln Ramsay // improved by: djmix // improved by: Dmitry Gorelenkov // example 1: basename('/www/site/home.htm', '.htm') // returns 1: 'home' // example 2: basename('ecra.php?p=1') // returns 2: 'ecra.php?p=1' // example 3: basename('/some/path/') // returns 3: 'path' // example 4: basename('/some/path_ext.ext/','.ext') // returns 4: 'path_ext' var b = path var lastChar = b.charAt(b.length - 1) if (lastChar === '/' || lastChar === '\\\\') &#123; b = b.slice(0, -1) &#125; b = b.replace(/^.*[\\/\\\\]/g, '') if (typeof suffix === 'string' &amp;&amp; b.substr(b.length - suffix.length) === suffix) &#123; b = b.substr(0, b.length - suffix.length) &#125; return b&#125;","raw":null,"content":null},{"title":"PHP's exec extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/exec/index.html","permalink":"http://locutus.io/php/exec/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's escapeshellarg in JavaScript","date":"2016-05-11T20:27:49.866Z","updated":"2016-05-11T20:27:49.866Z","comments":true,"path":"php/exec/escapeshellarg/index.html","permalink":"http://locutus.io/php/exec/escapeshellarg/index.html","excerpt":"","keywords":null,"text":"123456789101112131415module.exports = function escapeshellarg (arg) &#123; // discuss at: http://locutus.io/php/escapeshellarg/ // original by: Felix Geisendoerfer (http://www.debuggable.com/felix) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: escapeshellarg(\"kevin's birthday\") // returns 1: \"'kevin\\\\'s birthday'\" var ret = '' ret = arg.replace(/[^\\\\]'/g, function (m, i, s) &#123; return m.slice(0, 1) + '\\\\\\'' &#125;) return \"'\" + ret + \"'\"&#125;","raw":null,"content":null},{"title":"PHP's time in JavaScript","date":"2016-05-11T20:27:49.866Z","updated":"2016-05-11T20:27:49.866Z","comments":true,"path":"php/datetime/time/index.html","permalink":"http://locutus.io/php/datetime/time/index.html","excerpt":"","keywords":null,"text":"123456789101112module.exports = function time () &#123; // discuss at: http://locutus.io/php/time/ // original by: GeekFG (http://geekfg.blogspot.com) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: metjay // improved by: HKM // example 1: var $timeStamp = time() // example 1: var $result = $timeStamp &gt; 1000000000 &amp;&amp; $timeStamp &lt; 2000000000 // returns 1: true return Math.floor(new Date().getTime() / 1000)&#125;","raw":null,"content":null},{"title":"PHP's strtotime in JavaScript","date":"2016-05-11T20:27:49.858Z","updated":"2016-05-11T20:27:49.858Z","comments":true,"path":"php/datetime/strtotime/index.html","permalink":"http://locutus.io/php/datetime/strtotime/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300module.exports = function strtotime (text, now) &#123; // discuss at: http://locutus.io/php/strtotime/ // original by: Caio Ariede (http://caioariede.com) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Caio Ariede (http://caioariede.com) // improved by: A. Mat√≠as Quezada (http://amatiasq.com) // improved by: preuter // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Mirko Faber // input by: David // bugfixed by: Wagner B. Soares // bugfixed by: Artur Tchernychev // bugfixed by: Stephan B√∂sch-Plepelits (http://github.com/plepe) // note 1: Examples all have a fixed timestamp to prevent // note 1: tests to fail because of variable time(zones) // example 1: strtotime('+1 day', 1129633200) // returns 1: 1129719600 // example 2: strtotime('+1 week 2 days 4 hours 2 seconds', 1129633200) // returns 2: 1130425202 // example 3: strtotime('last month', 1129633200) // returns 3: 1127041200 // example 4: strtotime('2009-05-04 08:30:00 GMT') // returns 4: 1241425800 // example 5: strtotime('2009-05-04 08:30:00+00') // returns 5: 1241425800 // example 6: strtotime('2009-05-04 08:30:00+02:00') // returns 6: 1241418600 // example 7: strtotime('2009-05-04T08:30:00Z') // returns 7: 1241425800 var parsed var match var today var year var date var days var ranges var len var times var regex var i var fail = false if (!text) &#123; return fail &#125; // Unecessary spaces text = text.replace(/^\\s+|\\s+$/g, '') .replace(/\\s&#123;2,&#125;/g, ' ') .replace(/[\\t\\r\\n]/g, '') .toLowerCase() // in contrast to php, js Date.parse function interprets: // dates given as yyyy-mm-dd as in timezone: UTC, // dates with \".\" or \"-\" as MDY instead of DMY // dates with two-digit years differently // etc...etc... // ...therefore we manually parse lots of common date formats var pattern = new RegExp([ '^(\\\\d&#123;1,4&#125;)', '([\\\\-\\\\.\\\\/:])', '(\\\\d&#123;1,2&#125;)', '([\\\\-\\\\.\\\\/:])', '(\\\\d&#123;1,4&#125;)', '(?:\\\\s(\\\\d&#123;1,2&#125;):(\\\\d&#123;2&#125;)?:?(\\\\d&#123;2&#125;)?)?', '(?:\\\\s([A-Z]+)?)?$' ].join('')) match = text.match(pattern) if (match &amp;&amp; match[2] === match[4]) &#123; if (match[1] &gt; 1901) &#123; switch (match[2]) &#123; case '-': // YYYY-M-D if (match[3] &gt; 12 || match[5] &gt; 31) &#123; return fail &#125; return new Date(match[1], parseInt(match[3], 10) - 1, match[5], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000 case '.': // YYYY.M.D is not parsed by strtotime() return fail case '/': // YYYY/M/D if (match[3] &gt; 12 || match[5] &gt; 31) &#123; return fail &#125; return new Date(match[1], parseInt(match[3], 10) - 1, match[5], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000 &#125; &#125; else if (match[5] &gt; 1901) &#123; switch (match[2]) &#123; case '-': // D-M-YYYY if (match[3] &gt; 12 || match[1] &gt; 31) &#123; return fail &#125; return new Date(match[5], parseInt(match[3], 10) - 1, match[1], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000 case '.': // D.M.YYYY if (match[3] &gt; 12 || match[1] &gt; 31) &#123; return fail &#125; return new Date(match[5], parseInt(match[3], 10) - 1, match[1], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000 case '/': // M/D/YYYY if (match[1] &gt; 12 || match[3] &gt; 31) &#123; return fail &#125; return new Date(match[5], parseInt(match[1], 10) - 1, match[3], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000 &#125; &#125; else &#123; switch (match[2]) &#123; case '-': // YY-M-D if (match[3] &gt; 12 || match[5] &gt; 31 || (match[1] &lt; 70 &amp;&amp; match[1] &gt; 38)) &#123; return fail &#125; year = match[1] &gt;= 0 &amp;&amp; match[1] &lt;= 38 ? +match[1] + 2000 : match[1] return new Date(year, parseInt(match[3], 10) - 1, match[5], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000 case '.': // D.M.YY or H.MM.SS if (match[5] &gt;= 70) &#123; // D.M.YY if (match[3] &gt; 12 || match[1] &gt; 31) &#123; return fail &#125; return new Date(match[5], parseInt(match[3], 10) - 1, match[1], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000 &#125; if (match[5] &lt; 60 &amp;&amp; !match[6]) &#123; // H.MM.SS if (match[1] &gt; 23 || match[3] &gt; 59) &#123; return fail &#125; today = new Date() return new Date(today.getFullYear(), today.getMonth(), today.getDate(), match[1] || 0, match[3] || 0, match[5] || 0, match[9] || 0) / 1000 &#125; // invalid format, cannot be parsed return fail case '/': // M/D/YY if (match[1] &gt; 12 || match[3] &gt; 31 || (match[5] &lt; 70 &amp;&amp; match[5] &gt; 38)) &#123; return fail &#125; year = match[5] &gt;= 0 &amp;&amp; match[5] &lt;= 38 ? +match[5] + 2000 : match[5] return new Date(year, parseInt(match[1], 10) - 1, match[3], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000 case ':': // HH:MM:SS if (match[1] &gt; 23 || match[3] &gt; 59 || match[5] &gt; 59) &#123; return fail &#125; today = new Date() return new Date(today.getFullYear(), today.getMonth(), today.getDate(), match[1] || 0, match[3] || 0, match[5] || 0) / 1000 &#125; &#125; &#125; // other formats and \"now\" should be parsed by Date.parse() if (text === 'now') &#123; return now === null || isNaN(now) ? new Date().getTime() / 1000 | 0 : now | 0 &#125; if (!isNaN(parsed = Date.parse(text))) &#123; return parsed / 1000 | 0 &#125; // Browsers !== Chrome have problems parsing ISO 8601 date strings, as they do // not accept lower case characters, space, or shortened time zones. // Therefore, fix these problems and try again. // Examples: // 2015-04-15 20:33:59+02 // 2015-04-15 20:33:59z // 2015-04-15t20:33:59+02:00 pattern = new RegExp([ '^([0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;)', '[ t]', '([0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;(\\\\.[0-9]+)?)', '([\\\\+-][0-9]&#123;2&#125;(:[0-9]&#123;2&#125;)?|z)' ].join('')) match = text.match(pattern) if (match) &#123; // @todo: time zone information if (match[4] === 'z') &#123; match[4] = 'Z' &#125; else if (match[4].match(/^([\\+-][0-9]&#123;2&#125;)$/)) &#123; match[4] = match[4] + ':00' &#125; if (!isNaN(parsed = Date.parse(match[1] + 'T' + match[2] + match[4]))) &#123; return parsed / 1000 | 0 &#125; &#125; date = now ? new Date(now * 1000) : new Date() days = &#123; 'sun': 0, 'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4, 'fri': 5, 'sat': 6 &#125; ranges = &#123; 'yea': 'FullYear', 'mon': 'Month', 'day': 'Date', 'hou': 'Hours', 'min': 'Minutes', 'sec': 'Seconds' &#125; function lastNext (type, range, modifier) &#123; var diff var day = days[range] if (typeof day !== 'undefined') &#123; diff = day - date.getDay() if (diff === 0) &#123; diff = 7 * modifier &#125; else if (diff &gt; 0 &amp;&amp; type === 'last') &#123; diff -= 7 &#125; else if (diff &lt; 0 &amp;&amp; type === 'next') &#123; diff += 7 &#125; date.setDate(date.getDate() + diff) &#125; &#125; function process (val) &#123; // @todo: Reconcile this with regex using \\s, taking into account // browser issues with split and regexes var splt = val.split(' ') var type = splt[0] var range = splt[1].substring(0, 3) var typeIsNumber = /\\d+/.test(type) var ago = splt[2] === 'ago' var num = (type === 'last' ? -1 : 1) * (ago ? -1 : 1) if (typeIsNumber) &#123; num *= parseInt(type, 10) &#125; if (ranges.hasOwnProperty(range) &amp;&amp; !splt[1].match(/^mon(day|\\.)?$/i)) &#123; return date['set' + ranges[range]](date['get' + ranges[range]]() + num) &#125; if (range === 'wee') &#123; return date.setDate(date.getDate() + (num * 7)) &#125; if (type === 'next' || type === 'last') &#123; lastNext(type, range, num) &#125; else if (!typeIsNumber) &#123; return false &#125; return true &#125; times = '(years?|months?|weeks?|days?|hours?|minutes?|min|seconds?|sec' + '|sunday|sun\\\\.?|monday|mon\\\\.?|tuesday|tue\\\\.?|wednesday|wed\\\\.?' + '|thursday|thu\\\\.?|friday|fri\\\\.?|saturday|sat\\\\.?)' regex = '([+-]?\\\\d+\\\\s' + times + '|' + '(last|next)\\\\s' + times + ')(\\\\sago)?' match = text.match(new RegExp(regex, 'gi')) if (!match) &#123; return fail &#125; for (i = 0, len = match.length; i &lt; len; i++) &#123; if (!process(match[i])) &#123; return fail &#125; &#125; return (date.getTime() / 1000)&#125;","raw":null,"content":null},{"title":"PHP's strptime in JavaScript","date":"2016-05-11T20:27:49.858Z","updated":"2016-05-11T20:27:49.858Z","comments":true,"path":"php/datetime/strptime/index.html","permalink":"http://locutus.io/php/datetime/strptime/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380module.exports = function strptime (dateStr, format) &#123; // discuss at: http://locutus.io/php/strptime/ // original by: Brett Zamir (http://brett-zamir.me) // original by: strftime // example 1: strptime('20091112222135', '%Y%m%d%H%M%S') // Return value will depend on date and locale // returns 1: &#123;tm_sec: 35, tm_min: 21, tm_hour: 22, tm_mday: 12, tm_mon: 10, tm_year: 109, tm_wday: 4, tm_yday: 315, unparsed: ''&#125; // example 2: strptime('2009extra', '%Y') // returns 2: &#123;tm_sec:0, tm_min:0, tm_hour:0, tm_mday:0, tm_mon:0, tm_year:109, tm_wday:3, tm_yday: -1, unparsed: 'extra'&#125; var setlocale = require('../strings/setlocale') var arrayMap = require('../array/array_map') var retObj = &#123; tm_sec: 0, tm_min: 0, tm_hour: 0, tm_mday: 0, tm_mon: 0, tm_year: 0, tm_wday: 0, tm_yday: 0, unparsed: '' &#125; var i = 0 var j = 0 var amPmOffset = 0 var prevHour = false var _reset = function (dateObj, realMday) &#123; // realMday is to allow for a value of 0 in return results (but without // messing up the Date() object) var jan1 var o = retObj var d = dateObj o.tm_sec = d.getUTCSeconds() o.tm_min = d.getUTCMinutes() o.tm_hour = d.getUTCHours() o.tm_mday = realMday === 0 ? realMday : d.getUTCDate() o.tm_mon = d.getUTCMonth() o.tm_year = d.getUTCFullYear() - 1900 o.tm_wday = realMday === 0 ? (d.getUTCDay() &gt; 0 ? d.getUTCDay() - 1 : 6) : d.getUTCDay() jan1 = new Date(Date.UTC(d.getUTCFullYear(), 0, 1)) o.tm_yday = Math.ceil((d - jan1) / (1000 * 60 * 60 * 24)) &#125; var _date = function () &#123; var o = retObj // We set date to at least 1 to ensure year or month doesn't go backwards return _reset(new Date(Date.UTC( o.tm_year + 1900, o.tm_mon, o.tm_mday || 1, o.tm_hour, o.tm_min, o.tm_sec )), o.tm_mday) &#125; var _NWS = /\\S/ var _WS = /\\s/ var _aggregates = &#123; c: 'locale', D: '%m/%d/%y', F: '%y-%m-%d', r: 'locale', R: '%H:%M', T: '%H:%M:%S', x: 'locale', X: 'locale' &#125; /* Fix: Locale alternatives are supported though not documented in PHP; see http://linux.die.net/man/3/strptime Ec EC Ex EX Ey EY Od or Oe OH OI Om OM OS OU Ow OW Oy */ var _pregQuote = function (str) &#123; return (str + '').replace(/([\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\&#123;\\&#125;=!&lt;&gt;\\|:])/g, '\\\\$1') &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var locale = $locutus.php.localeCategories.LC_TIME var lcTime = $locutus.php.locales[locale].LC_TIME // First replace aggregates (run in a loop because an agg may be made up of other aggs) while (format.match(/%[cDFhnrRtTxX]/)) &#123; format = format.replace(/%([cDFhnrRtTxX])/g, function (m0, m1) &#123; var f = _aggregates[m1] return (f === 'locale' ? lcTime[m1] : f) &#125;) &#125; var _addNext = function (j, regex, cb) &#123; if (typeof regex === 'string') &#123; regex = new RegExp('^' + regex, 'i') &#125; var check = dateStr.slice(j) var match = regex.exec(check) // Even if the callback returns null after assigning to the // return object, the object won't be saved anyways var testNull = match ? cb.apply(null, match) : null if (testNull === null) &#123; throw new Error('No match in string') &#125; return j + match[0].length &#125; var _addLocalized = function (j, formatChar, category) &#123; // Could make each parenthesized instead and pass index to callback: return _addNext(j, arrayMap(_pregQuote, lcTime[formatChar]).join('|'), function (m) &#123; var match = lcTime[formatChar].search(new RegExp('^' + _pregQuote(m) + '$', 'i')) if (match) &#123; retObj[category] = match[0] &#125; &#125;) &#125; // BEGIN PROCESSING CHARACTERS for (i = 0, j = 0; i &lt; format.length; i++) &#123; if (format.charAt(i) === '%') &#123; var literalPos = ['%', 'n', 't'].indexOf(format.charAt(i + 1)) if (literalPos !== -1) &#123; if (['%', '\\n', '\\t'].indexOf(dateStr.charAt(j)) === literalPos) &#123; // a matched literal ++i; // skip beyond ++j continue &#125; // Format indicated a percent literal, but not actually present return false &#125; var formatChar = format.charAt(i + 1) try &#123; switch (formatChar) &#123; case 'a': case 'A': // Sunday-Saturday // Changes nothing else j = _addLocalized(j, formatChar, 'tm_wday') break case 'h': case 'b': // Jan-Dec j = _addLocalized(j, 'b', 'tm_mon') // Also changes wday, yday _date() break case 'B': // January-December j = _addLocalized(j, formatChar, 'tm_mon') // Also changes wday, yday _date() break case 'C': // 0+; century (19 for 20th) // PHP docs say two-digit, but accepts one-digit (two-digit max): j = _addNext(j, /^\\d?\\d/, function (d) &#123; var year = (parseInt(d, 10) - 19) * 100 retObj.tm_year = year _date() if (!retObj.tm_yday) &#123; retObj.tm_yday = -1 &#125; // Also changes wday; and sets yday to -1 (always?) &#125;) break case 'd': case 'e': // 1-31 day j = _addNext(j, formatChar === 'd' ? /^(0[1-9]|[1-2]\\d|3[0-1])/ : /^([1-2]\\d|3[0-1]|[1-9])/, function (d) &#123; var dayMonth = parseInt(d, 10) retObj.tm_mday = dayMonth // Also changes w_day, y_day _date() &#125;) break case 'g': // No apparent effect; 2-digit year (see 'V') break case 'G': // No apparent effect; 4-digit year (see 'V')' break case 'H': // 00-23 hours j = _addNext(j, /^([0-1]\\d|2[0-3])/, function (d) &#123; var hour = parseInt(d, 10) retObj.tm_hour = hour // Changes nothing else &#125;) break case 'l': case 'I': // 01-12 hours j = _addNext(j, formatChar === 'l' ? /^([1-9]|1[0-2])/ : /^(0[1-9]|1[0-2])/, function (d) &#123; var hour = parseInt(d, 10) - 1 + amPmOffset retObj.tm_hour = hour // Used for coordinating with am-pm prevHour = true // Changes nothing else, but affected by prior 'p/P' &#125;) break case 'j': // 001-366 day of year j = _addNext(j, /^(00[1-9]|0[1-9]\\d|[1-2]\\d\\d|3[0-6][0-6])/, function (d) &#123; var dayYear = parseInt(d, 10) - 1 retObj.tm_yday = dayYear // Changes nothing else // (oddly, since if original by a given year, could calculate other fields) &#125;) break case 'm': // 01-12 month j = _addNext(j, /^(0[1-9]|1[0-2])/, function (d) &#123; var month = parseInt(d, 10) - 1 retObj.tm_mon = month // Also sets wday and yday _date() &#125;) break case 'M': // 00-59 minutes j = _addNext(j, /^[0-5]\\d/, function (d) &#123; var minute = parseInt(d, 10) retObj.tm_min = minute // Changes nothing else &#125;) break case 'P': // Seems not to work; AM-PM // Could make fall-through instead since supposed to be a synonym despite PHP docs return false case 'p': // am-pm j = _addNext(j, /^(am|pm)/i, function (d) &#123; // No effect on 'H' since already 24 hours but // works before or after setting of l/I hour amPmOffset = (/a/) .test(d) ? 0 : 12 if (prevHour) &#123; retObj.tm_hour += amPmOffset &#125; &#125;) break case 's': // Unix timestamp (in seconds) j = _addNext(j, /^\\d+/, function (d) &#123; var timestamp = parseInt(d, 10) var date = new Date(Date.UTC(timestamp * 1000)) _reset(date) // Affects all fields, but can't be negative (and initial + not allowed) &#125;) break case 'S': // 00-59 seconds j = _addNext(j, /^[0-5]\\d/, // strptime also accepts 60-61 for some reason function (d) &#123; var second = parseInt(d, 10) retObj.tm_sec = second // Changes nothing else &#125;) break case 'u': case 'w': // 0 (Sunday)-6(Saturday) j = _addNext(j, /^\\d/, function (d) &#123; retObj.tm_wday = d - (formatChar === 'u') // Changes nothing else apparently &#125;) break case 'U': case 'V': case 'W': // Apparently ignored (week of year, from 1st Monday) break case 'y': // 69 (or higher) for 1969+, 68 (or lower) for 2068- // PHP docs say two-digit, but accepts one-digit (two-digit max): j = _addNext(j, /^\\d?\\d/, function (d) &#123; d = parseInt(d, 10) var year = d &gt;= 69 ? d : d + 100 retObj.tm_year = year _date() if (!retObj.tm_yday) &#123; retObj.tm_yday = -1 &#125; // Also changes wday; and sets yday to -1 (always?) &#125;) break case 'Y': // 2010 (4-digit year) // PHP docs say four-digit, but accepts one-digit (four-digit max): j = _addNext(j, /^\\d&#123;1,4&#125;/, function (d) &#123; var year = (parseInt(d, 10)) - 1900 retObj.tm_year = year _date() if (!retObj.tm_yday) &#123; retObj.tm_yday = -1 &#125; // Also changes wday; and sets yday to -1 (always?) &#125;) break case 'z': // Timezone; on my system, strftime gives -0800, // but strptime seems not to alter hour setting break case 'Z': // Timezone; on my system, strftime gives PST, but strptime treats text as unparsed break default: throw new Error('Unrecognized formatting character in strptime()') &#125; &#125; catch (e) &#123; if (e === 'No match in string') &#123; // Allow us to exit // There was supposed to be a matching format but there wasn't return false &#125; // Calculate skipping beyond initial percent too &#125; ++i &#125; else if (format.charAt(i) !== dateStr.charAt(j)) &#123; // If extra whitespace at beginning or end of either, or between formats, no problem // (just a problem when between % and format specifier) // If the string has white-space, it is ok to ignore if (dateStr.charAt(j).search(_WS) !== -1) &#123; j++ // Let the next iteration try again with the same format character i-- &#125; else if (format.charAt(i).search(_NWS) !== -1) &#123; // Any extra formatting characters besides white-space causes // problems (do check after WS though, as may just be WS in string before next character) return false &#125; // Extra WS in format // Adjust strings when encounter non-matching whitespace, so they align in future checks above // Will check on next iteration (against same (non-WS) string character) &#125; else &#123; j++ &#125; &#125; // POST-PROCESSING // Will also get extra whitespace; empty string if none retObj.unparsed = dateStr.slice(j) return retObj&#125;","raw":null,"content":null},{"title":"PHP's strftime in JavaScript","date":"2016-05-11T20:27:49.858Z","updated":"2016-05-11T20:27:49.858Z","comments":true,"path":"php/datetime/strftime/index.html","permalink":"http://locutus.io/php/datetime/strftime/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197module.exports = function strftime (fmt, timestamp) &#123; // discuss at: http://locutus.io/php/strftime/ // original by: Blues (http://tech.bluesmoon.info/) // reimplemented by: Brett Zamir (http://brett-zamir.me) // input by: Alex // bugfixed by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: Uses global: locutus to store locale info // example 1: strftime(\"%A\", 1062462400); // Return value will depend on date and locale // returns 1: 'Tuesday' var setlocale = require('../strings/setlocale') var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var _xPad = function (x, pad, r) &#123; if (typeof r === 'undefined') &#123; r = 10 &#125; for (; parseInt(x, 10) &lt; r &amp;&amp; r &gt; 1; r /= 10) &#123; x = pad.toString() + x &#125; return x.toString() &#125; var locale = $locutus.php.localeCategories.LC_TIME var lcTime = $locutus.php.locales[locale].LC_TIME var _formats = &#123; a: function (d) &#123; return lcTime.a[d.getDay()] &#125;, A: function (d) &#123; return lcTime.A[d.getDay()] &#125;, b: function (d) &#123; return lcTime.b[d.getMonth()] &#125;, B: function (d) &#123; return lcTime.B[d.getMonth()] &#125;, C: function (d) &#123; return _xPad(parseInt(d.getFullYear() / 100, 10), 0) &#125;, d: ['getDate', '0'], e: ['getDate', ' '], g: function (d) &#123; return _xPad(parseInt(this.G(d) / 100, 10), 0) &#125;, G: function (d) &#123; var y = d.getFullYear() var V = parseInt(_formats.V(d), 10) var W = parseInt(_formats.W(d), 10) if (W &gt; V) &#123; y++ &#125; else if (W === 0 &amp;&amp; V &gt;= 52) &#123; y-- &#125; return y &#125;, H: ['getHours', '0'], I: function (d) &#123; var I = d.getHours() % 12 return _xPad(I === 0 ? 12 : I, 0) &#125;, j: function (d) &#123; var ms = d - new Date('' + d.getFullYear() + '/1/1 GMT') // Line differs from Yahoo implementation which would be // equivalent to replacing it here with: ms += d.getTimezoneOffset() * 60000 var doy = parseInt(ms / 60000 / 60 / 24, 10) + 1 return _xPad(doy, 0, 100) &#125;, k: ['getHours', '0'], // not in PHP, but implemented here (as in Yahoo) l: function (d) &#123; var l = d.getHours() % 12 return _xPad(l === 0 ? 12 : l, ' ') &#125;, m: function (d) &#123; return _xPad(d.getMonth() + 1, 0) &#125;, M: ['getMinutes', '0'], p: function (d) &#123; return lcTime.p[d.getHours() &gt;= 12 ? 1 : 0] &#125;, P: function (d) &#123; return lcTime.P[d.getHours() &gt;= 12 ? 1 : 0] &#125;, s: function (d) &#123; // Yahoo uses return parseInt(d.getTime()/1000, 10); return Date.parse(d) / 1000 &#125;, S: ['getSeconds', '0'], u: function (d) &#123; var dow = d.getDay() return ((dow === 0) ? 7 : dow) &#125;, U: function (d) &#123; var doy = parseInt(_formats.j(d), 10) var rdow = 6 - d.getDay() var woy = parseInt((doy + rdow) / 7, 10) return _xPad(woy, 0) &#125;, V: function (d) &#123; var woy = parseInt(_formats.W(d), 10) var dow11 = (new Date('' + d.getFullYear() + '/1/1')).getDay() // First week is 01 and not 00 as in the case of %U and %W, // so we add 1 to the final result except if day 1 of the year // is a Monday (then %W returns 01). // We also need to subtract 1 if the day 1 of the year is // Friday-Sunday, so the resulting equation becomes: var idow = woy + (dow11 &gt; 4 || dow11 &lt;= 1 ? 0 : 1) if (idow === 53 &amp;&amp; (new Date('' + d.getFullYear() + '/12/31')).getDay() &lt; 4) &#123; idow = 1 &#125; else if (idow === 0) &#123; idow = _formats.V(new Date('' + (d.getFullYear() - 1) + '/12/31')) &#125; return _xPad(idow, 0) &#125;, w: 'getDay', W: function (d) &#123; var doy = parseInt(_formats.j(d), 10) var rdow = 7 - _formats.u(d) var woy = parseInt((doy + rdow) / 7, 10) return _xPad(woy, 0, 10) &#125;, y: function (d) &#123; return _xPad(d.getFullYear() % 100, 0) &#125;, Y: 'getFullYear', z: function (d) &#123; var o = d.getTimezoneOffset() var H = _xPad(parseInt(Math.abs(o / 60), 10), 0) var M = _xPad(o % 60, 0) return (o &gt; 0 ? '-' : '+') + H + M &#125;, Z: function (d) &#123; return d.toString().replace(/^.*\\(([^)]+)\\)$/, '$1') &#125;, '%': function (d) &#123; return '%' &#125; &#125; var _date = (typeof timestamp === 'undefined') ? new Date() : (timestamp instanceof Date) ? new Date(timestamp) : new Date(timestamp * 1000) var _aggregates = &#123; c: 'locale', D: '%m/%d/%y', F: '%y-%m-%d', h: '%b', n: '\\n', r: 'locale', R: '%H:%M', t: '\\t', T: '%H:%M:%S', x: 'locale', X: 'locale' &#125; // First replace aggregates (run in a loop because an agg may be made up of other aggs) while (fmt.match(/%[cDFhnrRtTxX]/)) &#123; fmt = fmt.replace(/%([cDFhnrRtTxX])/g, function (m0, m1) &#123; var f = _aggregates[m1] return (f === 'locale' ? lcTime[m1] : f) &#125;) &#125; // Now replace formats - we need a closure so that the date object gets passed through var str = fmt.replace(/%([aAbBCdegGHIjklmMpPsSuUVwWyYzZ%])/g, function (m0, m1) &#123; var f = _formats[m1] if (typeof f === 'string') &#123; return _date[f]() &#125; else if (typeof f === 'function') &#123; return f(_date) &#125; else if (typeof f === 'object' &amp;&amp; typeof f[0] === 'string') &#123; return _xPad(_date[f[0]](), f[1]) &#125; else &#123; // Shouldn't reach here return m1 &#125; &#125;) return str&#125;","raw":null,"content":null},{"title":"PHP's mktime in JavaScript","date":"2016-05-11T20:27:49.858Z","updated":"2016-05-11T20:27:49.858Z","comments":true,"path":"php/datetime/mktime/index.html","permalink":"http://locutus.io/php/datetime/mktime/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172module.exports = function mktime () &#123; // discuss at: http://locutus.io/php/mktime/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: baris ozdil // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: FGFEmperor // improved by: Brett Zamir (http://brett-zamir.me) // input by: gabriel paderni // input by: Yannoo // input by: jakes // input by: 3D-GRAF // input by: Chris // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Marc Palau // bugfixed by: Brett Zamir (http://brett-zamir.me) // revised by: Theriault (https://github.com/Theriault) // note 1: The return values of the following examples are // note 1: received only if your system's timezone is UTC. // example 1: mktime(14, 10, 2, 2, 1, 2008) // returns 1: 1201875002 // example 2: mktime(0, 0, 0, 0, 1, 2008) // returns 2: 1196467200 // example 3: var $make = mktime() // example 3: var $td = new Date() // example 3: var $real = Math.floor($td.getTime() / 1000) // example 3: var $diff = ($real - $make) // example 3: $diff &lt; 5 // returns 3: true // example 4: mktime(0, 0, 0, 13, 1, 1997) // returns 4: 883612800 // example 5: mktime(0, 0, 0, 1, 1, 1998) // returns 5: 883612800 // example 6: mktime(0, 0, 0, 1, 1, 98) // returns 6: 883612800 // example 7: mktime(23, 59, 59, 13, 0, 2010) // returns 7: 1293839999 // example 8: mktime(0, 0, -1, 1, 1, 1970) // returns 8: -1 var d = new Date() var r = arguments var i = 0 var e = ['Hours', 'Minutes', 'Seconds', 'Month', 'Date', 'FullYear'] for (i = 0; i &lt; e.length; i++) &#123; if (typeof r[i] === 'undefined') &#123; r[i] = d['get' + e[i]]() // +1 to fix JS months. r[i] += (i === 3) &#125; else &#123; r[i] = parseInt(r[i], 10) if (isNaN(r[i])) &#123; return false &#125; &#125; &#125; // Map years 0-69 to 2000-2069 and years 70-100 to 1970-2000. r[5] += (r[5] &gt;= 0 ? (r[5] &lt;= 69 ? 2e3 : (r[5] &lt;= 100 ? 1900 : 0)) : 0) // Set year, month (-1 to fix JS months), and date. // !This must come before the call to setHours! d.setFullYear(r[5], r[3] - 1, r[4]) // Set hours, minutes, and seconds. d.setHours(r[0], r[1], r[2]) // Divide milliseconds by 1000 to return seconds and drop decimal. // Add 1 second if negative or it'll be off from PHP by 1 second. return (d.getTime() / 1e3 &gt;&gt; 0) - (d.getTime() &lt; 0)&#125;","raw":null,"content":null},{"title":"PHP's microtime in JavaScript","date":"2016-05-11T20:27:49.858Z","updated":"2016-05-11T20:27:49.858Z","comments":true,"path":"php/datetime/microtime/index.html","permalink":"http://locutus.io/php/datetime/microtime/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334module.exports = function microtime (getAsFloat) &#123; // discuss at: http://locutus.io/php/microtime/ // original by: Paulo Freitas // improved by: Dumitru Uzun (http://duzun.me) // example 1: var $timeStamp = microtime(true) // example 1: $timeStamp &gt; 1000000000 &amp;&amp; $timeStamp &lt; 2000000000 // returns 1: true // example 2: /^0\\.[0-9]&#123;1,6&#125; [0-9]&#123;10,10&#125;$/.test(microtime()) // returns 2: true var s var now if (typeof performance !== 'undefined' &amp;&amp; performance.now) &#123; now = (performance.now() + performance.timing.navigationStart) / 1e3 if (getAsFloat) &#123; return now &#125; // Math.round(now) s = now | 0 return (Math.round((now - s) * 1e6) / 1e6) + ' ' + s &#125; else &#123; now = (Date.now ? Date.now() : new Date().getTime()) / 1e3 if (getAsFloat) &#123; return now &#125; // Math.round(now) s = now | 0 return (Math.round((now - s) * 1e3) / 1e3) + ' ' + s &#125;&#125;","raw":null,"content":null},{"title":"PHP's datetime extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/datetime/index.html","permalink":"http://locutus.io/php/datetime/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's idate in JavaScript","date":"2016-05-11T20:27:49.858Z","updated":"2016-05-11T20:27:49.858Z","comments":true,"path":"php/datetime/idate/index.html","permalink":"http://locutus.io/php/datetime/idate/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182module.exports = function idate (format, timestamp) &#123; // discuss at: http://locutus.io/php/idate/ // original by: Brett Zamir (http://brett-zamir.me) // original by: date // original by: gettimeofday // input by: Alex // bugfixed by: Brett Zamir (http://brett-zamir.me) // improved by: Theriault (https://github.com/Theriault) // example 1: idate('y', 1255633200) // returns 1: 9 if (format === undefined) &#123; throw new Error('idate() expects at least 1 parameter, 0 given') &#125; if (!format.length || format.length &gt; 1) &#123; throw new Error('idate format is one char') &#125; // @todo: Need to allow date_default_timezone_set() (check for $locutus.default_timezone and use) var _date = (typeof timestamp === 'undefined') ? new Date() : (timestamp instanceof Date) ? new Date(timestamp) : new Date(timestamp * 1000) var a switch (format) &#123; case 'B': return Math.floor(( (_date.getUTCHours() * 36e2) + (_date.getUTCMinutes() * 60) + _date.getUTCSeconds() + 36e2 ) / 86.4) % 1e3 case 'd': return _date.getDate() case 'h': return _date.getHours() % 12 || 12 case 'H': return _date.getHours() case 'i': return _date.getMinutes() case 'I': // capital 'i' // Logic original by getimeofday(). // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC. // If they are not equal, then DST is observed. a = _date.getFullYear() return 0 + (((new Date(a, 0)) - Date.UTC(a, 0)) !== ((new Date(a, 6)) - Date.UTC(a, 6))) case 'L': a = _date.getFullYear() return (!(a &amp; 3) &amp;&amp; (a % 1e2 || !(a % 4e2))) ? 1 : 0 case 'm': return _date.getMonth() + 1 case 's': return _date.getSeconds() case 't': return (new Date(_date.getFullYear(), _date.getMonth() + 1, 0)) .getDate() case 'U': return Math.round(_date.getTime() / 1000) case 'w': return _date.getDay() case 'W': a = new Date( _date.getFullYear(), _date.getMonth(), _date.getDate() - (_date.getDay() || 7) + 3 ) return 1 + Math.round((a - (new Date(a.getFullYear(), 0, 4))) / 864e5 / 7) case 'y': return parseInt((_date.getFullYear() + '') .slice(2), 10) // This function returns an integer, unlike _date() case 'Y': return _date.getFullYear() case 'z': return Math.floor((_date - new Date(_date.getFullYear(), 0, 1)) / 864e5) case 'Z': return -_date.getTimezoneOffset() * 60 default: throw new Error('Unrecognized _date format token') &#125;&#125;","raw":null,"content":null},{"title":"PHP's gmstrftime in JavaScript","date":"2016-05-11T20:27:49.858Z","updated":"2016-05-11T20:27:49.858Z","comments":true,"path":"php/datetime/gmstrftime/index.html","permalink":"http://locutus.io/php/datetime/gmstrftime/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function gmstrftime (format, timestamp) &#123; // discuss at: http://locutus.io/php/gmstrftime/ // original by: Brett Zamir (http://brett-zamir.me) // input by: Alex // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: gmstrftime(\"%A\", 1062462400) // returns 1: 'Tuesday' var strftime = require('../datetime/strftime') var _date = (typeof timestamp === 'undefined') ? new Date() : (timestamp instanceof Date) ? new Date(timestamp) : new Date(timestamp * 1000) timestamp = Date.parse(_date.toUTCString().slice(0, -4)) / 1000 return strftime(format, timestamp)&#125;","raw":null,"content":null},{"title":"PHP's gmmktime in JavaScript","date":"2016-05-11T20:27:49.850Z","updated":"2016-05-11T20:27:49.850Z","comments":true,"path":"php/datetime/gmmktime/index.html","permalink":"http://locutus.io/php/datetime/gmmktime/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041module.exports = function gmmktime () &#123; // discuss at: http://locutus.io/php/gmmktime/ // original by: Brett Zamir (http://brett-zamir.me) // original by: mktime // example 1: gmmktime(14, 10, 2, 2, 1, 2008) // returns 1: 1201875002 // example 2: gmmktime(0, 0, -1, 1, 1, 1970) // returns 2: -1 var d = new Date() var r = arguments var i = 0 var e = ['Hours', 'Minutes', 'Seconds', 'Month', 'Date', 'FullYear'] for (i = 0; i &lt; e.length; i++) &#123; if (typeof r[i] === 'undefined') &#123; r[i] = d['getUTC' + e[i]]() // +1 to fix JS months. r[i] += (i === 3) &#125; else &#123; r[i] = parseInt(r[i], 10) if (isNaN(r[i])) &#123; return false &#125; &#125; &#125; // Map years 0-69 to 2000-2069 and years 70-100 to 1970-2000. r[5] += (r[5] &gt;= 0 ? (r[5] &lt;= 69 ? 2e3 : (r[5] &lt;= 100 ? 1900 : 0)) : 0) // Set year, month (-1 to fix JS months), and date. // !This must come before the call to setHours! d.setUTCFullYear(r[5], r[3] - 1, r[4]) // Set hours, minutes, and seconds. d.setUTCHours(r[0], r[1], r[2]) // Divide milliseconds by 1000 to return seconds and drop decimal. // Add 1 second if negative or it'll be off from PHP by 1 second. return (d.getTime() / 1e3 &gt;&gt; 0) - (d.getTime() &lt; 0)&#125;","raw":null,"content":null},{"title":"PHP's gmdate in JavaScript","date":"2016-05-11T20:27:49.842Z","updated":"2016-05-11T20:27:49.842Z","comments":true,"path":"php/datetime/gmdate/index.html","permalink":"http://locutus.io/php/datetime/gmdate/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718module.exports = function gmdate (format, timestamp) &#123; // discuss at: http://locutus.io/php/gmdate/ // original by: Brett Zamir (http://brett-zamir.me) // input by: Alex // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: gmdate('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400); // Return will depend on your timezone // returns 1: '07:09:40 m is month' var date = require('../datetime/date') var dt = typeof timestamp === 'undefined' ? new Date() // Not provided : timestamp instanceof Date ? new Date(timestamp) // Javascript Date() : new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int) timestamp = Date.parse(dt.toUTCString().slice(0, -4)) / 1000 return date(format, timestamp)&#125;","raw":null,"content":null},{"title":"PHP's gettimeofday in JavaScript","date":"2016-05-11T20:27:49.842Z","updated":"2016-05-11T20:27:49.842Z","comments":true,"path":"php/datetime/gettimeofday/index.html","permalink":"http://locutus.io/php/datetime/gettimeofday/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function gettimeofday (returnFloat) &#123; // discuss at: http://locutus.io/php/gettimeofday/ // original by: Brett Zamir (http://brett-zamir.me) // original by: Josh Fraser (http://onlineaspect.com/2007/06/08/auto-detect-a-time-zone-with-javascript/) // parts by: Breaking Par Consulting Inc (http://www.breakingpar.com/bkp/home.nsf/0/87256B280015193F87256CFB006C45F7) // revised by: Theriault (https://github.com/Theriault) // example 1: var $obj = gettimeofday() // example 1: var $result = ('sec' in $obj &amp;&amp; 'usec' in $obj &amp;&amp; 'minuteswest' in $obj &amp;&amp;80, 'dsttime' in $obj) // returns 1: true // example 2: var $timeStamp = gettimeofday(true) // example 2: var $result = $timeStamp &gt; 1000000000 &amp;&amp; $timeStamp &lt; 2000000000 // returns 2: true var t = new Date() var y = 0 if (returnFloat) &#123; return t.getTime() / 1000 &#125; // Store current year. y = t.getFullYear() return &#123; sec: t.getUTCSeconds(), usec: t.getUTCMilliseconds() * 1000, minuteswest: t.getTimezoneOffset(), // Compare Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC to see if DST is observed. dsttime: 0 + (((new Date(y, 0)) - Date.UTC(y, 0)) !== ((new Date(y, 6)) - Date.UTC(y, 6))) &#125;&#125;","raw":null,"content":null},{"title":"PHP's getdate in JavaScript","date":"2016-05-11T20:27:49.842Z","updated":"2016-05-11T20:27:49.842Z","comments":true,"path":"php/datetime/getdate/index.html","permalink":"http://locutus.io/php/datetime/getdate/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354module.exports = function getdate (timestamp) &#123; // discuss at: http://locutus.io/php/getdate/ // original by: Paulo Freitas // input by: Alex // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: getdate(1055901520) // returns 1: &#123;'seconds': 40, 'minutes': 58, 'hours': 1, 'mday': 18, 'wday': 3, 'mon': 6, 'year': 2003, 'yday': 168, 'weekday': 'Wednesday', 'month': 'June', '0': 1055901520&#125; var _w = [ 'Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur' ] var _m = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ] var d = ((typeof timestamp === 'undefined') ? new Date() : (timestamp instanceof Date) ? new Date(timestamp) // Not provided : new Date(timestamp * 1000) // Javascript Date() // UNIX timestamp (auto-convert to int) ) var w = d.getDay() var m = d.getMonth() var y = d.getFullYear() var r = &#123;&#125; r.seconds = d.getSeconds() r.minutes = d.getMinutes() r.hours = d.getHours() r.mday = d.getDate() r.wday = w r.mon = m + 1 r.year = y r.yday = Math.floor((d - (new Date(y, 0, 1))) / 86400000) r.weekday = _w[w] + 'day' r.month = _m[m] r['0'] = parseInt(d.getTime() / 1000, 10) return r&#125;","raw":null,"content":null},{"title":"PHP's date_parse in JavaScript","date":"2016-05-11T20:27:49.842Z","updated":"2016-05-11T20:27:49.842Z","comments":true,"path":"php/datetime/date_parse/index.html","permalink":"http://locutus.io/php/datetime/date_parse/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132module.exports = function date_parse (date) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/date_parse/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: date_parse('2006-12-12 10:00:00') // returns 1: &#123;year : 2006, month: 12, day: 12, hour: 10, minute: 0, second: 0, fraction: 0, is_localtime: false&#125; var strtotime = require('../datetime/strtotime') var ts try &#123; ts = strtotime(date) &#125; finally &#123; if (!ts) &#123; return false &#125; &#125; var dt = new Date(ts * 1000) var retObj = &#123;&#125; retObj.year = dt.getFullYear() retObj.month = dt.getMonth() + 1 retObj.day = dt.getDate() retObj.hour = dt.getHours() retObj.minute = dt.getMinutes() retObj.second = dt.getSeconds() retObj.fraction = parseFloat('0.' + dt.getMilliseconds()) retObj.is_localtime = dt.getTimezoneOffset() !== 0 return retObj&#125;","raw":null,"content":null},{"title":"PHP's date in JavaScript","date":"2016-05-11T20:27:49.842Z","updated":"2016-05-11T20:27:49.842Z","comments":true,"path":"php/datetime/date/index.html","permalink":"http://locutus.io/php/datetime/date/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325module.exports = function date (format, timestamp) &#123; // discuss at: http://locutus.io/php/date/ // original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com) // original by: gettimeofday // parts by: Peter-Paul Koch (http://www.quirksmode.org/js/beat.html) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: MeEtc (http://yass.meetcweb.com) // improved by: Brad Touesnard // improved by: Tim Wiel // improved by: Bryan Elliott // improved by: David Randall // improved by: Theriault (https://github.com/Theriault) // improved by: Theriault (https://github.com/Theriault) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Theriault (https://github.com/Theriault) // improved by: Thomas Beaucourt (http://www.webapp.fr) // improved by: JT // improved by: Theriault (https://github.com/Theriault) // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl) // improved by: Theriault (https://github.com/Theriault) // input by: Brett Zamir (http://brett-zamir.me) // input by: majak // input by: Alex // input by: Martin // input by: Alex Wilson // input by: Haravikk // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: majak // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // bugfixed by: omid (http://locutus.io/php/380:380#comment_137122) // bugfixed by: Chris (http://www.devotis.nl/) // note 1: Uses global: locutus to store the default timezone // note 1: Although the function potentially allows timezone info // note 1: (see notes), it currently does not set // note 1: per a timezone specified by date_default_timezone_set(). Implementers might use // note 1: $locutus.currentTimezoneOffset and // note 1: $locutus.currentTimezoneDST set by that function // note 1: in order to adjust the dates in this function // note 1: (or our other date functions!) accordingly // example 1: date('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400) // returns 1: '07:09:40 m is month' // example 2: date('F j, Y, g:i a', 1062462400) // returns 2: 'September 2, 2003, 12:26 am' // example 3: date('Y W o', 1062462400) // returns 3: '2003 36 2003' // example 4: var $x = date('Y m d', (new Date()).getTime() / 1000) // example 4: $x = $x + '' // example 4: var $result = $x.length // 2009 01 09 // returns 4: 10 // example 5: date('W', 1104534000) // returns 5: '52' // example 6: date('B t', 1104534000) // returns 6: '999 31' // example 7: date('W U', 1293750000.82); // 2010-12-31 // returns 7: '52 1293750000' // example 8: date('W', 1293836400); // 2011-01-01 // returns 8: '52' // example 9: date('W Y-m-d', 1293974054); // 2011-01-02 // returns 9: '52 2011-01-02' // test: skip-1 skip-2 skip-5 var jsdate, f // Keep this here (works, but for code commented-out below for file size reasons) // var tal= []; var txtWords = [ 'Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ] // trailing backslash -&gt; (dropped) // a backslash followed by any character (including backslash) -&gt; the character // empty string -&gt; empty string var formatChr = /\\\\?(.?)/gi var formatChrCb = function (t, s) &#123; return f[t] ? f[t]() : s &#125; var _pad = function (n, c) &#123; n = String(n) while (n.length &lt; c) &#123; n = '0' + n &#125; return n &#125; f = &#123; // Day d: function () &#123; // Day of month w/leading 0; 01..31 return _pad(f.j(), 2) &#125;, D: function () &#123; // Shorthand day name; Mon...Sun return f.l() .slice(0, 3) &#125;, j: function () &#123; // Day of month; 1..31 return jsdate.getDate() &#125;, l: function () &#123; // Full day name; Monday...Sunday return txtWords[f.w()] + 'day' &#125;, N: function () &#123; // ISO-8601 day of week; 1[Mon]..7[Sun] return f.w() || 7 &#125;, S: function () &#123; // Ordinal suffix for day of month; st, nd, rd, th var j = f.j() var i = j % 10 if (i &lt;= 3 &amp;&amp; parseInt((j % 100) / 10, 10) === 1) &#123; i = 0 &#125; return ['st', 'nd', 'rd'][i - 1] || 'th' &#125;, w: function () &#123; // Day of week; 0[Sun]..6[Sat] return jsdate.getDay() &#125;, z: function () &#123; // Day of year; 0..365 var a = new Date(f.Y(), f.n() - 1, f.j()) var b = new Date(f.Y(), 0, 1) return Math.round((a - b) / 864e5) &#125;, // Week W: function () &#123; // ISO-8601 week number var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3) var b = new Date(a.getFullYear(), 0, 4) return _pad(1 + Math.round((a - b) / 864e5 / 7), 2) &#125;, // Month F: function () &#123; // Full month name; January...December return txtWords[6 + f.n()] &#125;, m: function () &#123; // Month w/leading 0; 01...12 return _pad(f.n(), 2) &#125;, M: function () &#123; // Shorthand month name; Jan...Dec return f.F() .slice(0, 3) &#125;, n: function () &#123; // Month; 1...12 return jsdate.getMonth() + 1 &#125;, t: function () &#123; // Days in month; 28...31 return (new Date(f.Y(), f.n(), 0)) .getDate() &#125;, // Year L: function () &#123; // Is leap year?; 0 or 1 var j = f.Y() return j % 4 === 0 &amp; j % 100 !== 0 | j % 400 === 0 &#125;, o: function () &#123; // ISO-8601 year var n = f.n() var W = f.W() var Y = f.Y() return Y + (n === 12 &amp;&amp; W &lt; 9 ? 1 : n === 1 &amp;&amp; W &gt; 9 ? -1 : 0) &#125;, Y: function () &#123; // Full year; e.g. 1980...2010 return jsdate.getFullYear() &#125;, y: function () &#123; // Last two digits of year; 00...99 return f.Y() .toString() .slice(-2) &#125;, // Time a: function () &#123; // am or pm return jsdate.getHours() &gt; 11 ? 'pm' : 'am' &#125;, A: function () &#123; // AM or PM return f.a() .toUpperCase() &#125;, B: function () &#123; // Swatch Internet time; 000..999 var H = jsdate.getUTCHours() * 36e2 // Hours var i = jsdate.getUTCMinutes() * 60 // Minutes // Seconds var s = jsdate.getUTCSeconds() return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3) &#125;, g: function () &#123; // 12-Hours; 1..12 return f.G() % 12 || 12 &#125;, G: function () &#123; // 24-Hours; 0..23 return jsdate.getHours() &#125;, h: function () &#123; // 12-Hours w/leading 0; 01..12 return _pad(f.g(), 2) &#125;, H: function () &#123; // 24-Hours w/leading 0; 00..23 return _pad(f.G(), 2) &#125;, i: function () &#123; // Minutes w/leading 0; 00..59 return _pad(jsdate.getMinutes(), 2) &#125;, s: function () &#123; // Seconds w/leading 0; 00..59 return _pad(jsdate.getSeconds(), 2) &#125;, u: function () &#123; // Microseconds; 000000-999000 return _pad(jsdate.getMilliseconds() * 1000, 6) &#125;, // Timezone e: function () &#123; // Timezone identifier; e.g. Atlantic/Azores, ... // The following works, but requires inclusion of the very large // timezone_abbreviations_list() function. /* return that.date_default_timezone_get(); */ var msg = 'Not supported (see source code of date() for timezone on how to add support)' throw new Error(msg) &#125;, I: function () &#123; // DST observed?; 0 or 1 // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC. // If they are not equal, then DST is observed. var a = new Date(f.Y(), 0) // Jan 1 var c = Date.UTC(f.Y(), 0) // Jan 1 UTC var b = new Date(f.Y(), 6) // Jul 1 // Jul 1 UTC var d = Date.UTC(f.Y(), 6) return ((a - c) !== (b - d)) ? 1 : 0 &#125;, O: function () &#123; // Difference to GMT in hour format; e.g. +0200 var tzo = jsdate.getTimezoneOffset() var a = Math.abs(tzo) return (tzo &gt; 0 ? '-' : '+') + _pad(Math.floor(a / 60) * 100 + a % 60, 4) &#125;, P: function () &#123; // Difference to GMT w/colon; e.g. +02:00 var O = f.O() return (O.substr(0, 3) + ':' + O.substr(3, 2)) &#125;, T: function () &#123; // The following works, but requires inclusion of the very // large timezone_abbreviations_list() function. /* var abbr, i, os, _default; if (!tal.length) &#123; tal = that.timezone_abbreviations_list(); &#125; if ($locutus &amp;&amp; $locutus.default_timezone) &#123; _default = $locutus.default_timezone; for (abbr in tal) &#123; for (i = 0; i &lt; tal[abbr].length; i++) &#123; if (tal[abbr][i].timezone_id === _default) &#123; return abbr.toUpperCase(); &#125; &#125; &#125; &#125; for (abbr in tal) &#123; for (i = 0; i &lt; tal[abbr].length; i++) &#123; os = -jsdate.getTimezoneOffset() * 60; if (tal[abbr][i].offset === os) &#123; return abbr.toUpperCase(); &#125; &#125; &#125; */ return 'UTC' &#125;, Z: function () &#123; // Timezone offset in seconds (-43200...50400) return -jsdate.getTimezoneOffset() * 60 &#125;, // Full Date/Time c: function () &#123; // ISO-8601 date. return 'Y-m-d\\\\TH:i:sP'.replace(formatChr, formatChrCb) &#125;, r: function () &#123; // RFC 2822 return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb) &#125;, U: function () &#123; // Seconds since UNIX epoch return jsdate / 1000 | 0 &#125; &#125; var _date = function (format, timestamp) &#123; jsdate = (timestamp === undefined ? new Date() // Not provided : (timestamp instanceof Date) ? new Date(timestamp) // JS Date() : new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int) ) return format.replace(formatChr, formatChrCb) &#125; return _date(format, timestamp)&#125;","raw":null,"content":null},{"title":"PHP's checkdate in JavaScript","date":"2016-05-11T20:27:49.842Z","updated":"2016-05-11T20:27:49.842Z","comments":true,"path":"php/datetime/checkdate/index.html","permalink":"http://locutus.io/php/datetime/checkdate/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function checkdate (m, d, y) &#123; // discuss at: http://locutus.io/php/checkdate/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Pyerre // improved by: Theriault (https://github.com/Theriault) // example 1: checkdate(12, 31, 2000) // returns 1: true // example 2: checkdate(2, 29, 2001) // returns 2: false // example 3: checkdate(3, 31, 2008) // returns 3: true // example 4: checkdate(1, 390, 2000) // returns 4: false return m &gt; 0 &amp;&amp; m &lt; 13 &amp;&amp; y &gt; 0 &amp;&amp; y &lt; 32768 &amp;&amp; d &gt; 0 &amp;&amp; d &lt;= (new Date(y, m, 0)) .getDate()&#125;","raw":null,"content":null},{"title":"PHP's ctype extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/ctype/index.html","permalink":"http://locutus.io/php/ctype/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's ctype_xdigit in JavaScript","date":"2016-05-11T20:27:49.842Z","updated":"2016-05-11T20:27:49.842Z","comments":true,"path":"php/ctype/ctype_xdigit/index.html","permalink":"http://locutus.io/php/ctype/ctype_xdigit/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function ctype_xdigit (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_xdigit/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_xdigit('01dF') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.xd) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_upper in JavaScript","date":"2016-05-11T20:27:49.838Z","updated":"2016-05-11T20:27:49.838Z","comments":true,"path":"php/ctype/ctype_upper/index.html","permalink":"http://locutus.io/php/ctype/ctype_upper/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function ctype_upper (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_upper/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_upper('AZ') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.up) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_space in JavaScript","date":"2016-05-11T20:27:49.834Z","updated":"2016-05-11T20:27:49.834Z","comments":true,"path":"php/ctype/ctype_space/index.html","permalink":"http://locutus.io/php/ctype/ctype_space/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function ctype_space (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_space/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_space('\\t\\n') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.sp) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_punct in JavaScript","date":"2016-05-11T20:27:49.834Z","updated":"2016-05-11T20:27:49.834Z","comments":true,"path":"php/ctype/ctype_punct/index.html","permalink":"http://locutus.io/php/ctype/ctype_punct/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function ctype_punct (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_punct/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_punct('!?') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.pu) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_print in JavaScript","date":"2016-05-11T20:27:49.834Z","updated":"2016-05-11T20:27:49.834Z","comments":true,"path":"php/ctype/ctype_print/index.html","permalink":"http://locutus.io/php/ctype/ctype_print/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function ctype_print (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_print/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_print('AbC!#12') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.pr) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_lower in JavaScript","date":"2016-05-11T20:27:49.834Z","updated":"2016-05-11T20:27:49.834Z","comments":true,"path":"php/ctype/ctype_lower/index.html","permalink":"http://locutus.io/php/ctype/ctype_lower/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function ctype_lower (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_lower/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_lower('abc') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.lw) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_graph in JavaScript","date":"2016-05-11T20:27:49.834Z","updated":"2016-05-11T20:27:49.834Z","comments":true,"path":"php/ctype/ctype_graph/index.html","permalink":"http://locutus.io/php/ctype/ctype_graph/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122module.exports = function ctype_graph (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_graph/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_graph('!%') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.gr) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_digit in JavaScript","date":"2016-05-11T20:27:49.830Z","updated":"2016-05-11T20:27:49.830Z","comments":true,"path":"php/ctype/ctype_digit/index.html","permalink":"http://locutus.io/php/ctype/ctype_digit/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function ctype_digit (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_digit/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_digit('150') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.dg) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_cntrl in JavaScript","date":"2016-05-11T20:27:49.830Z","updated":"2016-05-11T20:27:49.830Z","comments":true,"path":"php/ctype/ctype_cntrl/index.html","permalink":"http://locutus.io/php/ctype/ctype_cntrl/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122module.exports = function ctype_cntrl (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_cntrl/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_cntrl('\\u0020') // returns 1: false // example 2: ctype_cntrl('\\u001F') // returns 2: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.ct) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_alpha in JavaScript","date":"2016-05-11T20:27:49.830Z","updated":"2016-05-11T20:27:49.830Z","comments":true,"path":"php/ctype/ctype_alpha/index.html","permalink":"http://locutus.io/php/ctype/ctype_alpha/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function ctype_alpha (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_alpha/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_alpha('Az') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.al) !== -1&#125;","raw":null,"content":null},{"title":"PHP's ctype_alnum in JavaScript","date":"2016-05-11T20:27:49.826Z","updated":"2016-05-11T20:27:49.826Z","comments":true,"path":"php/ctype/ctype_alnum/index.html","permalink":"http://locutus.io/php/ctype/ctype_alnum/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021module.exports = function ctype_alnum (text) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/ctype_alnum/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: ctype_alnum('AbC12') // returns 1: true var setlocale = require('../strings/setlocale') if (typeof text !== 'string') &#123; return false &#125; // ensure setup of localization variables takes place setlocale('LC_ALL', 0) var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus var p = $locutus.php return text.search(p.locales[p.localeCategories.LC_CTYPE].LC_CTYPE.an) !== -1&#125;","raw":null,"content":null},{"title":"PHP's bc extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/bc/index.html","permalink":"http://locutus.io/php/bc/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's bcsub in JavaScript","date":"2016-05-11T20:27:49.826Z","updated":"2016-05-11T20:27:49.826Z","comments":true,"path":"php/bc/bcsub/index.html","permalink":"http://locutus.io/php/bc/bcsub/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132module.exports = function bcsub (leftOperand, rightOperand, scale) &#123; // discuss at: http://locutus.io/php/bcsub/ // original by: lmeyrick (https://sourceforge.net/projects/bcmath-js/) // example 1: bcsub(1, 2) // returns 1: '-1' var _bc = require('../_helpers/_bc') var libbcmath = _bc() var first, second, result if (typeof scale === 'undefined') &#123; scale = libbcmath.scale &#125; scale = ((scale &lt; 0) ? 0 : scale) // create objects first = libbcmath.bc_init_num() second = libbcmath.bc_init_num() result = libbcmath.bc_init_num() first = libbcmath.php_str2num(leftOperand.toString()) second = libbcmath.php_str2num(rightOperand.toString()) result = libbcmath.bc_sub(first, second, scale) if (result.n_scale &gt; scale) &#123; result.n_scale = scale &#125; return result.toString()&#125;","raw":null,"content":null},{"title":"PHP's bcscale in JavaScript","date":"2016-05-11T20:27:49.826Z","updated":"2016-05-11T20:27:49.826Z","comments":true,"path":"php/bc/bcscale/index.html","permalink":"http://locutus.io/php/bc/bcscale/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function bcscale (scale) &#123; // discuss at: http://locutus.io/php/bcscale/ // original by: lmeyrick (https://sourceforge.net/projects/bcmath-js/) // example 1: bcscale(1) // returns 1: true var _bc = require('../_helpers/_bc') var libbcmath = _bc() scale = parseInt(scale, 10) if (isNaN(scale)) &#123; return false &#125; if (scale &lt; 0) &#123; return false &#125; libbcmath.scale = scale return true&#125;","raw":null,"content":null},{"title":"PHP's bcround in JavaScript","date":"2016-05-11T20:27:49.826Z","updated":"2016-05-11T20:27:49.826Z","comments":true,"path":"php/bc/bcround/index.html","permalink":"http://locutus.io/php/bc/bcround/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253module.exports = function bcround (val, precision) &#123; // discuss at: http://locutus.io/php/bcround/ // original by: lmeyrick (https://sourceforge.net/projects/bcmath-js/) // example 1: bcround(1, 2) // returns 1: '1.00' var _bc = require('../_helpers/_bc') var libbcmath = _bc() var temp, result, digit var rightOperand // create number temp = libbcmath.bc_init_num() temp = libbcmath.php_str2num(val.toString()) // check if any rounding needs if (precision &gt;= temp.n_scale) &#123; // nothing to round, just add the zeros. while (temp.n_scale &lt; precision) &#123; temp.n_value[temp.n_len + temp.n_scale] = 0 temp.n_scale++ &#125; return temp.toString() &#125; // get the digit we are checking (1 after the precision) // loop through digits after the precision marker digit = temp.n_value[temp.n_len + precision] rightOperand = libbcmath.bc_init_num() rightOperand = libbcmath.bc_new_num(1, precision) if (digit &gt;= 5) &#123; // round away from zero by adding 1 (or -1) at the \"precision\".. // ie 1.44999 @ 3dp = (1.44999 + 0.001).toString().substr(0,5) rightOperand.n_value[rightOperand.n_len + rightOperand.n_scale - 1] = 1 if (temp.n_sign === libbcmath.MINUS) &#123; // round down rightOperand.n_sign = libbcmath.MINUS &#125; result = libbcmath.bc_add(temp, rightOperand, precision) &#125; else &#123; // leave-as-is.. just truncate it. result = temp &#125; if (result.n_scale &gt; precision) &#123; result.n_scale = precision &#125; return result.toString()&#125;","raw":null,"content":null},{"title":"PHP's bcmul in JavaScript","date":"2016-05-11T20:27:49.826Z","updated":"2016-05-11T20:27:49.826Z","comments":true,"path":"php/bc/bcmul/index.html","permalink":"http://locutus.io/php/bc/bcmul/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031module.exports = function bcmul (leftOperand, rightOperand, scale) &#123; // discuss at: http://locutus.io/php/bcmul/ // original by: lmeyrick (https://sourceforge.net/projects/bcmath-js/) // example 1: bcmul(1, 2) // returns 1: '2' var _bc = require('../_helpers/_bc') var libbcmath = _bc() var first, second, result if (typeof scale === 'undefined') &#123; scale = libbcmath.scale &#125; scale = ((scale &lt; 0) ? 0 : scale) // create objects first = libbcmath.bc_init_num() second = libbcmath.bc_init_num() result = libbcmath.bc_init_num() first = libbcmath.php_str2num(leftOperand.toString()) second = libbcmath.php_str2num(rightOperand.toString()) result = libbcmath.bc_multiply(first, second, scale) if (result.n_scale &gt; scale) &#123; result.n_scale = scale &#125; return result.toString()&#125;","raw":null,"content":null},{"title":"PHP's bcdiv in JavaScript","date":"2016-05-11T20:27:49.822Z","updated":"2016-05-11T20:27:49.822Z","comments":true,"path":"php/bc/bcdiv/index.html","permalink":"http://locutus.io/php/bc/bcdiv/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536module.exports = function bcdiv (leftOperand, rightOperand, scale) &#123; // discuss at: http://locutus.io/php/bcdiv/ // original by: lmeyrick (https://sourceforge.net/projects/bcmath-js/) // example 1: bcdiv(1, 2) // returns 1: '0' // @todo: implement these testcases var _bc = require('../_helpers/_bc') var libbcmath = _bc() var first, second, result if (typeof scale === 'undefined') &#123; scale = libbcmath.scale &#125; scale = ((scale &lt; 0) ? 0 : scale) // create objects first = libbcmath.bc_init_num() second = libbcmath.bc_init_num() result = libbcmath.bc_init_num() first = libbcmath.php_str2num(leftOperand.toString()) second = libbcmath.php_str2num(rightOperand.toString()) result = libbcmath.bc_divide(first, second, scale) if (result === -1) &#123; // error throw new Error(11, '(BC) Division by zero') &#125; if (result.n_scale &gt; scale) &#123; result.n_scale = scale &#125; return result.toString()&#125;","raw":null,"content":null},{"title":"PHP's bccomp in JavaScript","date":"2016-05-11T20:27:49.822Z","updated":"2016-05-11T20:27:49.822Z","comments":true,"path":"php/bc/bccomp/index.html","permalink":"http://locutus.io/php/bc/bccomp/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425module.exports = function bccomp (leftOperand, rightOperand, scale) &#123; // discuss at: http://locutus.io/php/bccomp/ // original by: lmeyrick (https://sourceforge.net/projects/bcmath-js/) // example 1: bccomp(1, 2) // returns 1: -1 var bc = require('../_helpers/_bc') var libbcmath = bc() // bc_num var first, second if (typeof scale === 'undefined') &#123; scale = libbcmath.scale &#125; scale = ((scale &lt; 0) ? 0 : scale) first = libbcmath.bc_init_num() second = libbcmath.bc_init_num() // note bc_ not php_str2num first = libbcmath.bc_str2num(leftOperand.toString(), scale) // note bc_ not php_str2num second = libbcmath.bc_str2num(rightOperand.toString(), scale) return libbcmath.bc_compare(first, second, scale)&#125;","raw":null,"content":null},{"title":"PHP's bcadd in JavaScript","date":"2016-05-11T20:27:49.822Z","updated":"2016-05-11T20:27:49.822Z","comments":true,"path":"php/bc/bcadd/index.html","permalink":"http://locutus.io/php/bc/bcadd/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233module.exports = function bcadd (leftOperand, rightOperand, scale) &#123; // discuss at: http://locutus.io/php/bcadd/ // original by: lmeyrick (https://sourceforge.net/projects/bcmath-js/) // example 1: bcadd(1, 2) // returns 1: '3' // @todo: implement these testcases var bc = require('../_helpers/_bc') var libbcmath = bc() var first, second, result if (typeof scale === 'undefined') &#123; scale = libbcmath.scale &#125; scale = ((scale &lt; 0) ? 0 : scale) // create objects first = libbcmath.bc_init_num() second = libbcmath.bc_init_num() result = libbcmath.bc_init_num() first = libbcmath.php_str2num(leftOperand.toString()) second = libbcmath.php_str2num(rightOperand.toString()) result = libbcmath.bc_add(first, second, scale) if (result.n_scale &gt; scale) &#123; result.n_scale = scale &#125; return result.toString()&#125;","raw":null,"content":null},{"title":"PHP's usort in JavaScript","date":"2016-05-11T20:27:49.814Z","updated":"2016-05-11T20:27:49.814Z","comments":true,"path":"php/array/usort/index.html","permalink":"http://locutus.io/php/array/usort/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455module.exports = function usort (inputArr, sorter) &#123; // discuss at: http://locutus.io/php/usort/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // example 1: var $stuff = &#123;d: '3', a: '1', b: '11', c: '4'&#125; // example 1: usort($stuff, function (a, b) &#123; return (a - b) &#125;) // example 1: var $result = $stuff // returns 1: &#123;0: '1', 1: '3', 2: '4', 3: '11'&#125; var valArr = [] var k = '' var i = 0 var sortByReference = false var populateArr = &#123;&#125; if (typeof sorter === 'string') &#123; sorter = this[sorter] &#125; else if (Object.prototype.toString.call(sorter) === '[object Array]') &#123; sorter = this[sorter[0]][sorter[1]] &#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr for (k in inputArr) &#123; // Get key and value arrays if (inputArr.hasOwnProperty(k)) &#123; valArr.push(inputArr[k]) if (sortByReference) &#123; delete inputArr[k] &#125; &#125; &#125; try &#123; valArr.sort(sorter) &#125; catch (e) &#123; return false &#125; for (i = 0; i &lt; valArr.length; i++) &#123; // Repopulate the old array populateArr[i] = valArr[i] &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's uksort in JavaScript","date":"2016-05-11T20:27:49.814Z","updated":"2016-05-11T20:27:49.814Z","comments":true,"path":"php/array/uksort/index.html","permalink":"http://locutus.io/php/array/uksort/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768module.exports = function uksort (inputArr, sorter) &#123; // discuss at: http://locutus.io/php/uksort/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: The examples are correct, this is a new way // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // example 1: var $data = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 1: uksort($data, function (key1, key2)&#123; return (key1 === key2 ? 0 : (key1 &gt; key2 ? 1 : -1)); &#125;) // example 1: var $result = $data // returns 1: &#123;a: 'orange', b: 'banana', c: 'apple', d: 'lemon'&#125; var tmpArr = &#123;&#125; var keys = [] var i = 0 var k = '' var sortByReference = false var populateArr = &#123;&#125; if (typeof sorter === 'string') &#123; sorter = this.window[sorter] &#125; // Make a list of key names for (k in inputArr) &#123; if (inputArr.hasOwnProperty(k)) &#123; keys.push(k) &#125; &#125; // Sort key names try &#123; if (sorter) &#123; keys.sort(sorter) &#125; else &#123; keys.sort() &#125; &#125; catch (e) &#123; return false &#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr // Rebuild array with sorted key names for (i = 0; i &lt; keys.length; i++) &#123; k = keys[i] tmpArr[k] = inputArr[k] if (sortByReference) &#123; delete inputArr[k] &#125; &#125; for (i in tmpArr) &#123; if (tmpArr.hasOwnProperty(i)) &#123; populateArr[i] = tmpArr[i] &#125; &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's uasort in JavaScript","date":"2016-05-11T20:27:49.814Z","updated":"2016-05-11T20:27:49.814Z","comments":true,"path":"php/array/uasort/index.html","permalink":"http://locutus.io/php/array/uasort/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556module.exports = function uasort (inputArr, sorter) &#123; // discuss at: http://locutus.io/php/uasort/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Theriault (https://github.com/Theriault) // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // example 1: var $sorter = function (a, b) &#123; if (a &gt; b) &#123;return 1;&#125;if (a &lt; b) &#123;return -1;&#125; return 0;&#125; // example 1: var $fruits = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 1: uasort($fruits, $sorter) // example 1: var $result = $fruits // returns 1: &#123;c: 'apple', b: 'banana', d: 'lemon', a: 'orange'&#125; var valArr = [] var k = '' var i = 0 var sortByReference = false var populateArr = &#123;&#125; if (typeof sorter === 'string') &#123; sorter = this[sorter] &#125; else if (Object.prototype.toString.call(sorter) === '[object Array]') &#123; sorter = this[sorter[0]][sorter[1]] &#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr for (k in inputArr) &#123; // Get key and value arrays if (inputArr.hasOwnProperty(k)) &#123; valArr.push([k, inputArr[k]]) if (sortByReference) &#123; delete inputArr[k] &#125; &#125; &#125; valArr.sort(function (a, b) &#123; return sorter(a[1], b[1]) &#125;) for (i = 0; i &lt; valArr.length; i++) &#123; // Repopulate the old array populateArr[valArr[i][0]] = valArr[i][1] &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's sort in JavaScript","date":"2016-05-11T20:27:49.814Z","updated":"2016-05-11T20:27:49.814Z","comments":true,"path":"php/array/sort/index.html","permalink":"http://locutus.io/php/array/sort/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110module.exports = function sort (inputArr, sortFlags) &#123; // discuss at: http://locutus.io/php/sort/ // original by: Kevin van Zonneveld (http://kvz.io) // revised by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: SORT_STRING (as well as natsort and natcasesort) might also be // note 1: integrated into all of these functions by adapting the code at // note 1: http://sourcefrog.net/projects/natsort/natcompare.js // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // note 1: Since JS objects' keys are always strings, and (the // note 1: default) SORT_REGULAR flag distinguishes by key type, // note 1: if the content is a numeric string, we treat the // note 1: \"original type\" as numeric. // example 1: var $arr = ['Kevin', 'van', 'Zonneveld'] // example 1: sort($arr) // example 1: var $result = $arr // returns 1: ['Kevin', 'Zonneveld', 'van'] // example 2: ini_set('locutus.sortByReference', true) // example 2: var $fruits = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 2: sort($fruits) // example 2: var $result = $fruits // returns 2: &#123;0: 'apple', 1: 'banana', 2: 'lemon', 3: 'orange'&#125; // test: skip-1 var i18nlgd = require('../i18n/i18n_loc_get_default') var strnatcmp = require('../strings/strnatcmp') var sorter var i var k var sortByReference = false var populateArr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.locales = $locutus.php.locales || &#123;&#125; switch (sortFlags) &#123; case 'SORT_STRING': // compare items as strings sorter = function (a, b) &#123; return strnatcmp(b, a) &#125; break case 'SORT_LOCALE_STRING': // compare items as strings, based on the current locale // (set with i18n_loc_set_default() as of PHP6) var loc = i18nlgd() sorter = $locutus.locales[loc].sorting break case 'SORT_NUMERIC': // compare items numerically sorter = function (a, b) &#123; return (a - b) &#125; break case 'SORT_REGULAR': default: sorter = function (a, b) &#123; var aFloat = parseFloat(a) var bFloat = parseFloat(b) var aNumeric = aFloat + '' === a var bNumeric = bFloat + '' === b if (aNumeric &amp;&amp; bNumeric) &#123; return aFloat &gt; bFloat ? 1 : aFloat &lt; bFloat ? -1 : 0 &#125; else if (aNumeric &amp;&amp; !bNumeric) &#123; return 1 &#125; else if (!aNumeric &amp;&amp; bNumeric) &#123; return -1 &#125; return a &gt; b ? 1 : a &lt; b ? -1 : 0 &#125; break &#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr var valArr = [] for (k in inputArr) &#123; // Get key and value arrays if (inputArr.hasOwnProperty(k)) &#123; valArr.push(inputArr[k]) if (sortByReference) &#123; delete inputArr[k] &#125; &#125; &#125; valArr.sort(sorter) for (i = 0; i &lt; valArr.length; i++) &#123; // Repopulate the old array populateArr[i] = valArr[i] &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's sizeof in JavaScript","date":"2016-05-11T20:27:49.814Z","updated":"2016-05-11T20:27:49.814Z","comments":true,"path":"php/array/sizeof/index.html","permalink":"http://locutus.io/php/array/sizeof/index.html","excerpt":"","keywords":null,"text":"123456789101112module.exports = function sizeof (mixedVar, mode) &#123; // discuss at: http://locutus.io/php/sizeof/ // original by: Philip Peterson // example 1: sizeof([[0,0],[0,-4]], 'COUNT_RECURSIVE') // returns 1: 6 // example 2: sizeof(&#123;'one' : [1,2,3,4,5]&#125;, 'COUNT_RECURSIVE') // returns 2: 6 var count = require('../array/count') return count(mixedVar, mode)&#125;","raw":null,"content":null},{"title":"PHP's shuffle in JavaScript","date":"2016-05-11T20:27:49.814Z","updated":"2016-05-11T20:27:49.814Z","comments":true,"path":"php/array/shuffle/index.html","permalink":"http://locutus.io/php/array/shuffle/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142module.exports = function shuffle (inputArr) &#123; // discuss at: http://locutus.io/php/shuffle/ // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // revised by: Kevin van Zonneveld (http://kvz.io) // revised by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: var $data = &#123;5:'a', 2:'3', 3:'c', 4:5, 'q':5&#125; // example 1: ini_set('locutus.sortByReference', true) // example 1: shuffle($data) // example 1: var $result = $data.q // returns 1: 5 var valArr = [] var k = '' var i = 0 var sortByReference = false var populateArr = [] for (k in inputArr) &#123; // Get key and value arrays if (inputArr.hasOwnProperty(k)) &#123; valArr.push(inputArr[k]) if (sortByReference) &#123; delete inputArr[k] &#125; &#125; &#125; valArr.sort(function () &#123; return 0.5 - Math.random() &#125;) var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr for (i = 0; i &lt; valArr.length; i++) &#123; // Repopulate the old array populateArr[i] = valArr[i] &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's rsort in JavaScript","date":"2016-05-11T20:27:49.814Z","updated":"2016-05-11T20:27:49.814Z","comments":true,"path":"php/array/rsort/index.html","permalink":"http://locutus.io/php/array/rsort/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110module.exports = function rsort (inputArr, sortFlags) &#123; // discuss at: http://locutus.io/php/rsort/ // original by: Kevin van Zonneveld (http://kvz.io) // revised by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: SORT_STRING (as well as natsort and natcasesort) might also be // note 1: integrated into all of these functions by adapting the code at // note 1: http://sourcefrog.net/projects/natsort/natcompare.js // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // note 1: Since JS objects' keys are always strings, and (the // note 1: default) SORT_REGULAR flag distinguishes by key type, // note 1: if the content is a numeric string, we treat the // note 1: \"original type\" as numeric. // example 1: var $arr = ['Kevin', 'van', 'Zonneveld'] // example 1: rsort($arr) // example 1: var $result = $arr // returns 1: ['van', 'Zonneveld', 'Kevin'] // example 2: ini_set('locutus.sortByReference', true) // example 2: var $fruits = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 2: rsort($fruits) // example 2: var $result = $fruits // returns 2: &#123;0: 'orange', 1: 'lemon', 2: 'banana', 3: 'apple'&#125; // test: skip-1 var i18nlgd = require('../i18n/i18n_loc_get_default') var strnatcmp = require('../strings/strnatcmp') var sorter var i var k var sortByReference = false var populateArr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.locales = $locutus.php.locales || &#123;&#125; switch (sortFlags) &#123; case 'SORT_STRING': // compare items as strings sorter = function (a, b) &#123; return strnatcmp(b, a) &#125; break case 'SORT_LOCALE_STRING': // compare items as strings, based on the current locale // (set with i18n_loc_set_default() as of PHP6) var loc = i18nlgd() sorter = $locutus.locales[loc].sorting break case 'SORT_NUMERIC': // compare items numerically sorter = function (a, b) &#123; return (b - a) &#125; break case 'SORT_REGULAR': default: // compare items normally (don't change types) sorter = function (b, a) &#123; var aFloat = parseFloat(a) var bFloat = parseFloat(b) var aNumeric = aFloat + '' === a var bNumeric = bFloat + '' === b if (aNumeric &amp;&amp; bNumeric) &#123; return aFloat &gt; bFloat ? 1 : aFloat &lt; bFloat ? -1 : 0 &#125; else if (aNumeric &amp;&amp; !bNumeric) &#123; return 1 &#125; else if (!aNumeric &amp;&amp; bNumeric) &#123; return -1 &#125; return a &gt; b ? 1 : a &lt; b ? -1 : 0 &#125; break &#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr var valArr = [] for (k in inputArr) &#123; // Get key and value arrays if (inputArr.hasOwnProperty(k)) &#123; valArr.push(inputArr[k]) if (sortByReference) &#123; delete inputArr[k] &#125; &#125; &#125; valArr.sort(sorter) for (i = 0; i &lt; valArr.length; i++) &#123; // Repopulate the old array populateArr[i] = valArr[i] &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's reset in JavaScript","date":"2016-05-11T20:27:49.814Z","updated":"2016-05-11T20:27:49.814Z","comments":true,"path":"php/array/reset/index.html","permalink":"http://locutus.io/php/array/reset/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950module.exports = function reset (arr) &#123; // discuss at: http://locutus.io/php/reset/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Legaev Andrey // revised by: Brett Zamir (http://brett-zamir.me) // note 1: Uses global: locutus to store the array pointer // example 1: reset(&#123;0: 'Kevin', 1: 'van', 2: 'Zonneveld'&#125;) // returns 1: 'Kevin' var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.pointers = $locutus.php.pointers || [] var pointers = $locutus.php.pointers var indexOf = function (value) &#123; for (var i = 0, length = this.length; i &lt; length; i++) &#123; if (this[i] === value) &#123; return i &#125; &#125; return -1 &#125; if (!pointers.indexOf) &#123; pointers.indexOf = indexOf &#125; if (pointers.indexOf(arr) === -1) &#123; pointers.push(arr, 0) &#125; var arrpos = pointers.indexOf(arr) if (Object.prototype.toString.call(arr) !== '[object Array]') &#123; for (var k in arr) &#123; if (pointers.indexOf(arr) === -1) &#123; pointers.push(arr, 0) &#125; else &#123; pointers[arrpos + 1] = 0 &#125; return arr[k] &#125; // Empty return false &#125; if (arr.length === 0) &#123; return false &#125; pointers[arrpos + 1] = 0 return arr[pointers[arrpos + 1]]&#125;","raw":null,"content":null},{"title":"PHP's range in JavaScript","date":"2016-05-11T20:27:49.802Z","updated":"2016-05-11T20:27:49.802Z","comments":true,"path":"php/array/range/index.html","permalink":"http://locutus.io/php/array/range/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546module.exports = function range (low, high, step) &#123; // discuss at: http://locutus.io/php/range/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // example 1: range ( 0, 12 ) // returns 1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] // example 2: range( 0, 100, 10 ) // returns 2: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100] // example 3: range( 'a', 'i' ) // returns 3: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'] // example 4: range( 'c', 'a' ) // returns 4: ['c', 'b', 'a'] var matrix = [] var iVal var endval var plus var walker = step || 1 var chars = false if (!isNaN(low) &amp;&amp; !isNaN(high)) &#123; iVal = low endval = high &#125; else if (isNaN(low) &amp;&amp; isNaN(high)) &#123; chars = true iVal = low.charCodeAt(0) endval = high.charCodeAt(0) &#125; else &#123; iVal = (isNaN(low) ? 0 : low) endval = (isNaN(high) ? 0 : high) &#125; plus = !(iVal &gt; endval) if (plus) &#123; while (iVal &lt;= endval) &#123; matrix.push(((chars) ? String.fromCharCode(iVal) : iVal)) iVal += walker &#125; &#125; else &#123; while (iVal &gt;= endval) &#123; matrix.push(((chars) ? String.fromCharCode(iVal) : iVal)) iVal -= walker &#125; &#125; return matrix&#125;","raw":null,"content":null},{"title":"PHP's prev in JavaScript","date":"2016-05-11T20:27:49.802Z","updated":"2016-05-11T20:27:49.802Z","comments":true,"path":"php/array/prev/index.html","permalink":"http://locutus.io/php/array/prev/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849module.exports = function prev (arr) &#123; // discuss at: http://locutus.io/php/prev/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: Uses global: locutus to store the array pointer // example 1: var $transport = ['foot', 'bike', 'car', 'plane'] // example 1: prev($transport) // returns 1: false var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.pointers = $locutus.php.pointers || [] var pointers = $locutus.php.pointers var indexOf = function (value) &#123; for (var i = 0, length = this.length; i &lt; length; i++) &#123; if (this[i] === value) &#123; return i &#125; &#125; return -1 &#125; if (!pointers.indexOf) &#123; pointers.indexOf = indexOf &#125; var arrpos = pointers.indexOf(arr) var cursor = pointers[arrpos + 1] if (pointers.indexOf(arr) === -1 || cursor === 0) &#123; return false &#125; if (Object.prototype.toString.call(arr) !== '[object Array]') &#123; var ct = 0 for (var k in arr) &#123; if (ct === cursor - 1) &#123; pointers[arrpos + 1] -= 1 return arr[k] &#125; ct++ &#125; // Shouldn't reach here &#125; if (arr.length === 0) &#123; return false &#125; pointers[arrpos + 1] -= 1 return arr[pointers[arrpos + 1]]&#125;","raw":null,"content":null},{"title":"PHP's pos in JavaScript","date":"2016-05-11T20:27:49.802Z","updated":"2016-05-11T20:27:49.802Z","comments":true,"path":"php/array/pos/index.html","permalink":"http://locutus.io/php/array/pos/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function pos (arr) &#123; // discuss at: http://locutus.io/php/pos/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: Uses global: locutus to store the array pointer // example 1: var $transport = ['foot', 'bike', 'car', 'plane'] // example 1: pos($transport) // returns 1: 'foot' var current = require('../array/current') return current(arr)&#125;","raw":null,"content":null},{"title":"PHP's next in JavaScript","date":"2016-05-11T20:27:49.802Z","updated":"2016-05-11T20:27:49.802Z","comments":true,"path":"php/array/next/index.html","permalink":"http://locutus.io/php/array/next/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051module.exports = function next (arr) &#123; // discuss at: http://locutus.io/php/next/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: Uses global: locutus to store the array pointer // example 1: var $transport = ['foot', 'bike', 'car', 'plane'] // example 1: next($transport) // example 1: next($transport) // returns 1: 'car' var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.pointers = $locutus.php.pointers || [] var pointers = $locutus.php.pointers var indexOf = function (value) &#123; for (var i = 0, length = this.length; i &lt; length; i++) &#123; if (this[i] === value) &#123; return i &#125; &#125; return -1 &#125; if (!pointers.indexOf) &#123; pointers.indexOf = indexOf &#125; if (pointers.indexOf(arr) === -1) &#123; pointers.push(arr, 0) &#125; var arrpos = pointers.indexOf(arr) var cursor = pointers[arrpos + 1] if (Object.prototype.toString.call(arr) !== '[object Array]') &#123; var ct = 0 for (var k in arr) &#123; if (ct === cursor + 1) &#123; pointers[arrpos + 1] += 1 return arr[k] &#125; ct++ &#125; // End return false &#125; if (arr.length === 0 || cursor === (arr.length - 1)) &#123; return false &#125; pointers[arrpos + 1] += 1 return arr[pointers[arrpos + 1]]&#125;","raw":null,"content":null},{"title":"PHP's natsort in JavaScript","date":"2016-05-11T20:27:49.802Z","updated":"2016-05-11T20:27:49.802Z","comments":true,"path":"php/array/natsort/index.html","permalink":"http://locutus.io/php/array/natsort/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051module.exports = function natsort (inputArr) &#123; // discuss at: http://locutus.io/php/natsort/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Theriault (https://github.com/Theriault) // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // example 1: var $array1 = &#123;a:\"img12.png\", b:\"img10.png\", c:\"img2.png\", d:\"img1.png\"&#125; // example 1: natsort($array1) // example 1: var $result = $array1 // returns 1: &#123;d: 'img1.png', c: 'img2.png', b: 'img10.png', a: 'img12.png'&#125; var strnatcmp = require('../strings/strnatcmp') var valArr = [] var k var i var sortByReference = false var populateArr = &#123;&#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr // Get key and value arrays for (k in inputArr) &#123; if (inputArr.hasOwnProperty(k)) &#123; valArr.push([k, inputArr[k]]) if (sortByReference) &#123; delete inputArr[k] &#125; &#125; &#125; valArr.sort(function (a, b) &#123; return strnatcmp(a[1], b[1]) &#125;) // Repopulate the old array for (i = 0; i &lt; valArr.length; i++) &#123; populateArr[valArr[i][0]] = valArr[i][1] &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's natcasesort in JavaScript","date":"2016-05-11T20:27:49.802Z","updated":"2016-05-11T20:27:49.802Z","comments":true,"path":"php/array/natcasesort/index.html","permalink":"http://locutus.io/php/array/natcasesort/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152module.exports = function natcasesort (inputArr) &#123; // discuss at: http://locutus.io/php/natcasesort/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Theriault (https://github.com/Theriault) // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // note 1: We cannot use numbers as keys and have them be reordered since they // note 1: adhere to numerical order in some implementations // example 1: var $array1 = &#123;a:'IMG0.png', b:'img12.png', c:'img10.png', d:'img2.png', e:'img1.png', f:'IMG3.png'&#125; // example 1: natcasesort($array1) // example 1: var $result = $array1 // returns 1: &#123;a: 'IMG0.png', e: 'img1.png', d: 'img2.png', f: 'IMG3.png', c: 'img10.png', b: 'img12.png'&#125; var strnatcasecmp = require('../strings/strnatcasecmp') var valArr = [] var k var i var sortByReference = false var populateArr = &#123;&#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr // Get key and value arrays for (k in inputArr) &#123; if (inputArr.hasOwnProperty(k)) &#123; valArr.push([k, inputArr[k]]) if (sortByReference) &#123; delete inputArr[k] &#125; &#125; &#125; valArr.sort(function (a, b) &#123; return strnatcasecmp(a[1], b[1]) &#125;) // Repopulate the old array for (i = 0; i &lt; valArr.length; i++) &#123; populateArr[valArr[i][0]] = valArr[i][1] &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's ksort in JavaScript","date":"2016-05-11T20:27:49.802Z","updated":"2016-05-11T20:27:49.802Z","comments":true,"path":"php/array/ksort/index.html","permalink":"http://locutus.io/php/array/ksort/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111module.exports = function ksort (inputArr, sortFlags) &#123; // discuss at: http://locutus.io/php/ksort/ // original by: GeekFG (http://geekfg.blogspot.com) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // note 1: Since JS objects' keys are always strings, and (the // note 1: default) SORT_REGULAR flag distinguishes by key type, // note 1: if the content is a numeric string, we treat the // note 1: \"original type\" as numeric. // example 1: var $data = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 1: ksort($data) // example 1: var $result = $data // returns 1: &#123;a: 'orange', b: 'banana', c: 'apple', d: 'lemon'&#125; // example 2: ini_set('locutus.sortByReference', true) // example 2: var $data = &#123;2: 'van', 3: 'Zonneveld', 1: 'Kevin'&#125; // example 2: ksort($data) // example 2: var $result = $data // returns 2: &#123;1: 'Kevin', 2: 'van', 3: 'Zonneveld'&#125; var i18nlgd = require('../i18n/i18n_loc_get_default') var strnatcmp = require('../strings/strnatcmp') var tmpArr = &#123;&#125; var keys = [] var sorter var i var k var sortByReference = false var populateArr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.locales = $locutus.php.locales || &#123;&#125; switch (sortFlags) &#123; case 'SORT_STRING': // compare items as strings sorter = function (a, b) &#123; return strnatcmp(b, a) &#125; break case 'SORT_LOCALE_STRING': // compare items as strings, based on the current locale // (set with i18n_loc_set_default() as of PHP6) var loc = i18nlgd() sorter = $locutus.locales[loc].sorting break case 'SORT_NUMERIC': // compare items numerically sorter = function (a, b) &#123; return ((a + 0) - (b + 0)) &#125; break default: // case 'SORT_REGULAR': // compare items normally (don't change types) sorter = function (a, b) &#123; var aFloat = parseFloat(a) var bFloat = parseFloat(b) var aNumeric = aFloat + '' === a var bNumeric = bFloat + '' === b if (aNumeric &amp;&amp; bNumeric) &#123; return aFloat &gt; bFloat ? 1 : aFloat &lt; bFloat ? -1 : 0 &#125; else if (aNumeric &amp;&amp; !bNumeric) &#123; return 1 &#125; else if (!aNumeric &amp;&amp; bNumeric) &#123; return -1 &#125; return a &gt; b ? 1 : a &lt; b ? -1 : 0 &#125; break &#125; // Make a list of key names for (k in inputArr) &#123; if (inputArr.hasOwnProperty(k)) &#123; keys.push(k) &#125; &#125; keys.sort(sorter) var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr // Rebuild array with sorted key names for (i = 0; i &lt; keys.length; i++) &#123; k = keys[i] tmpArr[k] = inputArr[k] if (sortByReference) &#123; delete inputArr[k] &#125; &#125; for (i in tmpArr) &#123; if (tmpArr.hasOwnProperty(i)) &#123; populateArr[i] = tmpArr[i] &#125; &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's krsort in JavaScript","date":"2016-05-11T20:27:49.802Z","updated":"2016-05-11T20:27:49.802Z","comments":true,"path":"php/array/krsort/index.html","permalink":"http://locutus.io/php/array/krsort/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114module.exports = function krsort (inputArr, sortFlags) &#123; // discuss at: http://locutus.io/php/krsort/ // original by: GeekFG (http://geekfg.blogspot.com) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // bugfixed by: pseudaria (https://github.com/pseudaria) // note 1: The examples are correct, this is a new way // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // note 1: Since JS objects' keys are always strings, and (the // note 1: default) SORT_REGULAR flag distinguishes by key type, // note 1: if the content is a numeric string, we treat the // note 1: \"original type\" as numeric. // example 1: var $data = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 1: krsort($data) // example 1: var $result = $data // returns 1: &#123;d: 'lemon', c: 'apple', b: 'banana', a: 'orange'&#125; // example 2: ini_set('locutus.sortByReference', true) // example 2: var $data = &#123;2: 'van', 3: 'Zonneveld', 1: 'Kevin'&#125; // example 2: krsort($data) // example 2: var $result = $data // returns 2: &#123;3: 'Zonneveld', 2: 'van', 1: 'Kevin'&#125; var i18nlgd = require('../i18n/i18n_loc_get_default') var strnatcmp = require('../strings/strnatcmp') var tmpArr = &#123;&#125; var keys = [] var sorter var i var k var sortByReference = false var populateArr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.locales = $locutus.php.locales || &#123;&#125; switch (sortFlags) &#123; case 'SORT_STRING': // compare items as strings sorter = function (a, b) &#123; return strnatcmp(b, a) &#125; break case 'SORT_LOCALE_STRING': // compare items as strings, based on the current locale // (set with i18n_loc_set_default() as of PHP6) var loc = i18nlgd() sorter = $locutus.locales[loc].sorting break case 'SORT_NUMERIC': // compare items numerically sorter = function (a, b) &#123; return (b - a) &#125; break case 'SORT_REGULAR': default: // compare items normally (don't change types) sorter = function (b, a) &#123; var aFloat = parseFloat(a) var bFloat = parseFloat(b) var aNumeric = aFloat + '' === a var bNumeric = bFloat + '' === b if (aNumeric &amp;&amp; bNumeric) &#123; return aFloat &gt; bFloat ? 1 : aFloat &lt; bFloat ? -1 : 0 &#125; else if (aNumeric &amp;&amp; !bNumeric) &#123; return 1 &#125; else if (!aNumeric &amp;&amp; bNumeric) &#123; return -1 &#125; return a &gt; b ? 1 : a &lt; b ? -1 : 0 &#125; break &#125; // Make a list of key names for (k in inputArr) &#123; if (inputArr.hasOwnProperty(k)) &#123; keys.push(k) &#125; &#125; keys.sort(sorter) var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr // Rebuild array with sorted key names for (i = 0; i &lt; keys.length; i++) &#123; k = keys[i] tmpArr[k] = inputArr[k] if (sortByReference) &#123; delete inputArr[k] &#125; &#125; for (i in tmpArr) &#123; if (tmpArr.hasOwnProperty(i)) &#123; populateArr[i] = tmpArr[i] &#125; &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's key in JavaScript","date":"2016-05-11T20:27:49.790Z","updated":"2016-05-11T20:27:49.790Z","comments":true,"path":"php/array/key/index.html","permalink":"http://locutus.io/php/array/key/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051module.exports = function key (arr) &#123; // discuss at: http://locutus.io/php/key/ // original by: Brett Zamir (http://brett-zamir.me) // input by: Riddler (http://www.frontierwebdev.com/) // bugfixed by: Brett Zamir (http://brett-zamir.me) // note 1: Uses global: locutus to store the array pointer // example 1: var $array = &#123;fruit1: 'apple', 'fruit2': 'orange'&#125; // example 1: key($array) // returns 1: 'fruit1' var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.pointers = $locutus.php.pointers || [] var pointers = $locutus.php.pointers var indexOf = function (value) &#123; for (var i = 0, length = this.length; i &lt; length; i++) &#123; if (this[i] === value) &#123; return i &#125; &#125; return -1 &#125; if (!pointers.indexOf) &#123; pointers.indexOf = indexOf &#125; if (pointers.indexOf(arr) === -1) &#123; pointers.push(arr, 0) &#125; var cursor = pointers[pointers.indexOf(arr) + 1] if (Object.prototype.toString.call(arr) !== '[object Array]') &#123; var ct = 0 for (var k in arr) &#123; if (ct === cursor) &#123; return k &#125; ct++ &#125; // Empty return false &#125; if (arr.length === 0) &#123; return false &#125; return cursor&#125;","raw":null,"content":null},{"title":"PHP's array extension  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"php/array/index.html","permalink":"http://locutus.io/php/array/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"PHP's in_array in JavaScript","date":"2016-05-11T20:27:49.790Z","updated":"2016-05-11T20:27:49.790Z","comments":true,"path":"php/array/in_array/index.html","permalink":"http://locutus.io/php/array/in_array/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940module.exports = function in_array (needle, haystack, argStrict) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/in_array/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: vlado houba // improved by: Jonas Sciangula Street (Joni2Back) // input by: Billy // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: in_array('van', ['Kevin', 'van', 'Zonneveld']) // returns 1: true // example 2: in_array('vlado', &#123;0: 'Kevin', vlado: 'van', 1: 'Zonneveld'&#125;) // returns 2: false // example 3: in_array(1, ['1', '2', '3']) // example 3: in_array(1, ['1', '2', '3'], false) // returns 3: true // returns 3: true // example 4: in_array(1, ['1', '2', '3'], true) // returns 4: false var key = '' var strict = !!argStrict // we prevent the double check (strict &amp;&amp; arr[key] === ndl) || (!strict &amp;&amp; arr[key] === ndl) // in just one for, in order to improve the performance // deciding wich type of comparation will do before walk array if (strict) &#123; for (key in haystack) &#123; if (haystack[key] === needle) &#123; return true &#125; &#125; &#125; else &#123; for (key in haystack) &#123; if (haystack[key] == needle) &#123; // eslint-disable-line eqeqeq return true &#125; &#125; &#125; return false&#125;","raw":null,"content":null},{"title":"PHP's end in JavaScript","date":"2016-05-11T20:27:49.790Z","updated":"2016-05-11T20:27:49.790Z","comments":true,"path":"php/array/end/index.html","permalink":"http://locutus.io/php/array/end/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657module.exports = function end (arr) &#123; // discuss at: http://locutus.io/php/end/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Legaev Andrey // revised by: J A R // revised by: Brett Zamir (http://brett-zamir.me) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Kevin van Zonneveld (http://kvz.io) // note 1: Uses global: locutus to store the array pointer // example 1: end(&#123;0: 'Kevin', 1: 'van', 2: 'Zonneveld'&#125;) // returns 1: 'Zonneveld' // example 2: end(['Kevin', 'van', 'Zonneveld']) // returns 2: 'Zonneveld' var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.pointers = $locutus.php.pointers || [] var pointers = $locutus.php.pointers var indexOf = function (value) &#123; for (var i = 0, length = this.length; i &lt; length; i++) &#123; if (this[i] === value) &#123; return i &#125; &#125; return -1 &#125; if (!pointers.indexOf) &#123; pointers.indexOf = indexOf &#125; if (pointers.indexOf(arr) === -1) &#123; pointers.push(arr, 0) &#125; var arrpos = pointers.indexOf(arr) if (Object.prototype.toString.call(arr) !== '[object Array]') &#123; var ct = 0 var val for (var k in arr) &#123; ct++ val = arr[k] &#125; if (ct === 0) &#123; // Empty return false &#125; pointers[arrpos + 1] = ct - 1 return val &#125; if (arr.length === 0) &#123; return false &#125; pointers[arrpos + 1] = arr.length - 1 return arr[pointers[arrpos + 1]]&#125;","raw":null,"content":null},{"title":"PHP's each in JavaScript","date":"2016-05-11T20:27:49.786Z","updated":"2016-05-11T20:27:49.786Z","comments":true,"path":"php/array/each/index.html","permalink":"http://locutus.io/php/array/each/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071module.exports = function each (arr) &#123; // discuss at: http://locutus.io/php/each/ // original by: Ates Goral (http://magnetiq.com) // revised by: Brett Zamir (http://brett-zamir.me) // note 1: Uses global: locutus to store the array pointer // example 1: each(&#123;a: \"apple\", b: \"balloon\"&#125;) // returns 1: &#123;0: \"a\", 1: \"apple\", key: \"a\", value: \"apple\"&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.pointers = $locutus.php.pointers || [] var pointers = $locutus.php.pointers var indexOf = function (value) &#123; for (var i = 0, length = this.length; i &lt; length; i++) &#123; if (this[i] === value) &#123; return i &#125; &#125; return -1 &#125; if (!pointers.indexOf) &#123; pointers.indexOf = indexOf &#125; if (pointers.indexOf(arr) === -1) &#123; pointers.push(arr, 0) &#125; var arrpos = pointers.indexOf(arr) var cursor = pointers[arrpos + 1] var pos = 0 if (Object.prototype.toString.call(arr) !== '[object Array]') &#123; var ct = 0 for (var k in arr) &#123; if (ct === cursor) &#123; pointers[arrpos + 1] += 1 if (each.returnArrayOnly) &#123; return [k, arr[k]] &#125; else &#123; return &#123; 1: arr[k], value: arr[k], 0: k, key: k &#125; &#125; &#125; ct++ &#125; // Empty return false &#125; if (arr.length === 0 || cursor === arr.length) &#123; return false &#125; pos = cursor pointers[arrpos + 1] += 1 if (each.returnArrayOnly) &#123; return [pos, arr[pos]] &#125; else &#123; return &#123; 1: arr[pos], value: arr[pos], 0: pos, key: pos &#125; &#125;&#125;","raw":null,"content":null},{"title":"PHP's current in JavaScript","date":"2016-05-11T20:27:49.786Z","updated":"2016-05-11T20:27:49.786Z","comments":true,"path":"php/array/current/index.html","permalink":"http://locutus.io/php/array/current/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344module.exports = function current (arr) &#123; // discuss at: http://locutus.io/php/current/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: Uses global: locutus to store the array pointer // example 1: var $transport = ['foot', 'bike', 'car', 'plane'] // example 1: current($transport) // returns 1: 'foot' var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.pointers = $locutus.php.pointers || [] var pointers = $locutus.php.pointers var indexOf = function (value) &#123; for (var i = 0, length = this.length; i &lt; length; i++) &#123; if (this[i] === value) &#123; return i &#125; &#125; return -1 &#125; if (!pointers.indexOf) &#123; pointers.indexOf = indexOf &#125; if (pointers.indexOf(arr) === -1) &#123; pointers.push(arr, 0) &#125; var arrpos = pointers.indexOf(arr) var cursor = pointers[arrpos + 1] if (Object.prototype.toString.call(arr) === '[object Array]') &#123; return arr[cursor] || false &#125; var ct = 0 for (var k in arr) &#123; if (ct === cursor) &#123; return arr[k] &#125; ct++ &#125; // Empty return false&#125;","raw":null,"content":null},{"title":"PHP's count in JavaScript","date":"2016-05-11T20:27:49.786Z","updated":"2016-05-11T20:27:49.786Z","comments":true,"path":"php/array/count/index.html","permalink":"http://locutus.io/php/array/count/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142module.exports = function count (mixedVar, mode) &#123; // discuss at: http://locutus.io/php/count/ // original by: Kevin van Zonneveld (http://kvz.io) // input by: Waldo Malqui Silva (http://waldo.malqui.info) // input by: merabi // bugfixed by: Soren Hansen // bugfixed by: Olivier Louvignes (http://mg-crea.com/) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: count([[0,0],[0,-4]], 'COUNT_RECURSIVE') // returns 1: 6 // example 2: count(&#123;'one' : [1,2,3,4,5]&#125;, 'COUNT_RECURSIVE') // returns 2: 6 var key var cnt = 0 if (mixedVar === null || typeof mixedVar === 'undefined') &#123; return 0 &#125; else if (mixedVar.constructor !== Array &amp;&amp; mixedVar.constructor !== Object) &#123; return 1 &#125; if (mode === 'COUNT_RECURSIVE') &#123; mode = 1 &#125; if (mode !== 1) &#123; mode = 0 &#125; for (key in mixedVar) &#123; if (mixedVar.hasOwnProperty(key)) &#123; cnt++ if (mode === 1 &amp;&amp; mixedVar[key] &amp;&amp; (mixedVar[key].constructor === Array || mixedVar[key].constructor === Object)) &#123; cnt += count(mixedVar[key], 1) &#125; &#125; &#125; return cnt&#125;","raw":null,"content":null},{"title":"PHP's asort in JavaScript","date":"2016-05-11T20:27:49.786Z","updated":"2016-05-11T20:27:49.786Z","comments":true,"path":"php/array/asort/index.html","permalink":"http://locutus.io/php/array/asort/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118module.exports = function asort (inputArr, sortFlags) &#123; // discuss at: http://locutus.io/php/asort/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Theriault (https://github.com/Theriault) // input by: paulo kuong // bugfixed by: Adam Wallner (http://web2.bitbaro.hu/) // note 1: SORT_STRING (as well as natsort and natcasesort) might also be // note 1: integrated into all of these functions by adapting the code at // note 1: http://sourcefrog.net/projects/natsort/natcompare.js // note 1: The examples are correct, this is a new way // note 1: Credits to: http://javascript.internet.com/math-related/bubble-sort.html // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // note 1: Since JS objects' keys are always strings, and (the // note 1: default) SORT_REGULAR flag distinguishes by key type, // note 1: if the content is a numeric string, we treat the // note 1: \"original type\" as numeric. // example 1: var $data = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 1: asort($data) // example 1: var $result = $data // returns 1: &#123;c: 'apple', b: 'banana', d: 'lemon', a: 'orange'&#125; // example 2: ini_set('locutus.sortByReference', true) // example 2: var $data = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 2: asort($data) // example 2: var $result = $data // returns 2: &#123;c: 'apple', b: 'banana', d: 'lemon', a: 'orange'&#125; var strnatcmp = require('../strings/strnatcmp') var i18nlgd = require('../i18n/i18n_loc_get_default') var valArr = [] var valArrLen = 0 var k var i var sorter var sortByReference = false var populateArr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.locales = $locutus.php.locales || &#123;&#125; switch (sortFlags) &#123; case 'SORT_STRING': // compare items as strings sorter = function (a, b) &#123; return strnatcmp(a, b) &#125; break case 'SORT_LOCALE_STRING': // compare items as strings, based on the current locale // (set with i18n_loc_set_default() as of PHP6) var loc = i18nlgd() sorter = $locutus.php.locales[loc].sorting break case 'SORT_NUMERIC': // compare items numerically sorter = function (a, b) &#123; return (a - b) &#125; break case 'SORT_REGULAR': // compare items normally (don't change types) break default: sorter = function (a, b) &#123; var aFloat = parseFloat(a) var bFloat = parseFloat(b) var aNumeric = aFloat + '' === a var bNumeric = bFloat + '' === b if (aNumeric &amp;&amp; bNumeric) &#123; return aFloat &gt; bFloat ? 1 : aFloat &lt; bFloat ? -1 : 0 &#125; else if (aNumeric &amp;&amp; !bNumeric) &#123; return 1 &#125; else if (!aNumeric &amp;&amp; bNumeric) &#123; return -1 &#125; return a &gt; b ? 1 : a &lt; b ? -1 : 0 &#125; break &#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' populateArr = sortByReference ? inputArr : populateArr // Get key and value arrays for (k in inputArr) &#123; if (inputArr.hasOwnProperty(k)) &#123; valArr.push([k, inputArr[k]]) if (sortByReference) &#123; delete inputArr[k] &#125; &#125; &#125; valArr.sort(function (a, b) &#123; return sorter(a[1], b[1]) &#125;) // Repopulate the old array for (i = 0, valArrLen = valArr.length; i &lt; valArrLen; i++) &#123; populateArr[valArr[i][0]] = valArr[i][1] &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's arsort in JavaScript","date":"2016-05-11T20:27:49.786Z","updated":"2016-05-11T20:27:49.786Z","comments":true,"path":"php/array/arsort/index.html","permalink":"http://locutus.io/php/array/arsort/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118module.exports = function arsort (inputArr, sortFlags) &#123; // discuss at: http://locutus.io/php/arsort/ // original by: Brett Zamir (http://brett-zamir.me) // improved by: Brett Zamir (http://brett-zamir.me) // improved by: Theriault (https://github.com/Theriault) // note 1: SORT_STRING (as well as natsort and natcasesort) might also be // note 1: integrated into all of these functions by adapting the code at // note 1: http://sourcefrog.net/projects/natsort/natcompare.js // note 1: The examples are correct, this is a new way // note 1: Credits to: http://javascript.internet.com/math-related/bubble-sort.html // note 1: This function deviates from PHP in returning a copy of the array instead // note 1: of acting by reference and returning true; this was necessary because // note 1: IE does not allow deleting and re-adding of properties without caching // note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to // note 1: get the PHP behavior, but use this only if you are in an environment // note 1: such as Firefox extensions where for-in iteration order is fixed and true // note 1: property deletion is supported. Note that we intend to implement the PHP // note 1: behavior by default if IE ever does allow it; only gives shallow copy since // note 1: is by reference in PHP anyways // note 1: Since JS objects' keys are always strings, and (the // note 1: default) SORT_REGULAR flag distinguishes by key type, // note 1: if the content is a numeric string, we treat the // note 1: \"original type\" as numeric. // example 1: var $data = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 1: arsort($data) // example 1: var $result = $data // returns 1: &#123;a: 'orange', d: 'lemon', b: 'banana', c: 'apple'&#125; // example 2: ini_set('locutus.sortByReference', true) // example 2: var $data = &#123;d: 'lemon', a: 'orange', b: 'banana', c: 'apple'&#125; // example 2: arsort($data) // example 2: var $result = $data // returns 2: &#123;a: 'orange', d: 'lemon', b: 'banana', c: 'apple'&#125; // test: skip-1 var i18lgd = require('../i18n/i18n_loc_get_default') var strnatcmp = require('../strings/strnatcmp') var valArr = [] var valArrLen = 0 var k var i var sorter var sortByReference = false var populateArr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) $global.$locutus = $global.$locutus || &#123;&#125; var $locutus = $global.$locutus $locutus.php = $locutus.php || &#123;&#125; $locutus.php.locales = $locutus.php.locales || &#123;&#125; switch (sortFlags) &#123; case 'SORT_STRING': // compare items as strings sorter = function (a, b) &#123; return strnatcmp(b, a) &#125; break case 'SORT_LOCALE_STRING': // compare items as strings, based on the current locale // (set with i18n_loc_set_default() as of PHP6) var loc = i18lgd() sorter = $locutus.php.locales[loc].sorting break case 'SORT_NUMERIC': // compare items numerically sorter = function (a, b) &#123; return (a - b) &#125; break case 'SORT_REGULAR': // compare items normally (don't change types) break default: sorter = function (b, a) &#123; var aFloat = parseFloat(a) var bFloat = parseFloat(b) var aNumeric = aFloat + '' === a var bNumeric = bFloat + '' === b if (aNumeric &amp;&amp; bNumeric) &#123; return aFloat &gt; bFloat ? 1 : aFloat &lt; bFloat ? -1 : 0 &#125; else if (aNumeric &amp;&amp; !bNumeric) &#123; return 1 &#125; else if (!aNumeric &amp;&amp; bNumeric) &#123; return -1 &#125; return a &gt; b ? 1 : a &lt; b ? -1 : 0 &#125; break &#125; var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on' sortByReference = iniVal === 'on' // Get key and value arrays for (k in inputArr) &#123; if (inputArr.hasOwnProperty(k)) &#123; valArr.push([k, inputArr[k]]) if (sortByReference) &#123; delete inputArr[k] &#125; &#125; &#125; valArr.sort(function (a, b) &#123; return sorter(a[1], b[1]) &#125;) // Repopulate the old array for (i = 0, valArrLen = valArr.length; i &lt; valArrLen; i++) &#123; populateArr[valArr[i][0]] = valArr[i][1] if (sortByReference) &#123; inputArr[valArr[i][0]] = valArr[i][1] &#125; &#125; return sortByReference || populateArr&#125;","raw":null,"content":null},{"title":"PHP's array_walk in JavaScript","date":"2016-05-11T20:27:49.778Z","updated":"2016-05-11T20:27:49.778Z","comments":true,"path":"php/array/array_walk/index.html","permalink":"http://locutus.io/php/array/array_walk/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031module.exports = function array_walk (array, funcname, userdata) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_walk/ // original by: Johnny Mast (http://www.phpvrouwen.nl) // bugfixed by: David // improved by: Brett Zamir (http://brett-zamir.me) // note 1: Only works with user-defined functions, not built-in functions like void() // example 1: array_walk ([3, 4], function () &#123;&#125;, 'userdata') // returns 1: true if (!array || typeof array !== 'object') &#123; return false &#125; try &#123; if (typeof funcname === 'function') &#123; for (var key in array) &#123; if (arguments.length &gt; 2) &#123; funcname(array[key], key, userdata) &#125; else &#123; funcname(array[key], key) &#125; &#125; &#125; else &#123; return false &#125; &#125; catch (e) &#123; return false &#125; return true&#125;","raw":null,"content":null},{"title":"PHP's array_values in JavaScript","date":"2016-05-11T20:27:49.778Z","updated":"2016-05-11T20:27:49.778Z","comments":true,"path":"php/array/array_values/index.html","permalink":"http://locutus.io/php/array/array_values/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516module.exports = function array_values (input) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_values/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: array_values( &#123;firstname: 'Kevin', surname: 'van Zonneveld'&#125; ) // returns 1: [ 'Kevin', 'van Zonneveld' ] var tmpArr = [] var key = '' for (key in input) &#123; tmpArr[tmpArr.length] = input[key] &#125; return tmpArr&#125;","raw":null,"content":null},{"title":"PHP's array_unshift in JavaScript","date":"2016-05-11T20:27:49.778Z","updated":"2016-05-11T20:27:49.778Z","comments":true,"path":"php/array/array_unshift/index.html","permalink":"http://locutus.io/php/array/array_unshift/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function array_unshift (array) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_unshift/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Martijn Wieringa // improved by: jmweb // note 1: Currently does not handle objects // example 1: array_unshift(['van', 'Zonneveld'], 'Kevin') // returns 1: 3 var i = arguments.length while (--i !== 0) &#123; arguments[0].unshift(arguments[i]) &#125; return arguments[0].length&#125;","raw":null,"content":null},{"title":"PHP's array_unique in JavaScript","date":"2016-05-11T20:27:49.778Z","updated":"2016-05-11T20:27:49.778Z","comments":true,"path":"php/array/array_unique/index.html","permalink":"http://locutus.io/php/array/array_unique/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344module.exports = function array_unique (inputArr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_unique/ // original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com) // input by: duncan // input by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Nate // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // improved by: Michael Grier // note 1: The second argument, sort_flags is not implemented; // note 1: also should be sorted (asort?) first according to docs // example 1: array_unique(['Kevin','Kevin','van','Zonneveld','Kevin']) // returns 1: &#123;0: 'Kevin', 2: 'van', 3: 'Zonneveld'&#125; // example 2: array_unique(&#123;'a': 'green', 0: 'red', 'b': 'green', 1: 'blue', 2: 'red'&#125;) // returns 2: &#123;a: 'green', 0: 'red', 1: 'blue'&#125; var key = '' var tmpArr2 = &#123;&#125; var val = '' var _arraySearch = function (needle, haystack) &#123; var fkey = '' for (fkey in haystack) &#123; if (haystack.hasOwnProperty(fkey)) &#123; if ((haystack[fkey] + '') === (needle + '')) &#123; return fkey &#125; &#125; &#125; return false &#125; for (key in inputArr) &#123; if (inputArr.hasOwnProperty(key)) &#123; val = inputArr[key] if (_arraySearch(val, tmpArr2) === false) &#123; tmpArr2[key] = val &#125; &#125; &#125; return tmpArr2&#125;","raw":null,"content":null},{"title":"PHP's array_uintersect_uassoc in JavaScript","date":"2016-05-11T20:27:49.778Z","updated":"2016-05-11T20:27:49.778Z","comments":true,"path":"php/array/array_uintersect_uassoc/index.html","permalink":"http://locutus.io/php/array/array_uintersect_uassoc/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152module.exports = function array_uintersect_uassoc (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_uintersect_uassoc/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: var $array1 = &#123;a: 'green', b: 'brown', c: 'blue', 0: 'red'&#125; // example 1: var $array2 = &#123;a: 'GREEN', B: 'brown', 0: 'yellow', 1: 'red'&#125; // example 1: array_uintersect_uassoc($array1, $array2, function (f_string1, f_string2)&#123;var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 &gt; string2) return 1; if (string1 === string2) return 0; return -1;&#125;, function (f_string1, f_string2)&#123;var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 &gt; string2) return 1; if (string1 === string2) return 0; return -1;&#125;) // returns 1: &#123;a: 'green', b: 'brown'&#125; var retArr = &#123;&#125; var arglm1 = arguments.length - 1 var arglm2 = arglm1 - 1 var cb = arguments[arglm1] var cb0 = arguments[arglm2] var k1 = '' var i = 1 var k = '' var arr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) cb = (typeof cb === 'string') ? $global[cb] : (Object.prototype.toString.call(cb) === '[object Array]') ? $global[cb[0]][cb[1]] : cb cb0 = (typeof cb0 === 'string') ? $global[cb0] : (Object.prototype.toString.call(cb0) === '[object Array]') ? $global[cb0[0]][cb0[1]] : cb0 arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels arrs: for (i = 1; i &lt; arglm2; i++) &#123; // eslint-disable-line no-labels arr = arguments[i] for (k in arr) &#123; if (cb0(arr[k], arr1[k1]) === 0 &amp;&amp; cb(k, k1) === 0) &#123; if (i === arguments.length - 3) &#123; retArr[k1] = arr1[k1] &#125; // If the innermost loop always leads at least once to an equal value, // continue the loop until done continue arrs // eslint-disable-line no-labels &#125; &#125; // If it reaches here, it wasn't found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_uintersect in JavaScript","date":"2016-05-11T20:27:49.778Z","updated":"2016-05-11T20:27:49.778Z","comments":true,"path":"php/array/array_uintersect/index.html","permalink":"http://locutus.io/php/array/array_uintersect/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546module.exports = function array_uintersect (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_uintersect/ // original by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Demosthenes Koptsis // example 1: var $array1 = &#123;a: 'green', b: 'brown', c: 'blue', 0: 'red'&#125; // example 1: var $array2 = &#123;a: 'GREEN', B: 'brown', 0: 'yellow', 1: 'red'&#125; // example 1: array_uintersect($array1, $array2, function( f_string1, f_string2)&#123;var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 &gt; string2) return 1; if (string1 === string2) return 0; return -1;&#125;) // returns 1: &#123;a: 'green', b: 'brown', 0: 'red'&#125; var retArr = &#123;&#125; var arglm1 = arguments.length - 1 var arglm2 = arglm1 - 1 var cb = arguments[arglm1] var k1 = '' var i = 1 var arr = &#123;&#125; var k = '' var $global = (typeof window !== 'undefined' ? window : GLOBAL) cb = (typeof cb === 'string') ? $global[cb] : (Object.prototype.toString.call(cb) === '[object Array]') ? $global[cb[0]][cb[1]] : cb arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels arrs: for (i = 1; i &lt; arglm1; i++) &#123; // eslint-disable-line no-labels arr = arguments[i] for (k in arr) &#123; if (cb(arr[k], arr1[k1]) === 0) &#123; if (i === arglm2) &#123; retArr[k1] = arr1[k1] &#125; // If the innermost loop always leads at least once to an equal value, // continue the loop until done continue arrs // eslint-disable-line no-labels &#125; &#125; // If it reaches here, it wasn't found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_udiff_uassoc in JavaScript","date":"2016-05-11T20:27:49.774Z","updated":"2016-05-11T20:27:49.774Z","comments":true,"path":"php/array/array_udiff_uassoc/index.html","permalink":"http://locutus.io/php/array/array_udiff_uassoc/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647module.exports = function array_udiff_uassoc (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_udiff_uassoc/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: var $array1 = &#123;a: 'green', b: 'brown', c: 'blue', 0: 'red'&#125; // example 1: var $array2 = &#123;a: 'GREEN', B: 'brown', 0: 'yellow', 1: 'red'&#125; // example 1: array_udiff_uassoc($array1, $array2, function (f_string1, f_string2)&#123;var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 &gt; string2) return 1; if (string1 === string2) return 0; return -1;&#125;, function (f_string1, f_string2)&#123;var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 &gt; string2) return 1; if (string1 === string2) return 0; return -1;&#125;) // returns 1: &#123;0: 'red', c: 'blue'&#125; var retArr = &#123;&#125; var arglm1 = arguments.length - 1 var arglm2 = arglm1 - 1 var cb = arguments[arglm1] var cb0 = arguments[arglm2] var k1 = '' var i = 1 var k = '' var arr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) cb = (typeof cb === 'string') ? $global[cb] : (Object.prototype.toString.call(cb) === '[object Array]') ? $global[cb[0]][cb[1]] : cb cb0 = (typeof cb0 === 'string') ? $global[cb0] : (Object.prototype.toString.call(cb0) === '[object Array]') ? $global[cb0[0]][cb0[1]] : cb0 arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels for (i = 1; i &lt; arglm2; i++) &#123; arr = arguments[i] for (k in arr) &#123; if (cb0(arr[k], arr1[k1]) === 0 &amp;&amp; cb(k, k1) === 0) &#123; // If it reaches here, it was found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; retArr[k1] = arr1[k1] &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_udiff_assoc in JavaScript","date":"2016-05-11T20:27:49.766Z","updated":"2016-05-11T20:27:49.766Z","comments":true,"path":"php/array/array_udiff_assoc/index.html","permalink":"http://locutus.io/php/array/array_udiff_assoc/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637module.exports = function array_udiff_assoc (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_udiff_assoc/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: array_udiff_assoc(&#123;0: 'kevin', 1: 'van', 2: 'Zonneveld'&#125;, &#123;0: 'Kevin', 4: 'van', 5: 'Zonneveld'&#125;, function (f_string1, f_string2)&#123;var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 &gt; string2) return 1; if (string1 === string2) return 0; return -1;&#125;) // returns 1: &#123;1: 'van', 2: 'Zonneveld'&#125; var retArr = &#123;&#125; var arglm1 = arguments.length - 1 var cb = arguments[arglm1] var arr = &#123;&#125; var i = 1 var k1 = '' var k = '' var $global = (typeof window !== 'undefined' ? window : GLOBAL) cb = (typeof cb === 'string') ? $global[cb] : (Object.prototype.toString.call(cb) === '[object Array]') ? $global[cb[0]][cb[1]] : cb arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels for (i = 1; i &lt; arglm1; i++) &#123; arr = arguments[i] for (k in arr) &#123; if (cb(arr[k], arr1[k1]) === 0 &amp;&amp; k === k1) &#123; // If it reaches here, it was found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; retArr[k1] = arr1[k1] &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_udiff in JavaScript","date":"2016-05-11T20:27:49.774Z","updated":"2016-05-11T20:27:49.774Z","comments":true,"path":"php/array/array_udiff/index.html","permalink":"http://locutus.io/php/array/array_udiff/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839module.exports = function array_udiff (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_udiff/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: var $array1 = &#123;a: 'green', b: 'brown', c: 'blue', 0: 'red'&#125; // example 1: var $array2 = &#123;a: 'GREEN', B: 'brown', 0: 'yellow', 1: 'red'&#125; // example 1: array_udiff($array1, $array2, function (f_string1, f_string2)&#123;var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 &gt; string2) return 1; if (string1 === string2) return 0; return -1;&#125;) // returns 1: &#123;c: 'blue'&#125; var retArr = &#123;&#125; var arglm1 = arguments.length - 1 var cb = arguments[arglm1] var arr = '' var i = 1 var k1 = '' var k = '' var $global = (typeof window !== 'undefined' ? window : GLOBAL) cb = (typeof cb === 'string') ? $global[cb] : (Object.prototype.toString.call(cb) === '[object Array]') ? $global[cb[0]][cb[1]] : cb arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels for (i = 1; i &lt; arglm1; i++) &#123; // eslint-disable-line no-labels arr = arguments[i] for (k in arr) &#123; if (cb(arr[k], arr1[k1]) === 0) &#123; // If it reaches here, it was found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; retArr[k1] = arr1[k1] &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_sum in JavaScript","date":"2016-05-11T20:27:49.766Z","updated":"2016-05-11T20:27:49.766Z","comments":true,"path":"php/array/array_sum/index.html","permalink":"http://locutus.io/php/array/array_sum/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031module.exports = function array_sum (array) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_sum/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Nate // bugfixed by: Gilbert // improved by: David Pilia (http://www.beteck.it/) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: array_sum([4, 9, 182.6]) // returns 1: 195.6 // example 2: var $total = [] // example 2: var $index = 0.1 // example 2: for (var $y = 0; $y &lt; 12; $y++)&#123; $total[$y] = $y + $index &#125; // example 2: array_sum($total) // returns 2: 67.2 var key var sum = 0 // input sanitation if (typeof array !== 'object') &#123; return null &#125; for (key in array) &#123; if (!isNaN(parseFloat(array[key]))) &#123; sum += parseFloat(array[key]) &#125; &#125; return sum&#125;","raw":null,"content":null},{"title":"PHP's array_splice in JavaScript","date":"2016-05-11T20:27:49.766Z","updated":"2016-05-11T20:27:49.766Z","comments":true,"path":"php/array/array_splice/index.html","permalink":"http://locutus.io/php/array/array_splice/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117module.exports = function array_splice (arr, offst, lgth, replacement) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_splice/ // original by: Brett Zamir (http://brett-zamir.me) // input by: Theriault (https://github.com/Theriault) // note 1: Order does get shifted in associative array input with numeric indices, // note 1: since PHP behavior doesn't preserve keys, but I understand order is // note 1: not reliable anyways // note 1: Note also that IE retains information about property position even // note 1: after being supposedly deleted, so use of this function may produce // note 1: unexpected results in IE if you later attempt to add back properties // note 1: with the same keys that had been deleted // example 1: var $input = &#123;4: \"red\", 'abc': \"green\", 2: \"blue\", 'dud': \"yellow\"&#125; // example 1: array_splice($input, 2) // returns 1: &#123;4: \"red\", 'abc': \"green\"&#125; // example 2: var $input = [\"red\", \"green\", \"blue\", \"yellow\"] // example 2: array_splice($input, 3, 0, \"purple\") // returns 2: [] // example 3: var $input = [\"red\", \"green\", \"blue\", \"yellow\"] // example 3: array_splice($input, -1, 1, [\"black\", \"maroon\"]) // returns 3: [\"yellow\"] // test: skip-1 var isInt = require('../var/is_int') var _checkToUpIndices = function (arr, ct, key) &#123; // Deal with situation, e.g., if encounter index 4 and try // to set it to 0, but 0 exists later in loop (need to // increment all subsequent (skipping current key, // since we need its value below) until find unused) if (arr[ct] !== undefined) &#123; var tmp = ct ct += 1 if (ct === key) &#123; ct += 1 &#125; ct = _checkToUpIndices(arr, ct, key) arr[ct] = arr[tmp] delete arr[tmp] &#125; return ct &#125; if (replacement &amp;&amp; typeof replacement !== 'object') &#123; replacement = [replacement] &#125; if (lgth === undefined) &#123; lgth = offst &gt;= 0 ? arr.length - offst : -offst &#125; else if (lgth &lt; 0) &#123; lgth = (offst &gt;= 0 ? arr.length - offst : -offst) + lgth &#125; if (Object.prototype.toString.call(arr) !== '[object Array]') &#123; /* if (arr.length !== undefined) &#123; // Deal with array-like objects as input delete arr.length; &#125;*/ var lgt = 0 var ct = -1 var rmvd = [] var rmvdObj = &#123;&#125; var replCt = -1 var intCt = -1 var returnArr = true var rmvdCt = 0 var rmvdLngth = 0 var key = '' // rmvdObj.length = 0; for (key in arr) &#123; // Can do arr.__count__ in some browsers lgt += 1 &#125; offst = (offst &gt;= 0) ? offst : lgt + offst for (key in arr) &#123; ct += 1 if (ct &lt; offst) &#123; if (isInt(key)) &#123; intCt += 1 if (parseInt(key, 10) === intCt) &#123; // Key is already numbered ok, so don't need to change key for value continue &#125; // Deal with situation, e.g., _checkToUpIndices(arr, intCt, key) // if encounter index 4 and try to set it to 0, but 0 exists later in loop arr[intCt] = arr[key] delete arr[key] &#125; continue &#125; if (returnArr &amp;&amp; isInt(key)) &#123; rmvd.push(arr[key]) // PHP starts over here too rmvdObj[rmvdCt++] = arr[key] &#125; else &#123; rmvdObj[key] = arr[key] returnArr = false &#125; rmvdLngth += 1 // rmvdObj.length += 1; if (replacement &amp;&amp; replacement[++replCt]) &#123; arr[key] = replacement[replCt] &#125; else &#123; delete arr[key] &#125; &#125; // Make (back) into an array-like object // arr.length = lgt - rmvdLngth + (replacement ? replacement.length : 0); return returnArr ? rmvd : rmvdObj &#125; if (replacement) &#123; replacement.unshift(offst, lgth) return Array.prototype.splice.apply(arr, replacement) &#125; return arr.splice(offst, lgth)&#125;","raw":null,"content":null},{"title":"PHP's array_slice in JavaScript","date":"2016-05-11T20:27:49.766Z","updated":"2016-05-11T20:27:49.766Z","comments":true,"path":"php/array/array_slice/index.html","permalink":"http://locutus.io/php/array/array_slice/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970module.exports = function array_slice (arr, offst, lgth, preserveKeys) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_slice/ // original by: Brett Zamir (http://brett-zamir.me) // input by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // note 1: Relies on is_int because !isNaN accepts floats // example 1: array_slice([\"a\", \"b\", \"c\", \"d\", \"e\"], 2, -1) // returns 1: [ 'c', 'd' ] // example 2: array_slice([\"a\", \"b\", \"c\", \"d\", \"e\"], 2, -1, true) // returns 2: &#123;2: 'c', 3: 'd'&#125; var isInt = require('../var/is_int') /* if ('callee' in arr &amp;&amp; 'length' in arr) &#123; arr = Array.prototype.slice.call(arr); &#125; */ var key = '' if (Object.prototype.toString.call(arr) !== '[object Array]' || (preserveKeys &amp;&amp; offst !== 0)) &#123; // Assoc. array as input or if required as output var lgt = 0 var newAssoc = &#123;&#125; for (key in arr) &#123; lgt += 1 newAssoc[key] = arr[key] &#125; arr = newAssoc offst = (offst &lt; 0) ? lgt + offst : offst lgth = lgth === undefined ? lgt : (lgth &lt; 0) ? lgt + lgth - offst : lgth var assoc = &#123;&#125; var start = false var it = -1 var arrlgth = 0 var noPkIdx = 0 for (key in arr) &#123; ++it if (arrlgth &gt;= lgth) &#123; break &#125; if (it === offst) &#123; start = true &#125; if (!start) &#123; continue &#125;++arrlgth if (isInt(key) &amp;&amp; !preserveKeys) &#123; assoc[noPkIdx++] = arr[key] &#125; else &#123; assoc[key] = arr[key] &#125; &#125; // Make as array-like object (though length will not be dynamic) // assoc.length = arrlgth; return assoc &#125; if (lgth === undefined) &#123; return arr.slice(offst) &#125; else if (lgth &gt;= 0) &#123; return arr.slice(offst, offst + lgth) &#125; else &#123; return arr.slice(offst, lgth) &#125;&#125;","raw":null,"content":null},{"title":"PHP's array_shift in JavaScript","date":"2016-05-11T20:27:49.766Z","updated":"2016-05-11T20:27:49.766Z","comments":true,"path":"php/array/array_shift/index.html","permalink":"http://locutus.io/php/array/array_shift/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334module.exports = function array_shift (inputArr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_shift/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Martijn Wieringa // note 1: Currently does not handle objects // example 1: array_shift(['Kevin', 'van', 'Zonneveld']) // returns 1: 'Kevin' var _checkToUpIndices = function (arr, ct, key) &#123; // Deal with situation, e.g., if encounter index 4 and try // to set it to 0, but 0 exists later in loop (need to // increment all subsequent (skipping current key, since // we need its value below) until find unused) if (arr[ct] !== undefined) &#123; var tmp = ct ct += 1 if (ct === key) &#123; ct += 1 &#125; ct = _checkToUpIndices(arr, ct, key) arr[ct] = arr[tmp] delete arr[tmp] &#125; return ct &#125; if (inputArr.length === 0) &#123; return null &#125; if (inputArr.length &gt; 0) &#123; return inputArr.shift() &#125;&#125;","raw":null,"content":null},{"title":"PHP's array_search in JavaScript","date":"2016-05-11T20:27:49.766Z","updated":"2016-05-11T20:27:49.766Z","comments":true,"path":"php/array/array_search/index.html","permalink":"http://locutus.io/php/array/array_search/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142module.exports = function array_search (needle, haystack, argStrict) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_search/ // original by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // test: skip-all // example 1: array_search('zonneveld', &#123;firstname: 'kevin', middle: 'van', surname: 'zonneveld'&#125;) // returns 1: 'surname' var strict = !!argStrict var key = '' if (typeof needle === 'object' &amp;&amp; needle.exec) &#123; // Duck-type for RegExp if (!strict) &#123; // Let's consider case sensitive searches as strict var flags = 'i' + (needle.global ? 'g' : '') + (needle.multiline ? 'm' : '') + // sticky is FF only (needle.sticky ? 'y' : '') needle = new RegExp(needle.source, flags) &#125; for (key in haystack) &#123; if (haystack.hasOwnProperty(key)) &#123; if (needle.test(haystack[key])) &#123; return key &#125; &#125; &#125; return false &#125; for (key in haystack) &#123; if (haystack.hasOwnProperty(key)) &#123; if ((strict &amp;&amp; haystack[key] === needle) || (!strict &amp;&amp; haystack[key] === needle)) &#123; return key &#125; &#125; &#125; return false&#125;","raw":null,"content":null},{"title":"PHP's array_reverse in JavaScript","date":"2016-05-11T20:27:49.766Z","updated":"2016-05-11T20:27:49.766Z","comments":true,"path":"php/array/array_reverse/index.html","permalink":"http://locutus.io/php/array/array_reverse/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637module.exports = function array_reverse (array, preserveKeys) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_reverse/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Karol Kowalski // example 1: array_reverse( [ 'php', '4.0', ['green', 'red'] ], true) // returns 1: &#123; 2: ['green', 'red'], 1: '4.0', 0: 'php'&#125; var isArray = Object.prototype.toString.call(array) === '[object Array]' var tmpArr = preserveKeys ? &#123;&#125; : [] var key if (isArray &amp;&amp; !preserveKeys) &#123; return array.slice(0).reverse() &#125; if (preserveKeys) &#123; var keys = [] for (key in array) &#123; keys.push(key) &#125; var i = keys.length while (i--) &#123; key = keys[i] // @todo: don't rely on browsers keeping keys in insertion order // it's implementation specific // eg. the result will differ from expected in Google Chrome tmpArr[key] = array[key] &#125; &#125; else &#123; for (key in array) &#123; tmpArr.unshift(array[key]) &#125; &#125; return tmpArr&#125;","raw":null,"content":null},{"title":"PHP's array_replace_recursive in JavaScript","date":"2016-05-11T20:27:49.754Z","updated":"2016-05-11T20:27:49.754Z","comments":true,"path":"php/array/array_replace_recursive/index.html","permalink":"http://locutus.io/php/array/array_replace_recursive/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142module.exports = function array_replace_recursive (arr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_replace_recursive/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: array_replace_recursive(&#123;'citrus' : ['orange'], 'berries' : ['blackberry', 'raspberry']&#125;, &#123;'citrus' : ['pineapple'], 'berries' : ['blueberry']&#125;) // returns 1: &#123;citrus : ['pineapple'], berries : ['blueberry', 'raspberry']&#125; var i = 0 var p = '' var argl = arguments.length var retObj if (argl &lt; 2) &#123; throw new Error('There should be at least 2 arguments passed to array_replace_recursive()') &#125; // Although docs state that the arguments are passed in by reference, // it seems they are not altered, but rather the copy that is returned // So we make a copy here, instead of acting on arr itself if (Object.prototype.toString.call(arr) === '[object Array]') &#123; retObj = [] for (p in arr) &#123; retObj.push(arr[p]) &#125; &#125; else &#123; retObj = &#123;&#125; for (p in arr) &#123; retObj[p] = arr[p] &#125; &#125; for (i = 1; i &lt; argl; i++) &#123; for (p in arguments[i]) &#123; if (retObj[p] &amp;&amp; typeof retObj[p] === 'object') &#123; retObj[p] = array_replace_recursive(retObj[p], arguments[i][p]) &#125; else &#123; retObj[p] = arguments[i][p] &#125; &#125; &#125; return retObj&#125;","raw":null,"content":null},{"title":"PHP's array_replace in JavaScript","date":"2016-05-11T20:27:49.766Z","updated":"2016-05-11T20:27:49.766Z","comments":true,"path":"php/array/array_replace/index.html","permalink":"http://locutus.io/php/array/array_replace/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function array_replace (arr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_replace/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: array_replace([\"orange\", \"banana\", \"apple\", \"raspberry\"], &#123;0 : \"pineapple\", 4 : \"cherry\"&#125;, &#123;0:\"grape\"&#125;) // returns 1: &#123;0: 'grape', 1: 'banana', 2: 'apple', 3: 'raspberry', 4: 'cherry'&#125; var retObj = &#123;&#125; var i = 0 var p = '' var argl = arguments.length if (argl &lt; 2) &#123; throw new Error('There should be at least 2 arguments passed to array_replace()') &#125; // Although docs state that the arguments are passed in by reference, // it seems they are not altered, but rather the copy that is returned // (just guessing), so we make a copy here, instead of acting on arr itself for (p in arr) &#123; retObj[p] = arr[p] &#125; for (i = 1; i &lt; argl; i++) &#123; for (p in arguments[i]) &#123; retObj[p] = arguments[i][p] &#125; &#125; return retObj&#125;","raw":null,"content":null},{"title":"PHP's array_reduce in JavaScript","date":"2016-05-11T20:27:49.754Z","updated":"2016-05-11T20:27:49.754Z","comments":true,"path":"php/array/array_reduce/index.html","permalink":"http://locutus.io/php/array/array_reduce/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425module.exports = function array_reduce (aInput, callback) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_reduce/ // original by: Alfonso Jimenez (http://www.alfonsojimenez.com) // note 1: Takes a function as an argument, not a function's name // example 1: array_reduce([1, 2, 3, 4, 5], function (v, w)&#123;v += w;return v;&#125;) // returns 1: 15 var lon = aInput.length var res = 0 var i = 0 var tmp = [] for (i = 0; i &lt; lon; i += 2) &#123; tmp[0] = aInput[i] if (aInput[(i + 1)]) &#123; tmp[1] = aInput[(i + 1)] &#125; else &#123; tmp[1] = 0 &#125; res += callback.apply(null, tmp) tmp = [] &#125; return res&#125;","raw":null,"content":null},{"title":"PHP's array_rand in JavaScript","date":"2016-05-11T20:27:49.754Z","updated":"2016-05-11T20:27:49.754Z","comments":true,"path":"php/array/array_rand/index.html","permalink":"http://locutus.io/php/array/array_rand/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738module.exports = function array_rand (input, numReq) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_rand/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // example 1: array_rand( ['Kevin'], 1 ) // returns 1: 0 var indexes = [] var ticks = numReq || 1 var checkDuplicate = function (input, value) &#123; var exist = false var index = 0 var il = input.length while (index &lt; il) &#123; if (input[index] === value) &#123; exist = true break &#125; index++ &#125; return exist &#125; if (Object.prototype.toString.call(input) === '[object Array]' &amp;&amp; ticks &lt;= input.length) &#123; while (true) &#123; var rand = Math.floor((Math.random() * input.length)) if (indexes.length === ticks) &#123; break &#125; if (!checkDuplicate(indexes, rand)) &#123; indexes.push(rand) &#125; &#125; &#125; else &#123; indexes = null &#125; return ((ticks === 1) ? indexes[0] : indexes)&#125;","raw":null,"content":null},{"title":"PHP's array_push in JavaScript","date":"2016-05-11T20:27:49.754Z","updated":"2016-05-11T20:27:49.754Z","comments":true,"path":"php/array/array_push/index.html","permalink":"http://locutus.io/php/array/array_push/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344module.exports = function array_push (inputArr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_push/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: Note also that IE retains information about property position even // note 1: after being supposedly deleted, so if you delete properties and then // note 1: add back properties with the same keys (including numeric) that had // note 1: been deleted, the order will be as before; thus, this function is not // note 1: really recommended with associative arrays (objects) in IE environments // example 1: array_push(['kevin','van'], 'zonneveld') // returns 1: 3 var i = 0 var pr = '' var argv = arguments var argc = argv.length var allDigits = /^\\d$/ var size = 0 var highestIdx = 0 var len = 0 if (inputArr.hasOwnProperty('length')) &#123; for (i = 1; i &lt; argc; i++) &#123; inputArr[inputArr.length] = argv[i] &#125; return inputArr.length &#125; // Associative (object) for (pr in inputArr) &#123; if (inputArr.hasOwnProperty(pr)) &#123; ++len if (pr.search(allDigits) !== -1) &#123; size = parseInt(pr, 10) highestIdx = size &gt; highestIdx ? size : highestIdx &#125; &#125; &#125; for (i = 1; i &lt; argc; i++) &#123; inputArr[++highestIdx] = argv[i] &#125; return len + i - 1&#125;","raw":null,"content":null},{"title":"PHP's array_product in JavaScript","date":"2016-05-11T20:27:49.754Z","updated":"2016-05-11T20:27:49.754Z","comments":true,"path":"php/array/array_product/index.html","permalink":"http://locutus.io/php/array/array_product/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122module.exports = function array_product (input) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_product/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // example 1: array_product([ 2, 4, 6, 8 ]) // returns 1: 384 var idx = 0 var product = 1 var il = 0 if (Object.prototype.toString.call(input) !== '[object Array]') &#123; return null &#125; il = input.length while (idx &lt; il) &#123; product *= (!isNaN(input[idx]) ? input[idx] : 0) idx++ &#125; return product&#125;","raw":null,"content":null},{"title":"PHP's array_pop in JavaScript","date":"2016-05-11T20:27:49.754Z","updated":"2016-05-11T20:27:49.754Z","comments":true,"path":"php/array/array_pop/index.html","permalink":"http://locutus.io/php/array/array_pop/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647module.exports = function array_pop (inputArr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_pop/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // input by: Theriault (https://github.com/Theriault) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // note 1: While IE (and other browsers) support iterating an object's // note 1: own properties in order, if one attempts to add back properties // note 1: in IE, they may end up in their former position due to their position // note 1: being retained. So use of this function with \"associative arrays\" // note 1: (objects) may lead to unexpected behavior in an IE environment if // note 1: you add back properties with the same keys that you removed // example 1: array_pop([0,1,2]) // returns 1: 2 // example 2: var $data = &#123;firstName: 'Kevin', surName: 'van Zonneveld'&#125; // example 2: var $lastElem = array_pop($data) // example 2: var $result = $data // returns 2: &#123;firstName: 'Kevin'&#125; var key = '' var lastKey = '' if (inputArr.hasOwnProperty('length')) &#123; // Indexed if (!inputArr.length) &#123; // Done popping, are we? return null &#125; return inputArr.pop() &#125; else &#123; // Associative for (key in inputArr) &#123; if (inputArr.hasOwnProperty(key)) &#123; lastKey = key &#125; &#125; if (lastKey) &#123; var tmp = inputArr[lastKey] delete (inputArr[lastKey]) return tmp &#125; else &#123; return null &#125; &#125;&#125;","raw":null,"content":null},{"title":"PHP's array_pad in JavaScript","date":"2016-05-11T20:27:49.754Z","updated":"2016-05-11T20:27:49.754Z","comments":true,"path":"php/array/array_pad/index.html","permalink":"http://locutus.io/php/array/array_pad/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334module.exports = function array_pad (input, padSize, padValue) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_pad/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // example 1: array_pad([ 7, 8, 9 ], 2, 'a') // returns 1: [ 7, 8, 9] // example 2: array_pad([ 7, 8, 9 ], 5, 'a') // returns 2: [ 7, 8, 9, 'a', 'a'] // example 3: array_pad([ 7, 8, 9 ], 5, 2) // returns 3: [ 7, 8, 9, 2, 2] // example 4: array_pad([ 7, 8, 9 ], -5, 'a') // returns 4: [ 'a', 'a', 7, 8, 9 ] var pad = [] var newArray = [] var newLength var diff = 0 var i = 0 if (Object.prototype.toString.call(input) === '[object Array]' &amp;&amp; !isNaN(padSize)) &#123; newLength = ((padSize &lt; 0) ? (padSize * -1) : padSize) diff = newLength - input.length if (diff &gt; 0) &#123; for (i = 0; i &lt; diff; i++) &#123; newArray[i] = padValue &#125; pad = ((padSize &lt; 0) ? newArray.concat(input) : input.concat(newArray)) &#125; else &#123; pad = input &#125; &#125; return pad&#125;","raw":null,"content":null},{"title":"PHP's array_multisort in JavaScript","date":"2016-05-11T20:27:49.754Z","updated":"2016-05-11T20:27:49.754Z","comments":true,"path":"php/array/array_multisort/index.html","permalink":"http://locutus.io/php/array/array_multisort/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302module.exports = function array_multisort (arr) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_multisort/ // original by: Theriault (https://github.com/Theriault) // example 1: array_multisort([1, 2, 1, 2, 1, 2], [1, 2, 3, 4, 5, 6]) // returns 1: true // example 2: var $characters = &#123;A: 'Edward', B: 'Locke', C: 'Sabin', D: 'Terra', E: 'Edward'&#125; // example 2: var $jobs = &#123;A: 'Warrior', B: 'Thief', C: 'Monk', D: 'Mage', E: 'Knight'&#125; // example 2: array_multisort($characters, 'SORT_DESC', 'SORT_STRING', $jobs, 'SORT_ASC', 'SORT_STRING') // returns 2: true // example 3: var $lastnames = [ 'Carter','Adams','Monroe','Tyler','Madison','Kennedy','Adams'] // example 3: var $firstnames = ['James', 'John' ,'James', 'John', 'James', 'John', 'John'] // example 3: var $president = [ 39, 6, 5, 10, 4, 35, 2 ] // example 3: array_multisort($firstnames, 'SORT_DESC', 'SORT_STRING', $lastnames, 'SORT_ASC', 'SORT_STRING', $president, 'SORT_NUMERIC') // returns 3: true // note 1: flags: Translation table for sort arguments. // note 1: Each argument turns on certain bits in the flag byte through addition. // note 1: bits: HGFE DCBA // note 1: args: Holds pointer to arguments for reassignment var g var i var j var k var l var sal var vkey var elIndex var lastSorts var tmpArray var zlast var sortFlag = [0] var thingsToSort = [] var nLastSort = [] var lastSort = [] // possibly redundant var args = arguments var flags = &#123; 'SORT_REGULAR': 16, 'SORT_NUMERIC': 17, 'SORT_STRING': 18, 'SORT_ASC': 32, 'SORT_DESC': 40 &#125; var sortDuplicator = function (a, b) &#123; return nLastSort.shift() &#125; var sortFunctions = [ [ function (a, b) &#123; lastSort.push(a &gt; b ? 1 : (a &lt; b ? -1 : 0)) return a &gt; b ? 1 : (a &lt; b ? -1 : 0) &#125;, function (a, b) &#123; lastSort.push(b &gt; a ? 1 : (b &lt; a ? -1 : 0)) return b &gt; a ? 1 : (b &lt; a ? -1 : 0) &#125; ], [ function (a, b) &#123; lastSort.push(a - b) return a - b &#125;, function (a, b) &#123; lastSort.push(b - a) return b - a &#125; ], [ function (a, b) &#123; lastSort.push((a + '') &gt; (b + '') ? 1 : ((a + '') &lt; (b + '') ? -1 : 0)) return (a + '') &gt; (b + '') ? 1 : ((a + '') &lt; (b + '') ? -1 : 0) &#125;, function (a, b) &#123; lastSort.push((b + '') &gt; (a + '') ? 1 : ((b + '') &lt; (a + '') ? -1 : 0)) return (b + '') &gt; (a + '') ? 1 : ((b + '') &lt; (a + '') ? -1 : 0) &#125; ] ] var sortArrs = [ [] ] var sortKeys = [ [] ] // Store first argument into sortArrs and sortKeys if an Object. // First Argument should be either a Javascript Array or an Object, // otherwise function would return FALSE like in PHP if (Object.prototype.toString.call(arr) === '[object Array]') &#123; sortArrs[0] = arr &#125; else if (arr &amp;&amp; typeof arr === 'object') &#123; for (i in arr) &#123; if (arr.hasOwnProperty(i)) &#123; sortKeys[0].push(i) sortArrs[0].push(arr[i]) &#125; &#125; &#125; else &#123; return false &#125; // arrMainLength: Holds the length of the first array. // All other arrays must be of equal length, otherwise function would return FALSE like in PHP // sortComponents: Holds 2 indexes per every section of the array // that can be sorted. As this is the start, the whole array can be sorted. var arrMainLength = sortArrs[0].length var sortComponents = [0, arrMainLength] // Loop through all other arguments, checking lengths and sort flags // of arrays and adding them to the above variables. var argl = arguments.length for (j = 1; j &lt; argl; j++) &#123; if (Object.prototype.toString.call(arguments[j]) === '[object Array]') &#123; sortArrs[j] = arguments[j] sortFlag[j] = 0 if (arguments[j].length !== arrMainLength) &#123; return false &#125; &#125; else if (arguments[j] &amp;&amp; typeof arguments[j] === 'object') &#123; sortKeys[j] = [] sortArrs[j] = [] sortFlag[j] = 0 for (i in arguments[j]) &#123; if (arguments[j].hasOwnProperty(i)) &#123; sortKeys[j].push(i) sortArrs[j].push(arguments[j][i]) &#125; &#125; if (sortArrs[j].length !== arrMainLength) &#123; return false &#125; &#125; else if (typeof arguments[j] === 'string') &#123; var lFlag = sortFlag.pop() // Keep extra parentheses around latter flags check // to avoid minimization leading to CDATA closer if (typeof flags[arguments[j]] === 'undefined' || ((((flags[arguments[j]]) &gt;&gt;&gt; 4) &amp; (lFlag &gt;&gt;&gt; 4)) &gt; 0)) &#123; return false &#125; sortFlag.push(lFlag + flags[arguments[j]]) &#125; else &#123; return false &#125; &#125; for (i = 0; i !== arrMainLength; i++) &#123; thingsToSort.push(true) &#125; // Sort all the arrays.... for (i in sortArrs) &#123; if (sortArrs.hasOwnProperty(i)) &#123; lastSorts = [] tmpArray = [] elIndex = 0 nLastSort = [] lastSort = [] // If there are no sortComponents, then no more sorting is neeeded. // Copy the array back to the argument. if (sortComponents.length === 0) &#123; if (Object.prototype.toString.call(arguments[i]) === '[object Array]') &#123; args[i] = sortArrs[i] &#125; else &#123; for (k in arguments[i]) &#123; if (arguments[i].hasOwnProperty(k)) &#123; delete arguments[i][k] &#125; &#125; sal = sortArrs[i].length for (j = 0, vkey = 0; j &lt; sal; j++) &#123; vkey = sortKeys[i][j] args[i][vkey] = sortArrs[i][j] &#125; &#125; delete sortArrs[i] delete sortKeys[i] continue &#125; // Sort function for sorting. Either sorts asc or desc, regular/string or numeric. var sFunction = sortFunctions[(sortFlag[i] &amp; 3)][((sortFlag[i] &amp; 8) &gt; 0) ? 1 : 0] // Sort current array. for (l = 0; l !== sortComponents.length; l += 2) &#123; tmpArray = sortArrs[i].slice(sortComponents[l], sortComponents[l + 1] + 1) tmpArray.sort(sFunction) // Is there a better way to copy an array in Javascript? lastSorts[l] = [].concat(lastSort) elIndex = sortComponents[l] for (g in tmpArray) &#123; if (tmpArray.hasOwnProperty(g)) &#123; sortArrs[i][elIndex] = tmpArray[g] elIndex++ &#125; &#125; &#125; // Duplicate the sorting of the current array on future arrays. sFunction = sortDuplicator for (j in sortArrs) &#123; if (sortArrs.hasOwnProperty(j)) &#123; if (sortArrs[j] === sortArrs[i]) &#123; continue &#125; for (l = 0; l !== sortComponents.length; l += 2) &#123; tmpArray = sortArrs[j].slice(sortComponents[l], sortComponents[l + 1] + 1) // alert(l + ':' + nLastSort); nLastSort = [].concat(lastSorts[l]) tmpArray.sort(sFunction) elIndex = sortComponents[l] for (g in tmpArray) &#123; if (tmpArray.hasOwnProperty(g)) &#123; sortArrs[j][elIndex] = tmpArray[g] elIndex++ &#125; &#125; &#125; &#125; &#125; // Duplicate the sorting of the current array on array keys for (j in sortKeys) &#123; if (sortKeys.hasOwnProperty(j)) &#123; for (l = 0; l !== sortComponents.length; l += 2) &#123; tmpArray = sortKeys[j].slice(sortComponents[l], sortComponents[l + 1] + 1) nLastSort = [].concat(lastSorts[l]) tmpArray.sort(sFunction) elIndex = sortComponents[l] for (g in tmpArray) &#123; if (tmpArray.hasOwnProperty(g)) &#123; sortKeys[j][elIndex] = tmpArray[g] elIndex++ &#125; &#125; &#125; &#125; &#125; // Generate the next sortComponents zlast = null sortComponents = [] for (j in sortArrs[i]) &#123; if (sortArrs[i].hasOwnProperty(j)) &#123; if (!thingsToSort[j]) &#123; if ((sortComponents.length &amp; 1)) &#123; sortComponents.push(j - 1) &#125; zlast = null continue &#125; if (!(sortComponents.length &amp; 1)) &#123; if (zlast !== null) &#123; if (sortArrs[i][j] === zlast) &#123; sortComponents.push(j - 1) &#125; else &#123; thingsToSort[j] = false &#125; &#125; zlast = sortArrs[i][j] &#125; else &#123; if (sortArrs[i][j] !== zlast) &#123; sortComponents.push(j - 1) zlast = sortArrs[i][j] &#125; &#125; &#125; &#125; if (sortComponents.length &amp; 1) &#123; sortComponents.push(j) &#125; if (Object.prototype.toString.call(arguments[i]) === '[object Array]') &#123; args[i] = sortArrs[i] &#125; else &#123; for (j in arguments[i]) &#123; if (arguments[i].hasOwnProperty(j)) &#123; delete arguments[i][j] &#125; &#125; sal = sortArrs[i].length for (j = 0, vkey = 0; j &lt; sal; j++) &#123; vkey = sortKeys[i][j] args[i][vkey] = sortArrs[i][j] &#125; &#125; delete sortArrs[i] delete sortKeys[i] &#125; &#125; return true&#125;","raw":null,"content":null},{"title":"PHP's array_merge_recursive in JavaScript","date":"2016-05-11T20:27:49.738Z","updated":"2016-05-11T20:27:49.738Z","comments":true,"path":"php/array/array_merge_recursive/index.html","permalink":"http://locutus.io/php/array/array_merge_recursive/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435module.exports = function array_merge_recursive (arr1, arr2) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_merge_recursive/ // original by: Subhasis Deb // input by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Kevin van Zonneveld (http://kvz.io) // example 1: var $arr1 = &#123;'color': &#123;'favorite': 'red'&#125;, 0: 5&#125; // example 1: var $arr2 = &#123;0: 10, 'color': &#123;'favorite': 'green', 0: 'blue'&#125;&#125; // example 1: array_merge_recursive($arr1, $arr2) // returns 1: &#123;'color': &#123;'favorite': &#123;0: 'red', 1: 'green'&#125;, 0: 'blue'&#125;, 1: 5, 1: 10&#125; // test: skip-1 var arrayMerge = require('../array/array_merge') var idx = '' if (arr1 &amp;&amp; Object.prototype.toString.call(arr1) === '[object Array]' &amp;&amp; arr2 &amp;&amp; Object.prototype.toString.call(arr2) === '[object Array]') &#123; for (idx in arr2) &#123; arr1.push(arr2[idx]) &#125; &#125; else if ((arr1 &amp;&amp; (arr1 instanceof Object)) &amp;&amp; (arr2 &amp;&amp; (arr2 instanceof Object))) &#123; for (idx in arr2) &#123; if (idx in arr1) &#123; if (typeof arr1[idx] === 'object' &amp;&amp; typeof arr2 === 'object') &#123; arr1[idx] = arrayMerge(arr1[idx], arr2[idx]) &#125; else &#123; arr1[idx] = arr2[idx] &#125; &#125; else &#123; arr1[idx] = arr2[idx] &#125; &#125; &#125; return arr1&#125;","raw":null,"content":null},{"title":"PHP's array_merge in JavaScript","date":"2016-05-11T20:27:49.738Z","updated":"2016-05-11T20:27:49.738Z","comments":true,"path":"php/array/array_merge/index.html","permalink":"http://locutus.io/php/array/array_merge/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263module.exports = function array_merge () &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_merge/ // original by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Nate // bugfixed by: Brett Zamir (http://brett-zamir.me) // input by: josh // example 1: var $arr1 = &#123;\"color\": \"red\", 0: 2, 1: 4&#125; // example 1: var $arr2 = &#123;0: \"a\", 1: \"b\", \"color\": \"green\", \"shape\": \"trapezoid\", 2: 4&#125; // example 1: array_merge($arr1, $arr2) // returns 1: &#123;\"color\": \"green\", 0: 2, 1: 4, 2: \"a\", 3: \"b\", \"shape\": \"trapezoid\", 4: 4&#125; // example 2: var $arr1 = [] // example 2: var $arr2 = &#123;1: \"data\"&#125; // example 2: array_merge($arr1, $arr2) // returns 2: &#123;0: \"data\"&#125; var args = Array.prototype.slice.call(arguments) var argl = args.length var arg var retObj = &#123;&#125; var k = '' var argil = 0 var j = 0 var i = 0 var ct = 0 var toStr = Object.prototype.toString var retArr = true for (i = 0; i &lt; argl; i++) &#123; if (toStr.call(args[i]) !== '[object Array]') &#123; retArr = false break &#125; &#125; if (retArr) &#123; retArr = [] for (i = 0; i &lt; argl; i++) &#123; retArr = retArr.concat(args[i]) &#125; return retArr &#125; for (i = 0, ct = 0; i &lt; argl; i++) &#123; arg = args[i] if (toStr.call(arg) === '[object Array]') &#123; for (j = 0, argil = arg.length; j &lt; argil; j++) &#123; retObj[ct++] = arg[j] &#125; &#125; else &#123; for (k in arg) &#123; if (arg.hasOwnProperty(k)) &#123; if (parseInt(k, 10) + '' === k) &#123; retObj[ct++] = arg[k] &#125; else &#123; retObj[k] = arg[k] &#125; &#125; &#125; &#125; &#125; return retObj&#125;","raw":null,"content":null},{"title":"PHP's array_map in JavaScript","date":"2016-05-11T20:27:49.738Z","updated":"2016-05-11T20:27:49.738Z","comments":true,"path":"php/array/array_map/index.html","permalink":"http://locutus.io/php/array/array_map/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152module.exports = function array_map (callback) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_map/ // original by: Andrea Giammarchi (http://webreflection.blogspot.com) // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // input by: thekid // note 1: If the callback is a string (or object, if an array is supplied), // note 1: it can only work if the function name is in the global context // example 1: array_map( function (a)&#123;return (a * a * a)&#125;, [1, 2, 3, 4, 5] ) // returns 1: [ 1, 8, 27, 64, 125 ] var argc = arguments.length var argv = arguments var obj = null var cb = callback var j = argv[1].length var i = 0 var k = 1 var m = 0 var tmp = [] var tmpArr = [] var $global = (typeof window !== 'undefined' ? window : GLOBAL) while (i &lt; j) &#123; while (k &lt; argc) &#123; tmp[m++] = argv[k++][i] &#125; m = 0 k = 1 if (callback) &#123; if (typeof callback === 'string') &#123; cb = $global[callback] &#125; else if (typeof callback === 'object' &amp;&amp; callback.length) &#123; obj = typeof callback[0] === 'string' ? $global[callback[0]] : callback[0] if (typeof obj === 'undefined') &#123; throw new Error('Object not found: ' + callback[0]) &#125; cb = typeof callback[1] === 'string' ? obj[callback[1]] : callback[1] &#125; tmpArr[i++] = cb.apply(obj, tmp) &#125; else &#123; tmpArr[i++] = tmp &#125; tmp = [] &#125; return tmpArr&#125;","raw":null,"content":null},{"title":"PHP's array_keys in JavaScript","date":"2016-05-11T20:27:49.738Z","updated":"2016-05-11T20:27:49.738Z","comments":true,"path":"php/array/array_keys/index.html","permalink":"http://locutus.io/php/array/array_keys/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637module.exports = function array_keys (input, searchValue, argStrict) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_keys/ // original by: Kevin van Zonneveld (http://kvz.io) // input by: Brett Zamir (http://brett-zamir.me) // input by: P // bugfixed by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: Brett Zamir (http://brett-zamir.me) // improved by: jd // improved by: Brett Zamir (http://brett-zamir.me) // example 1: array_keys( &#123;firstname: 'Kevin', surname: 'van Zonneveld'&#125; ) // returns 1: [ 'firstname', 'surname' ] var search = typeof searchValue !== 'undefined' var tmpArr = [] var strict = !!argStrict var include = true var key = '' for (key in input) &#123; if (input.hasOwnProperty(key)) &#123; include = true if (search) &#123; if (strict &amp;&amp; input[key] !== searchValue) &#123; include = false &#125; else if (input[key] !== searchValue) &#123; include = false &#125; &#125; if (include) &#123; tmpArr[tmpArr.length] = key &#125; &#125; &#125; return tmpArr&#125;","raw":null,"content":null},{"title":"PHP's array_key_exists in JavaScript","date":"2016-05-11T20:27:49.738Z","updated":"2016-05-11T20:27:49.738Z","comments":true,"path":"php/array/array_key_exists/index.html","permalink":"http://locutus.io/php/array/array_key_exists/index.html","excerpt":"","keywords":null,"text":"12345678910111213module.exports = function array_key_exists (key, search) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_key_exists/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Felix Geisendoerfer (http://www.debuggable.com/felix) // example 1: array_key_exists('kevin', &#123;'kevin': 'van Zonneveld'&#125;) // returns 1: true if (!search || (search.constructor !== Array &amp;&amp; search.constructor !== Object)) &#123; return false &#125; return key in search&#125;","raw":null,"content":null},{"title":"PHP's array_intersect_ukey in JavaScript","date":"2016-05-11T20:27:49.738Z","updated":"2016-05-11T20:27:49.738Z","comments":true,"path":"php/array/array_intersect_ukey/index.html","permalink":"http://locutus.io/php/array/array_intersect_ukey/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152module.exports = function array_intersect_ukey (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_intersect_ukey/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: var $array1 = &#123;blue: 1, red: 2, green: 3, purple: 4&#125; // example 1: var $array2 = &#123;green: 5, blue: 6, yellow: 7, cyan: 8&#125; // example 1: array_intersect_ukey ($array1, $array2, function (key1, key2)&#123; return (key1 === key2 ? 0 : (key1 &gt; key2 ? 1 : -1)); &#125;) // returns 1: &#123;blue: 1, green: 3&#125; var retArr = &#123;&#125; var arglm1 = arguments.length - 1 var arglm2 = arglm1 - 1 var cb = arguments[arglm1] var cb0 = arguments[arglm2] var k1 = '' var i = 1 var k = '' var arr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) cb = (typeof cb === 'string') ? $global[cb] : (Object.prototype.toString.call(cb) === '[object Array]') ? $global[cb[0]][cb[1]] : cb cb0 = (typeof cb0 === 'string') ? $global[cb0] : (Object.prototype.toString.call(cb0) === '[object Array]') ? $global[cb0[0]][cb0[1]] : cb0 arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels arrs: for (i = 1; i &lt; arglm1; i++) &#123; // eslint-disable-line no-labels arr = arguments[i] for (k in arr) &#123; if (cb(k, k1) === 0) &#123; if (i === arglm2) &#123; retArr[k1] = arr1[k1] &#125; // If the innermost loop always leads at least once to an equal value, // continue the loop until done continue arrs // eslint-disable-line no-labels &#125; &#125; // If it reaches here, it wasn't found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_intersect_uassoc in JavaScript","date":"2016-05-11T20:27:49.738Z","updated":"2016-05-11T20:27:49.738Z","comments":true,"path":"php/array/array_intersect_uassoc/index.html","permalink":"http://locutus.io/php/array/array_intersect_uassoc/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152module.exports = function array_intersect_uassoc (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_intersect_uassoc/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: var $array1 = &#123;a: 'green', b: 'brown', c: 'blue', 0: 'red'&#125; // example 1: var $array2 = &#123;a: 'GREEN', B: 'brown', 0: 'yellow', 1: 'red'&#125; // example 1: array_intersect_uassoc($array1, $array2, function (f_string1, f_string2)&#123;var string1 = (f_string1+'').toLowerCase(); var string2 = (f_string2+'').toLowerCase(); if (string1 &gt; string2) return 1; if (string1 === string2) return 0; return -1;&#125;) // returns 1: &#123;b: 'brown'&#125; var retArr = &#123;&#125; var arglm1 = arguments.length - 1 var arglm2 = arglm1 - 1 var cb = arguments[arglm1] var cb0 = arguments[arglm2] var k1 = '' var i = 1 var k = '' var arr = &#123;&#125; var $global = (typeof window !== 'undefined' ? window : GLOBAL) cb = (typeof cb === 'string') ? $global[cb] : (Object.prototype.toString.call(cb) === '[object Array]') ? $global[cb[0]][cb[1]] : cb cb0 = (typeof cb0 === 'string') ? $global[cb0] : (Object.prototype.toString.call(cb0) === '[object Array]') ? $global[cb0[0]][cb0[1]] : cb0 arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels arrs: for (i = 1; i &lt; arglm1; i++) &#123; // eslint-disable-line no-labels arr = arguments[i] for (k in arr) &#123; if (arr[k] === arr1[k1] &amp;&amp; cb(k, k1) === 0) &#123; if (i === arglm2) &#123; retArr[k1] = arr1[k1] &#125; // If the innermost loop always leads at least once to an equal value, // continue the loop until done continue arrs // eslint-disable-line no-labels &#125; &#125; // If it reaches here, it wasn't found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_intersect_key in JavaScript","date":"2016-05-11T20:27:49.730Z","updated":"2016-05-11T20:27:49.730Z","comments":true,"path":"php/array/array_intersect_key/index.html","permalink":"http://locutus.io/php/array/array_intersect_key/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344module.exports = function array_intersect_key (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_intersect_key/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: These only output associative arrays (would need to be // note 1: all numeric and counting from zero to be numeric) // example 1: var $array1 = &#123;a: 'green', b: 'brown', c: 'blue', 0: 'red'&#125; // example 1: var $array2 = &#123;a: 'green', 0: 'yellow', 1: 'red'&#125; // example 1: array_intersect_key($array1, $array2) // returns 1: &#123;0: 'red', a: 'green'&#125; var retArr = &#123;&#125; var argl = arguments.length var arglm1 = argl - 1 var k1 = '' var arr = &#123;&#125; var i = 0 var k = '' arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels if (!arr1.hasOwnProperty(k1)) &#123; continue &#125; arrs: for (i = 1; i &lt; argl; i++) &#123; // eslint-disable-line no-labels arr = arguments[i] for (k in arr) &#123; if (!arr.hasOwnProperty(k)) &#123; continue &#125; if (k === k1) &#123; if (i === arglm1) &#123; retArr[k1] = arr1[k1] &#125; // If the innermost loop always leads at least once to an equal value, // continue the loop until done continue arrs // eslint-disable-line no-labels &#125; &#125; // If it reaches here, it wasn't found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_intersect_assoc in JavaScript","date":"2016-05-11T20:27:49.730Z","updated":"2016-05-11T20:27:49.730Z","comments":true,"path":"php/array/array_intersect_assoc/index.html","permalink":"http://locutus.io/php/array/array_intersect_assoc/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738module.exports = function array_intersect_assoc (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_intersect_assoc/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: These only output associative arrays (would need to be // note 1: all numeric and counting from zero to be numeric) // example 1: var $array1 = &#123;a: 'green', b: 'brown', c: 'blue', 0: 'red'&#125; // example 1: var $array2 = &#123;a: 'green', 0: 'yellow', 1: 'red'&#125; // example 1: array_intersect_assoc($array1, $array2) // returns 1: &#123;a: 'green'&#125; var retArr = &#123;&#125; var argl = arguments.length var arglm1 = argl - 1 var k1 = '' var arr = &#123;&#125; var i = 0 var k = '' arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels arrs: for (i = 1; i &lt; argl; i++) &#123; // eslint-disable-line no-labels arr = arguments[i] for (k in arr) &#123; if (arr[k] === arr1[k1] &amp;&amp; k === k1) &#123; if (i === arglm1) &#123; retArr[k1] = arr1[k1] &#125; // If the innermost loop always leads at least once to an equal value, // continue the loop until done continue arrs // eslint-disable-line no-labels &#125; &#125; // If it reaches here, it wasn't found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_intersect in JavaScript","date":"2016-05-11T20:27:49.738Z","updated":"2016-05-11T20:27:49.738Z","comments":true,"path":"php/array/array_intersect/index.html","permalink":"http://locutus.io/php/array/array_intersect/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839module.exports = function array_intersect (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_intersect/ // original by: Brett Zamir (http://brett-zamir.me) // note 1: These only output associative arrays (would need to be // note 1: all numeric and counting from zero to be numeric) // example 1: var $array1 = &#123;'a' : 'green', 0:'red', 1: 'blue'&#125; // example 1: var $array2 = &#123;'b' : 'green', 0:'yellow', 1:'red'&#125; // example 1: var $array3 = ['green', 'red'] // example 1: var $result = array_intersect($array1, $array2, $array3) // returns 1: &#123;0: 'red', a: 'green'&#125; var retArr = &#123;&#125; var argl = arguments.length var arglm1 = argl - 1 var k1 = '' var arr = &#123;&#125; var i = 0 var k = '' arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels arrs: for (i = 1; i &lt; argl; i++) &#123; // eslint-disable-line no-labels arr = arguments[i] for (k in arr) &#123; if (arr[k] === arr1[k1]) &#123; if (i === arglm1) &#123; retArr[k1] = arr1[k1] &#125; // If the innermost loop always leads at least once to an equal value, // continue the loop until done continue arrs// eslint-disable-line no-labels &#125; &#125; // If it reaches here, it wasn't found in at least one array, so try next value continue arr1keys// eslint-disable-line no-labels &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_flip in JavaScript","date":"2016-05-11T20:27:49.726Z","updated":"2016-05-11T20:27:49.726Z","comments":true,"path":"php/array/array_flip/index.html","permalink":"http://locutus.io/php/array/array_flip/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920module.exports = function array_flip (trans) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_flip/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Pier Paolo Ramon (http://www.mastersoup.com/) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: array_flip( &#123;a: 1, b: 1, c: 2&#125; ) // returns 1: &#123;1: 'b', 2: 'c'&#125; var key var tmpArr = &#123;&#125; for (key in trans) &#123; if (!trans.hasOwnProperty(key)) &#123; continue &#125; tmpArr[trans[key]] = key &#125; return tmpArr&#125;","raw":null,"content":null},{"title":"PHP's array_filter in JavaScript","date":"2016-05-11T20:27:49.726Z","updated":"2016-05-11T20:27:49.726Z","comments":true,"path":"php/array/array_filter/index.html","permalink":"http://locutus.io/php/array/array_filter/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435module.exports = function array_filter (arr, func) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_filter/ // original by: Brett Zamir (http://brett-zamir.me) // input by: max4ever // improved by: Brett Zamir (http://brett-zamir.me) // note 1: Takes a function as an argument, not a function's name // example 1: var odd = function (num) &#123;return (num &amp; 1);&#125; // example 1: array_filter(&#123;\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5&#125;, odd) // returns 1: &#123;\"a\": 1, \"c\": 3, \"e\": 5&#125; // example 2: var even = function (num) &#123;return (!(num &amp; 1));&#125; // example 2: array_filter([6, 7, 8, 9, 10, 11, 12], even) // returns 2: [ 6, , 8, , 10, , 12 ] // example 3: array_filter(&#123;\"a\": 1, \"b\": false, \"c\": -1, \"d\": 0, \"e\": null, \"f\":'', \"g\":undefined&#125;) // returns 3: &#123;\"a\":1, \"c\":-1&#125; var retObj = &#123;&#125; var k func = func || function (v) &#123; return v &#125; // @todo: Issue #73 if (Object.prototype.toString.call(arr) === '[object Array]') &#123; retObj = [] &#125; for (k in arr) &#123; if (func(arr[k])) &#123; retObj[k] = arr[k] &#125; &#125; return retObj&#125;","raw":null,"content":null},{"title":"PHP's array_fill_keys in JavaScript","date":"2016-05-11T20:27:49.726Z","updated":"2016-05-11T20:27:49.726Z","comments":true,"path":"php/array/array_fill_keys/index.html","permalink":"http://locutus.io/php/array/array_fill_keys/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function array_fill_keys (keys, value) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_fill_keys/ // original by: Brett Zamir (http://brett-zamir.me) // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: var $keys = &#123;'a': 'foo', 2: 5, 3: 10, 4: 'bar'&#125; // example 1: array_fill_keys($keys, 'banana') // returns 1: &#123;\"foo\": \"banana\", 5: \"banana\", 10: \"banana\", \"bar\": \"banana\"&#125; var retObj = &#123;&#125; var key = '' for (key in keys) &#123; retObj[keys[key]] = value &#125; return retObj&#125;","raw":null,"content":null},{"title":"PHP's array_fill in JavaScript","date":"2016-05-11T20:27:49.726Z","updated":"2016-05-11T20:27:49.726Z","comments":true,"path":"php/array/array_fill/index.html","permalink":"http://locutus.io/php/array/array_fill/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718module.exports = function array_fill (startIndex, num, mixedVal) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_fill/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Waldo Malqui Silva (http://waldo.malqui.info) // example 1: array_fill(5, 6, 'banana') // returns 1: &#123; 5: 'banana', 6: 'banana', 7: 'banana', 8: 'banana', 9: 'banana', 10: 'banana' &#125; var key var tmpArr = &#123;&#125; if (!isNaN(startIndex) &amp;&amp; !isNaN(num)) &#123; for (key = 0; key &lt; num; key++) &#123; tmpArr[(key + startIndex)] = mixedVal &#125; &#125; return tmpArr&#125;","raw":null,"content":null},{"title":"PHP's array_diff_ukey in JavaScript","date":"2016-05-11T20:27:49.726Z","updated":"2016-05-11T20:27:49.726Z","comments":true,"path":"php/array/array_diff_ukey/index.html","permalink":"http://locutus.io/php/array/array_diff_ukey/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940module.exports = function array_diff_ukey (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_diff_ukey/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: var $array1 = &#123;blue: 1, red: 2, green: 3, purple: 4&#125; // example 1: var $array2 = &#123;green: 5, blue: 6, yellow: 7, cyan: 8&#125; // example 1: array_diff_ukey($array1, $array2, function (key1, key2)&#123; return (key1 === key2 ? 0 : (key1 &gt; key2 ? 1 : -1)); &#125;) // returns 1: &#123;red: 2, purple: 4&#125; var retArr = &#123;&#125; var arglm1 = arguments.length - 1 // var arglm2 = arglm1 - 1 var cb = arguments[arglm1] var k1 = '' var i = 1 var arr = &#123;&#125; var k = '' var $global = (typeof window !== 'undefined' ? window : GLOBAL) cb = (typeof cb === 'string') ? $global[cb] : (Object.prototype.toString.call(cb) === '[object Array]') ? $global[cb[0]][cb[1]] : cb arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels for (i = 1; i &lt; arglm1; i++) &#123; arr = arguments[i] for (k in arr) &#123; if (cb(k, k1) === 0) &#123; // If it reaches here, it was found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; retArr[k1] = arr1[k1] &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_diff_uassoc in JavaScript","date":"2016-05-11T20:27:49.718Z","updated":"2016-05-11T20:27:49.718Z","comments":true,"path":"php/array/array_diff_uassoc/index.html","permalink":"http://locutus.io/php/array/array_diff_uassoc/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940module.exports = function array_diff_uassoc (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_diff_uassoc/ // original by: Brett Zamir (http://brett-zamir.me) // example 1: var $array1 = &#123;a: 'green', b: 'brown', c: 'blue', 0: 'red'&#125; // example 1: var $array2 = &#123;a: 'GREEN', B: 'brown', 0: 'yellow', 1: 'red'&#125; // example 1: array_diff_uassoc($array1, $array2, function (key1, key2) &#123; return (key1 === key2 ? 0 : (key1 &gt; key2 ? 1 : -1)) &#125;) // returns 1: &#123;b: 'brown', c: 'blue', 0: 'red'&#125; // test: skip-1 var retArr = &#123;&#125; var arglm1 = arguments.length - 1 var cb = arguments[arglm1] var arr = &#123;&#125; var i = 1 var k1 = '' var k = '' var $global = (typeof window !== 'undefined' ? window : GLOBAL) cb = (typeof cb === 'string') ? $global[cb] : (Object.prototype.toString.call(cb) === '[object Array]') ? $global[cb[0]][cb[1]] : cb arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels for (i = 1; i &lt; arglm1; i++) &#123; arr = arguments[i] for (k in arr) &#123; if (arr[k] === arr1[k1] &amp;&amp; cb(k, k1) === 0) &#123; // If it reaches here, it was found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; retArr[k1] = arr1[k1] &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_diff_key in JavaScript","date":"2016-05-11T20:27:49.718Z","updated":"2016-05-11T20:27:49.718Z","comments":true,"path":"php/array/array_diff_key/index.html","permalink":"http://locutus.io/php/array/array_diff_key/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132module.exports = function array_diff_key (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_diff_key/ // original by: Ates Goral (http://magnetiq.com) // revised by: Brett Zamir (http://brett-zamir.me) // input by: Everlasto // example 1: array_diff_key(&#123;red: 1, green: 2, blue: 3, white: 4&#125;, &#123;red: 5&#125;) // returns 1: &#123;\"green\":2, \"blue\":3, \"white\":4&#125; // example 2: array_diff_key(&#123;red: 1, green: 2, blue: 3, white: 4&#125;, &#123;red: 5&#125;, &#123;red: 5&#125;) // returns 2: &#123;\"green\":2, \"blue\":3, \"white\":4&#125; var argl = arguments.length var retArr = &#123;&#125; var k1 = '' var i = 1 var k = '' var arr = &#123;&#125; arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels for (i = 1; i &lt; argl; i++) &#123; arr = arguments[i] for (k in arr) &#123; if (k === k1) &#123; // If it reaches here, it was found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; retArr[k1] = arr1[k1] &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_diff_assoc in JavaScript","date":"2016-05-11T20:27:49.718Z","updated":"2016-05-11T20:27:49.718Z","comments":true,"path":"php/array/array_diff_assoc/index.html","permalink":"http://locutus.io/php/array/array_diff_assoc/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function array_diff_assoc (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_diff_assoc/ // original by: Kevin van Zonneveld (http://kvz.io) // bugfixed by: 0m3r // revised by: Brett Zamir (http://brett-zamir.me) // example 1: array_diff_assoc(&#123;0: 'Kevin', 1: 'van', 2: 'Zonneveld'&#125;, &#123;0: 'Kevin', 4: 'van', 5: 'Zonneveld'&#125;) // returns 1: &#123;1: 'van', 2: 'Zonneveld'&#125; var retArr = &#123;&#125; var argl = arguments.length var k1 = '' var i = 1 var k = '' var arr = &#123;&#125; arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels for (i = 1; i &lt; argl; i++) &#123; arr = arguments[i] for (k in arr) &#123; if (arr[k] === arr1[k1] &amp;&amp; k === k1) &#123; // If it reaches here, it was found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; retArr[k1] = arr1[k1] &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_diff in JavaScript","date":"2016-05-11T20:27:49.726Z","updated":"2016-05-11T20:27:49.726Z","comments":true,"path":"php/array/array_diff/index.html","permalink":"http://locutus.io/php/array/array_diff/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930module.exports = function array_diff (arr1) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_diff/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Sanjoy Roy // revised by: Brett Zamir (http://brett-zamir.me) // example 1: array_diff(['Kevin', 'van', 'Zonneveld'], ['van', 'Zonneveld']) // returns 1: &#123;0:'Kevin'&#125; var retArr = &#123;&#125; var argl = arguments.length var k1 = '' var i = 1 var k = '' var arr = &#123;&#125; arr1keys: for (k1 in arr1) &#123; // eslint-disable-line no-labels for (i = 1; i &lt; argl; i++) &#123; arr = arguments[i] for (k in arr) &#123; if (arr[k] === arr1[k1]) &#123; // If it reaches here, it was found in at least one array, so try next value continue arr1keys // eslint-disable-line no-labels &#125; &#125; retArr[k1] = arr1[k1] &#125; &#125; return retArr&#125;","raw":null,"content":null},{"title":"PHP's array_count_values in JavaScript","date":"2016-05-11T20:27:49.718Z","updated":"2016-05-11T20:27:49.718Z","comments":true,"path":"php/array/array_count_values/index.html","permalink":"http://locutus.io/php/array/array_count_values/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556module.exports = function array_count_values (array) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_count_values/ // original by: Ates Goral (http://magnetiq.com) // improved by: Michael White (http://getsprink.com) // improved by: Kevin van Zonneveld (http://kvz.io) // input by: sankai // input by: Shingo // bugfixed by: Brett Zamir (http://brett-zamir.me) // example 1: array_count_values([ 3, 5, 3, \"foo\", \"bar\", \"foo\" ]) // returns 1: &#123;3:2, 5:1, \"foo\":2, \"bar\":1&#125; // example 2: array_count_values(&#123; p1: 3, p2: 5, p3: 3, p4: \"foo\", p5: \"bar\", p6: \"foo\" &#125;) // returns 2: &#123;3:2, 5:1, \"foo\":2, \"bar\":1&#125; // example 3: array_count_values([ true, 4.2, 42, \"fubar\" ]) // returns 3: &#123;42:1, \"fubar\":1&#125; var tmpArr = &#123;&#125; var key = '' var t = '' var _getType = function (obj) &#123; // Objects are php associative arrays. var t = typeof obj t = t.toLowerCase() if (t === 'object') &#123; t = 'array' &#125; return t &#125; var _countValue = function (tmpArr, value) &#123; if (typeof value === 'number') &#123; if (Math.floor(value) !== value) &#123; return &#125; &#125; else if (typeof value !== 'string') &#123; return &#125; if (value in tmpArr &amp;&amp; tmpArr.hasOwnProperty(value)) &#123; ++tmpArr[value] &#125; else &#123; tmpArr[value] = 1 &#125; &#125; t = _getType(array) if (t === 'array') &#123; for (key in array) &#123; if (array.hasOwnProperty(key)) &#123; _countValue.call(this, tmpArr, array[key]) &#125; &#125; &#125; return tmpArr&#125;","raw":null,"content":null},{"title":"PHP's array_combine in JavaScript","date":"2016-05-11T20:27:49.718Z","updated":"2016-05-11T20:27:49.718Z","comments":true,"path":"php/array/array_combine/index.html","permalink":"http://locutus.io/php/array/array_combine/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940module.exports = function array_combine (keys, values) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_combine/ // original by: Kevin van Zonneveld (http://kvz.io) // improved by: Brett Zamir (http://brett-zamir.me) // example 1: array_combine([0,1,2], ['kevin','van','zonneveld']) // returns 1: &#123;0: 'kevin', 1: 'van', 2: 'zonneveld'&#125; var newArray = &#123;&#125; var i = 0 // input sanitation // Only accept arrays or array-like objects // Require arrays to have a count if (typeof keys !== 'object') &#123; return false &#125; if (typeof values !== 'object') &#123; return false &#125; if (typeof keys.length !== 'number') &#123; return false &#125; if (typeof values.length !== 'number') &#123; return false &#125; if (!keys.length) &#123; return false &#125; // number of elements does not match if (keys.length !== values.length) &#123; return false &#125; for (i = 0; i &lt; keys.length; i++) &#123; newArray[keys[i]] = values[i] &#125; return newArray&#125;","raw":null,"content":null},{"title":"PHP's array_chunk in JavaScript","date":"2016-05-11T20:27:49.718Z","updated":"2016-05-11T20:27:49.718Z","comments":true,"path":"php/array/array_chunk/index.html","permalink":"http://locutus.io/php/array/array_chunk/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566module.exports = function array_chunk (input, size, preserveKeys) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_chunk/ // original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com) // improved by: Brett Zamir (http://brett-zamir.me) // note 1: Important note: Per the ECMAScript specification, // note 1: objects may not always iterate in a predictable order // example 1: array_chunk(['Kevin', 'van', 'Zonneveld'], 2) // returns 1: [['Kevin', 'van'], ['Zonneveld']] // example 2: array_chunk(['Kevin', 'van', 'Zonneveld'], 2, true) // returns 2: [&#123;0:'Kevin', 1:'van'&#125;, &#123;2: 'Zonneveld'&#125;] // example 3: array_chunk(&#123;1:'Kevin', 2:'van', 3:'Zonneveld'&#125;, 2) // returns 3: [['Kevin', 'van'], ['Zonneveld']] // example 4: array_chunk(&#123;1:'Kevin', 2:'van', 3:'Zonneveld'&#125;, 2, true) // returns 4: [&#123;1: 'Kevin', 2: 'van'&#125;, &#123;3: 'Zonneveld'&#125;] var x var p = '' var i = 0 var c = -1 var l = input.length || 0 var n = [] if (size &lt; 1) &#123; return null &#125; if (Object.prototype.toString.call(input) === '[object Array]') &#123; if (preserveKeys) &#123; while (i &lt; l) &#123; (x = i % size) ? n[c][i] = input[i] : n[++c] = &#123;&#125;; n[c][i] = input[i] i++ &#125; &#125; else &#123; while (i &lt; l) &#123; (x = i % size) ? n[c][x] = input[i] : n[++c] = [input[i]] i++ &#125; &#125; &#125; else &#123; if (preserveKeys) &#123; for (p in input) &#123; if (input.hasOwnProperty(p)) &#123; (x = i % size) ? n[c][p] = input[p] : n[++c] = &#123;&#125;; n[c][p] = input[p] i++ &#125; &#125; &#125; else &#123; for (p in input) &#123; if (input.hasOwnProperty(p)) &#123; (x = i % size) ? n[c][x] = input[p] : n[++c] = [input[p]] i++ &#125; &#125; &#125; &#125; return n&#125;","raw":null,"content":null},{"title":"PHP's array_change_key_case in JavaScript","date":"2016-05-11T20:27:49.718Z","updated":"2016-05-11T20:27:49.718Z","comments":true,"path":"php/array/array_change_key_case/index.html","permalink":"http://locutus.io/php/array/array_change_key_case/index.html","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536module.exports = function array_change_key_case (array, cs) &#123; // eslint-disable-line camelcase // discuss at: http://locutus.io/php/array_change_key_case/ // original by: Ates Goral (http://magnetiq.com) // improved by: marrtins // improved by: Brett Zamir (http://brett-zamir.me) // example 1: array_change_key_case(42) // returns 1: false // example 2: array_change_key_case([ 3, 5 ]) // returns 2: [3, 5] // example 3: array_change_key_case(&#123; FuBaR: 42 &#125;) // returns 3: &#123;\"fubar\": 42&#125; // example 4: array_change_key_case(&#123; FuBaR: 42 &#125;, 'CASE_LOWER') // returns 4: &#123;\"fubar\": 42&#125; // example 5: array_change_key_case(&#123; FuBaR: 42 &#125;, 'CASE_UPPER') // returns 5: &#123;\"FUBAR\": 42&#125; // example 6: array_change_key_case(&#123; FuBaR: 42 &#125;, 2) // returns 6: &#123;\"FUBAR\": 42&#125; var caseFnc var key var tmpArr = &#123;&#125; if (Object.prototype.toString.call(array) === '[object Array]') &#123; return array &#125; if (array &amp;&amp; typeof array === 'object') &#123; caseFnc = (!cs || cs === 'CASE_LOWER') ? 'toLowerCase' : 'toUpperCase' for (key in array) &#123; tmpArr[key[caseFnc]()] = array[key] &#125; return tmpArr &#125; return false&#125;","raw":null,"content":null},{"title":"Go's strings package  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"golang/strings/index.html","permalink":"http://locutus.io/golang/strings/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"Go's strings.LastIndex in JavaScript","date":"2016-05-11T20:27:49.690Z","updated":"2016-05-11T20:27:49.690Z","comments":true,"path":"golang/strings/LastIndex/index.html","permalink":"http://locutus.io/golang/strings/LastIndex/index.html","excerpt":"","keywords":null,"text":"1234567891011module.exports = function LastIndex (s, sep) &#123; // discuss at: http://locutus.io/golang/strings/LastIndex // original by: Kevin van Zonneveld (http://kvz.io) // input by: GopherJS (http://www.gopherjs.org/) // example 1: LastIndex('go gopher', 'go') // returns 1: 3 // example 2: LastIndex('go gopher', 'rodent') // returns 2: -1 return parseInt(s.lastIndexOf(sep), 10) &gt;&gt; 0&#125;","raw":null,"content":null},{"title":"Go's strings.Index in JavaScript","date":"2016-05-11T20:27:49.690Z","updated":"2016-05-11T20:27:49.690Z","comments":true,"path":"golang/strings/Index/index.html","permalink":"http://locutus.io/golang/strings/Index/index.html","excerpt":"","keywords":null,"text":"12345678910module.exports = function Index (s, sep) &#123; // discuss at: http://locutus.io/golang/strings/Index // original by: Kevin van Zonneveld (http://kvz.io) // example 1: Index('Kevin', 'K') // returns 1: 0 // example 2: Index('Kevin', 'Z') // returns 2: -1 return (s + '').indexOf(sep)&#125;","raw":null,"content":null},{"title":"Go's strings.Count in JavaScript","date":"2016-05-11T20:27:49.690Z","updated":"2016-05-11T20:27:49.690Z","comments":true,"path":"golang/strings/Count/index.html","permalink":"http://locutus.io/golang/strings/Count/index.html","excerpt":"","keywords":null,"text":"12345678910111213141516171819202122232425262728293031323334module.exports = function Count (s, sep) &#123; // discuss at: http://locutus.io/php/printf/ // original by: Kevin van Zonneveld (http://kvz.io) // input by: GopherJS (http://www.gopherjs.org/) // example 1: Count(\"cheese\", \"e\") // returns 1: 3 // example 2: Count(\"five\", \"\") // before &amp; after each rune // returns 2: 5 var Index = require('../strings/Index2') var pos var n = 0 if ((sep.length === 0)) &#123; return s.split(sep).length + 1 &#125; else if (sep.length &gt; s.length) &#123; return 0 &#125; else if ((sep.length === s.length)) &#123; if (sep === s) &#123; return 1 &#125; return 0 &#125; while (true) &#123; pos = Index(s, sep) if (pos === -1) &#123; break &#125; n = n + (1) &gt;&gt; 0 s = s.substring((pos + sep.length &gt;&gt; 0)) &#125; return n&#125;","raw":null,"content":null},{"title":"Go's strings.Contains in JavaScript","date":"2016-05-11T20:27:49.690Z","updated":"2016-05-11T20:27:49.690Z","comments":true,"path":"golang/strings/Contains/index.html","permalink":"http://locutus.io/golang/strings/Contains/index.html","excerpt":"","keywords":null,"text":"12345678module.exports = function Contains (s, substr) &#123; // discuss at: http://locutus.io/golang/strings/Contains // original by: Kevin van Zonneveld (http://kvz.io) // example 1: Contains('Kevin', 'K') // returns 1: true return (s + '').indexOf(substr) !== -1&#125;","raw":null,"content":null},{"title":"Go packages  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"golang/index.html","permalink":"http://locutus.io/golang/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"C's math header file  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"c/math/index.html","permalink":"http://locutus.io/c/math/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"C's math.abs in JavaScript","date":"2016-05-11T20:27:49.690Z","updated":"2016-05-11T20:27:49.690Z","comments":true,"path":"c/math/abs/index.html","permalink":"http://locutus.io/c/math/abs/index.html","excerpt":"","keywords":null,"text":"1234567891011121314151617module.exports = function abs (mixedNumber) &#123; // discuss at: http://locutus.io/c/abs/ // original by: Waldo Malqui Silva (http://waldo.malqui.info) // improved by: Karol Kowalski // improved by: Kevin van Zonneveld (http://kvz.io) // improved by: Jonas Raoni Soares Silva (http://www.jsfromhell.com) // example 1: abs(4.2) // returns 1: 4.2 // example 2: abs(-4.2) // returns 2: 4.2 // example 3: abs(-5) // returns 3: 5 // example 4: abs('_argos') // returns 4: 0 return Math.abs(mixedNumber) || 0&#125;","raw":null,"content":null},{"title":"C header files  in JavaScript","date":"2016-05-11T20:27:50.122Z","updated":"2016-05-11T20:27:50.122Z","comments":true,"path":"c/index.html","permalink":"http://locutus.io/c/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"Locutus Hall of Fame","date":"2016-05-11T20:24:01.013Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"/authors/index.html","permalink":"http://locutus.io//authors/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"About Locutus","date":"2016-05-11T20:24:01.013Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"/index.html","permalink":"http://locutus.io//index.html","excerpt":"","keywords":null,"text":"Locutus is a project that seeks to assimilate other languages‚Äô standard libraries to JavaScript. Why, you ask? Well, firstly because we can of course! Apart from that, it can also serve as a nice pastime for a rainy Sunday afternoon. Not only can porting a function be quite rewarding, but it also deepens your understanding of different languages. In that sense, it is not unlike doing a crossword puzzle. Lastly it will hopefully allow us to profit from interoperable functions (for instance when apps involve more than one programming language) as well as from higher level functions such as: number_format, sprintf, and strtotime, which do not exist in JavaScript‚Äôs standard library. JavaScript is the most commonly used programming language, but it lacks an exhaustive standard library. This means that developers coming from other languages are often left wondering how to achieve common tasks, such as formatting dates or generating a hashes. Locutus aims to show developers who are proficient in other programming languages how these high-level tasks can be achieved in JavaScript. Apart from the things that are missing in JavaScript, we are also porting functions like Go‚Äôs string.Index, even though JavaScript offers a perfectly good native equivalent in the form of String.indexOf. We are going this extra mile to show newcomers an example of how behavior might differ between various languages. At an earlier stage, we also had the idea that when enough parts of a language were ported, you might even be able to run programs in JavaScript that were entirely written in other languages. While this certainly was fun to try and we had some degree of success in doing this for PHP, we have since abandoned this goal. Mainly because it drove us to write many hacks, while we were never really able to get anything to work flawlessly. Moreover, projects like GopherJS and Emscripten offer better means to that end, anyway. What we are notEven though Locutus is porting standard libraries from other languages, this is for reference only. We are not a drop-in standard library for JavaScript. If that is something you are interested in, we recommend you to take a look at lodash, which is more lightweight, focused and mature. It does a great job of complementing JavaScript‚Äôs bare bones nature. That being said, there is still a fair amount of useful things to be found in this repository, and Locutus makes it easy to require and bundle just a single function that you deem worthy of your project. Our Notes should be helpful in evaluating the issues and maturity of a particular function. What we are not portingAs we have mentioned before, we are sticking to raw functions and steering clear of things that touch global environment, language constructs or data-types. We are not extending built-in natives either. While this would aid in assimilating a larger part of a language, past mistakes have led us to decide that these fall outside of Locutus‚Äô scope. Other projects are of course welcome to take a stab at it. A community effortNot unlike Wikipedia, Locutus is an ongoing community effort. Our philosophy follows The McDonald‚Äôs Theory. This means that we don‚Äôt consider it to be a bad thing that many of our functions are first iterations, which may still have their fair share of issues. We hope that these flaws will inspire others to come up with better ideas. So, if you know a better way to do something, we would love to see your improvements! ContributingWe use GitHub for collaboration. There are a few guidelines in our CONTRIBUTING.md document. It would be helpful to glance over them before submitting your work, to avoid unnecessary back and forth, as well as potential disappointment. LicensingLocutus is licensed under the MIT licenses. The MIT license allows you to use the library as you see fit (even in commercial projects) as long as you redistribute the original license along with it. You are not obligated to share your improvements, even though that would obviously be greatly appreciated and would also ensure that you won‚Äôt lose your changes after you upgrade.","raw":null,"content":null}],"posts":[{"title":"php.js is Dead - Long Live Locutus","slug":"announcing-locutus","date":"2016-05-02T00:00:00.000Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"2016/05/announcing-locutus/","link":"","permalink":"http://locutus.io/2016/05/announcing-locutus/","excerpt":"","keywords":null,"text":"As was briefly mentioned in Breaking Backwards Compatibility, I am launching a big iteration of php.js today. It includes so many breaking changes that it is safe to say that, after 9 years, php.js is dead. And, like a phoenix, Locutus has risen from its ashes. Locutus will largely have the same mission: Offer a community platform to collaborate on JavaScript counterparts to functions from other languages, for fun and educational purposes. Locutus will, however, also be different on a few key points. Locutus will focus on: Expanding to other languages, such as C, Go, Python and Ruby Hack-free porting, meaning we will only port individual functions from the standard libraries, while avoiding language features, environment, data-types and configuration The educational aspect and the intellectual challenge Using npm as the distribution platform of choice, so you can do var strings = require(&#39;golang/strings&#39;) and, in case the browser is your target platform, bundle this via Browserify, rollup.js or webpack. Trying to deliver functions that are interoperable between browsers and Node.js, but also allowing to target just one platform when that saves us from writing overly wieldy code. These cases will be documented with a note. An example of this would be opening a file from disk. We would then state it is Node.js-only. While it is still very much a work in progress, I have already deprecated and updated many functions that did not adhere to this renewed focus. If you spot a function I overlooked, please let me know on GitHub. I feel these changes were needed to regain the motivation required for leading this project. For a long time, I have struggled with php.js in its old form. I rarely did maintenance runs anymore and when I did, it was guilt-driven rather than out of curiosity or excitement - the things that led me to start this project. There are several reasons why I had lost my intrinsic motivation: The things that could reasonably be ported, had already been ported. The things that probably should not have been ported, had been ported too - and were now mostly good for provoking purists and inducing maintenance load. Not very rewarding. Misuse of the project. I shed approximately 451 tears when some people started using the project so they would not have to learn JavaScript and could continue PHP-ing in the browser, using 2.1MB, 451-function, ready-to-rock spaceship bundles in the browser. I made efforts to stop newcomers from doing that. I shed approximately 2.1 tears from the angry notes they then sent me. I started a new company and protocol, which took much time by itself, but also meant I spent my time writing exclusively in other programming languages. You won‚Äôt find any bitterness about that here, but it did mean I had less time and use for PHP oriented projects 9 years ago, the tech world was a different place. Node.js did not exist, everyone was on IE6, and JavaScript‚Äôs main use was opening popups. Going from age 23 to 32, I have changed my stance on pretty much everything. One of these things that I have now abandoned is the idea that our project could perhaps one day be used as an interactive debugging tool, or run entire scripts from other languages in Node. I pursued that goal for some time with the thirst of a youngster, and while we had some success doing so, it drove me to write and accept hacks that, in retrospect, have probably secured me a special place in hell. Projects like GopherJS or Emscripten offer far better means to that end. Our approach isn‚Äôt suitable for it. Knowing that I was beginning to fall short as a project lead, I tried to recruit fresh blood to replace me. However, even though there is still an active community of contributors, I couldn‚Äôt find any volunteers for taking the lead. For a while, I considered declaring [UNMAINTAINED], but I felt - and still feel - too great a deal of duty and responsibility towards past and present contributors. So instead, I started thinking about what it would take for me to get my mojo back. Having analyzed what had crippled it over the past 9 years, I decided to make the changes that would allow it to flow back again. If you are interested in the nuts and bolts, these are a few things I have been secretly working on in order to clean up our codebase and breathe new life into this project. I have: Added (generated) Mocha tests for every function, instead of our own test framework Added a $global that works in both Browsers and Node.js (we should try to avoid this when we can though) Added a CONTRIBUTORS guide as well as New Issue and Pull Request templates, so we can be more efficient using GitHub Added native JSON, base64, sha1 and md5 support where available Added npm versioning and releases Added support for ES6, any function can be written in this JavaScript version and it will be transpiled to ES5 before we publish to npm to ensure compatability. Asked Troy Dodd if we could use his stunning Locutus artwork to be our avatar (and he said yes!) Assimilated a dozen of example functions that showcase how we could port four new languages to JavaScript Changed all functions to make them adhere to the JavaScript Standard Style and have a max line length of 100. Travis CI will fail when new additions do not adhere Deprecated/documented all functions using eval, new Function and other bad practices Fixed around 50 failed tests that were previously marked as skipped (still a few to go) Made it so that all functions can be required individually via npm Made it so that dependencies between functions are now handled via CommonJS require Moved the website from Jekyll to Hexo, so that we lose a Ruby dependency and everything needed to work on the website can be npm installed Refactored the utility class Removed _workbench and _experimental folders. They are available for reference in 1.3.2, but making them harder to find for newcomers should help avoid complaints and confusion. If you want to experiment, we can use local files or branches when it‚Äôs time to collaborate. I understand this all can feel like a radical shift, since functions have different locations and there is talk of deprecating functions. Perhaps you wrote these functions with your own blood, sweat and tears. To make matters worse, I will also be deprecating many GitHub Issues and Pull Requests that have become invalid due to this new major push. I hope you can agree that this project found itself in a dead-end street and that I had to undo some of our work to back out and get us on the road again. I am doing this not to hurt past contributors, but to honor them. I have spent many nights and weekends modernizing this project, so that our work could be given new life. I would also like to voice a word of appreciation to you as a contributor, for the hard work that went into crafting this project. Rewriting a language in another language is no small task, and people tend to forget that in order to port an alien language to JavaScript, we had to write a lot of JavaScript. In failing to restrain myself and having tried to port the entire language, I may have ventured into the darker engineering arts. And in the end, it did not even let me fully realize my goal in return. I accept defeat here. However, I am also proud that we have built a welcoming and friendly community together where over the course of 9 years, hundreds of developers from all over the world have helped each other to improve their code, to learn JavaScript, and help others learn it. I, for one, have become much more familiar with JavaScript‚Äôs delicacies because of it, and I like to think the same goes for many of you as well. Therefore, I accept both defeat and victory. As a contributor to this project, I hope Locutus brings the changes that can spark your interest again, just as it has for me. I hope you will join me on this new adventure to a magical land of standard libraries full of functions that are just screaming to be ported. I am looking at you, rainy Sunday afternoon.. This time we will be a little bit older, a little bit wiser, and hopefully have the resolve to steer clear of the darker areas. Nevertheless, we will have just as much fun in challenging ourselves and each other, as well as by learning other languages. I promise! : ) For those that can forgive me for my past mistakes and for deprecating some of our previous work in this new major release: you can try Locutus right now if you want: 123$ npm init$ npm install --save --save-exact locutus$ vim index.js 12345678910var echo = require('locutus/php/strings/echo')var capwords = require('locutus/python/string/capwords')var strings = require('locutus/golang/strings')var rubyMath = require('locutus/ruby/Math')var c = require('locutus/c')echo(capwords('locutus'))echo(strings.Contains('Locutus', 'us'))echo(rubyMath.acos(0.3))echo(c.math.abs(-5)) 12345$ node index.jsLocutustrue1.2661036727794995 If you want to help Locutus, our newly added languages don‚Äôt have much meat on the bones yet and it would be fantastic to see if you can think of ways to assimilate a function that Locutus currently does not harbor. Also, there are plenty project-wide ideas in our Backlog that we would love help with, so I guess there is just one thing left to say.. To the GitHubs! Kevin","raw":null,"content":null,"categories":[],"tags":[{"name":"c","slug":"c","permalink":"http://locutus.io/tags/c/"},{"name":"future","slug":"future","permalink":"http://locutus.io/tags/future/"},{"name":"golang","slug":"golang","permalink":"http://locutus.io/tags/golang/"},{"name":"js","slug":"js","permalink":"http://locutus.io/tags/js/"},{"name":"php","slug":"php","permalink":"http://locutus.io/tags/php/"},{"name":"python","slug":"python","permalink":"http://locutus.io/tags/python/"},{"name":"ruby","slug":"ruby","permalink":"http://locutus.io/tags/ruby/"}]},{"title":"Breaking Backwards Compatibility","slug":"breaking-bc","date":"2016-04-20T00:00:00.000Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"2016/04/breaking-bc/","link":"","permalink":"http://locutus.io/2016/04/breaking-bc/","excerpt":"","keywords":null,"text":"Hi all, I‚Äôm planning to push out a big release soon that will change a lot of things about this project. Among things, it will: Offer a platform to learn other languages besides PHP Be focussed on npm as the main distribution platform, so you can var sprintf = require(&#39;string/sprintf&#39;) (and use Browserify, Rollup, or Webpack on that if the browser is your target) Deprecate functions that were desperately trying to mimic PHP, yet never really succeeding The old version will remain available as v1.3.2. I certainly hope you are not using this project like so: https://raw.githubusercontent.com/kvz/phpjs/master/functions/strings/sprintf.js as that is asking for BC breakage as well as impolite towards GitHub, but if you are, you should change your links to https://raw.githubusercontent.com/kvz/locutus/v1.3.2/functions/strings/sprintf.js until you can figure out how to vendor in that function and host it yourself. If you are using the project via npm, the old version will be available under the 1.3.2 package version. If you are using it via Git, use git checkout v1.3.2. The new version will be available as v2.0.2, as well as master by the time I launch. I‚Äôm not sure yet when that will be, but I thought it might save some headaches to already give the heads up about this. Stay tuned for more, Kevin","raw":null,"content":null,"categories":[],"tags":[{"name":"future","slug":"future","permalink":"http://locutus.io/tags/future/"}]},{"title":"Switching to Jekyll","slug":"jekyll","date":"2016-04-02T00:00:00.000Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"2016/04/jekyll/","link":"","permalink":"http://locutus.io/2016/04/jekyll/","excerpt":"","keywords":null,"text":"Hi all, Four years ago we switched from a PHP generated site to one built in Octopress, so it would be easier for people to contribute, and we would not have to worry about keeping servers online. Things have changed since then. The Octopress version we used is no longer supported, and the new 3.0 is leans heavily on Jekyll. With the backing of GitHub for GitHub Pages, Jekyll itself has improved tremendously. Combined, I felt we reached the tipping point where it made more sense to port things to Jekyll so we can profit from their speed of development, ecosystem, and the fact that many developers are already familiar with it. Long story short, I just completed the migration, and if you want to work on the website, here‚Äôs what you‚Äôd do. Jekyll runs on Ruby, so make sure you have that installed, preferably with a working version of bundler. The rest of the site-building dependencies are node-based, so make sure you have a working npm as well. To install the dependencies: 12npm installnpm run website:install To start a local version of the website and open a browser that will auto-refresh on changes, type: 1npm run website:start Now hack on the files in the ./website folder, until you‚Äôre happy with the local results. Commit the changes to Git or send in a PR if you don‚Äôt have write access to the repository. This means the sources are saved, but someone with write access still needs to deploy. To do that, type: 1npm run website:deploy That‚Äôs it : ) P.S. We have a few custom build steps such as rendering the functions, that make it hard for us to only use the GitHub Pages provided Jekyll, this means for the time being we‚Äôll be relying on our own scripts and Jekyll version. That said, it‚Äôs still possible to orchestrate auto-deploys whenever there‚Äôs a change to master, by using Travis CI and encrypted environment keys. If I have time, I‚Äôd like to set this up too. This way people could propose changes, and merging them would be enough to see them go live. Best wishes, Kevin","raw":null,"content":null,"categories":[],"tags":[{"name":"future","slug":"future","permalink":"http://locutus.io/tags/future/"},{"name":"jekyll","slug":"jekyll","permalink":"http://locutus.io/tags/jekyll/"},{"name":"octopress","slug":"octopress","permalink":"http://locutus.io/tags/octopress/"},{"name":"website","slug":"website","permalink":"http://locutus.io/tags/website/"}]},{"title":"Standard Coding Style","slug":"standard-coding-style","date":"2016-04-01T00:00:00.000Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"2016/04/standard-coding-style/","link":"","permalink":"http://locutus.io/2016/04/standard-coding-style/","excerpt":"","keywords":null,"text":"Three years ago we switched from our own home-brown coding style convention to Felix‚Äô Node.js Style Guide, for reasons outlined in the introductory post: Coding Style. The reasoning behind adopting such a widely supported coding style, has not changed. Locutus should be focused on its added value, and less so arguing about, and inventing custom conventions around coding style. What has changed a great deal though, is the JavaScript landscape. A large part of the community is gathering behind Feross Aboukhadijeh‚Äôs JavaScript Standard Style and ESLint. Standard offers sensible defaults (no semicolons might take some getting used to but it‚Äôs really ok and after two weeks you won‚Äôt look back). ESLint offers powerful ways to enforce the standard. ESLint for instance, offers a --fix command-line argument flag, that converts non-conforming codebases to whichever coding style convention was selected. The auto-fixing does not cover all rules yet, but it‚Äôs getting better every month. As we upgrade these modules and fix our codebase, more and more legacy will conform. Additionally, I‚Äôve added non-fatal linting to our Travis CI builds, so you can see which functions don‚Äôt comply, and make them. Locutus does few naughty tricks to bend the laws of physics and overcome a few obstacles in porting programming languages. For this reason, Locutus a few exceptions listed in .eslintrc. As a goal for the future, it would be interesting to see if we could lose these exceptions. Best wishes, Kevin","raw":null,"content":null,"categories":[],"tags":[{"name":"coding style","slug":"coding-style","permalink":"http://locutus.io/tags/coding-style/"},{"name":"convention","slug":"convention","permalink":"http://locutus.io/tags/convention/"}]},{"title":"Coding Style","slug":"coding-style","date":"2013-05-04T00:00:00.000Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"2013/05/coding-style/","link":"","permalink":"http://locutus.io/2013/05/coding-style/","excerpt":"","keywords":null,"text":"Given the focus of Locutus I think we should re-invent as few wheels as possible and make use of sensible tools and standards that are other people have already invested a great deal of time in to get right. In this light, I‚Äôve decided to adopt Felix‚Äô Node.js Style Guide for coding standards, instead of running our own. It saves us time maintaining and it becomes easier for people to contribute because they don‚Äôt have to memorize where Locutus diverges. For the big parts our codebase is already compatible with it, so we won‚Äôt get any weird space + tab indentations as a result, as we start adding code that follows the guide. Going forward, contributions should comply with these conventions before being merged in. Best wishes, Kevin","raw":null,"content":null,"categories":[],"tags":[{"name":"coding style","slug":"coding-style","permalink":"http://locutus.io/tags/coding-style/"},{"name":"convention","slug":"convention","permalink":"http://locutus.io/tags/convention/"}]},{"title":"A Word on the Focus of php.js","slug":"a-word-on-the-focus-of-php-dot-js","date":"2013-05-03T00:00:00.000Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"2013/05/a-word-on-the-focus-of-php-dot-js/","link":"","permalink":"http://locutus.io/2013/05/a-word-on-the-focus-of-php-dot-js/","excerpt":"","keywords":null,"text":"Hi everybody, The new site has no server-side code. Instead we generate HTML using Octopress and push to GitHub Pages, all from one repository. This saves hosting costs/overhead and makes it really easy for people to submit pull requests and for contributors to make changes that I don‚Äôt always have time for. It makes the project less dependent on me and more a community effort. To move forward, sometimes you have to cut features. In this case I had to lose our compiler, a webtool that relied on server-side code to generate minified packages from php.js functions. Understandibly this has raised questions. It is still possible to bundle 4 useful functions: 123456789101112131415161718# - Note that this combined 4 php.js functions into a file called: myLocutus# and minified version: myphp.min.js in the current directory.# - Note that this throws all functions into the# global scope. It would be better to put them in a dedicated locutus object.curl -sk https://raw.github.com/kvz/locutus/31bf3129f08672f8c1d6d0dcad2368ebc4ac57f2/functions/\\&#123;datetime/date\\,datetime/strtotime\\,strings/md5\\,strings/vsprintf\\&#125;.js |tee ./myLocutus &amp;&amp; \\curl -vo ./myphp.min.js \\ -X POST \\ -H 'Expect: ' \\ --data-urlencode compilation_level=\"SIMPLE_OPTIMIZATIONS\" \\ --data-urlencode output_format=\"text\" \\ --data-urlencode output_info=\"compiled_code\" \\ --data-urlencode js_code@myLocutus \\ http://closure-compiler.appspot.com/compile but some people think php.js should bundle all of it‚Äôs functions into one big file: Not providing an all-in-one, downloadable, minified, ready-to-use .js file is going to kill php.js. You‚Äôve abandoned windows users, and really any non-CLI junkie. While I am capable of compiling this myself, what a headache. You‚Äôve introduced a barrier-to-entry that didn‚Äôt exist before, and by not existing, allowed for the following you now have. I highly suggest that you have this available for download, either here or on github, such that you can keep (and maintain) the momentum you worked so hard for. I‚Äôd like to comment on that here. While I appreciate the sentiment, wether the project is being killed by these changes depends on how you look at php.js. To me, php.js is a resource: For PHP developers that want see how it‚Äôs done in JavaScript That enables fun experiments With a few higher level functions that are incredibly useful, and missing in JavaScript This is what I feel php.js should focus on. Making functions. Making them better. If - on the other hand - you think of php.js as a 2.1MB, 451-function, ready-to-rock spaceship that you can plug into your website so you can keep typing PHP client-side, not caring about learning JavaScript or how that extra weight might impact the user experience ..then yes, these changes are going to kill php.js. I have limited time to spend on open source, and I want to spend it on things I enjoy and can believe in. Not on working to support use-cases that keep new developers from learning, or make the web slower. I‚Äôm sorry if this upsets folks but it really is my free time. Luckily though for people with different views, I released php.js under MIT so it‚Äôs cool for anybody to fork this project and run with it. If anything, knowing that the php.js repository will focus on the raw ./functions makes this easier. Best wishes, Kevin","raw":null,"content":null,"categories":[],"tags":[{"name":"focus","slug":"focus","permalink":"http://locutus.io/tags/focus/"}]},{"title":"New Site","slug":"new-site","date":"2012-09-26T00:00:00.000Z","updated":"2016-05-11T20:24:01.013Z","comments":true,"path":"2012/09/new-site/","link":"","permalink":"http://locutus.io/2012/09/new-site/","excerpt":"","keywords":null,"text":"Hi everybody, Welcome to our new site. The old one had a lot of dead weight that nobody used and was basically unmaintained. This one is generated by Octopress as plain html, and then stored on Github pages. The source to do that is inside the Locutus directory in the _octopress dir, and freely available. For instance, you can now very easily: edit the about page change this blog post checkout the navigation improve the way function pages are built Next, any Locutus contributor who has Octopress set up (this mostly involves having the right ruby &amp; gem versions) can then run make site MSG=&quot;describe what you did&quot; in the project‚Äôs root dir to deploy the changes. This should make it easy for Locutus contributors (or any Github user really, using pull requests) to update the site, making it less dependent on few core members, and more a community effort. This is also the way I want to do regular Locutus development. Less via comments, more via the power of Github. To people wondering where the compiler has gone to, I‚Äôm discontinuing that feature. It was more often broken then working, and I think this site should focus on being a simple resource and discussion platform, and not much else. Now that everything is open sourced more I think there‚Äôs room for anyone to build a better alternative. While I‚Äôm not actively involved with Locutus anymore, I hope taking this step will make the project ready for the future. Best wishes, Kevin","raw":null,"content":null,"categories":[],"tags":[{"name":"future","slug":"future","permalink":"http://locutus.io/tags/future/"},{"name":"octopress","slug":"octopress","permalink":"http://locutus.io/tags/octopress/"},{"name":"website","slug":"website","permalink":"http://locutus.io/tags/website/"}]}]}